// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
import * as tslib_1 from "tslib";
import { HttpHeaders } from "../httpHeaders";
import { Constants } from "../util/constants";
import {
  getDefaultUserAgentKey,
  getPlatformSpecificData,
} from "./msRestUserAgentPolicy";
import { BaseRequestPolicy } from "./requestPolicy";
function getRuntimeInfo() {
  const msRestRuntime = {
    key: "ms-rest-js",
    value: Constants.msRestVersion,
  };
  return [msRestRuntime];
}
function getUserAgentString(telemetryInfo, keySeparator, valueSeparator) {
  if (keySeparator === void 0) {
    keySeparator = " ";
  }
  if (valueSeparator === void 0) {
    valueSeparator = "/";
  }
  return telemetryInfo
    .map(info => {
      const value = info.value ? `${valueSeparator}${info.value}` : "";
      return `${info.key}${value}`;
    })
    .join(keySeparator);
}
export const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;
export function getDefaultUserAgentValue() {
  const runtimeInfo = getRuntimeInfo();
  const platformSpecificData = getPlatformSpecificData();
  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));
  return userAgent;
}
export function userAgentPolicy(userAgentData) {
  const key =
    !userAgentData || userAgentData.key == undefined
      ? getDefaultUserAgentKey()
      : userAgentData.key;
  const value =
    !userAgentData || userAgentData.value == undefined
      ? getDefaultUserAgentValue()
      : userAgentData.value;
  return {
    create(nextPolicy, options) {
      return new UserAgentPolicy(nextPolicy, options, key, value);
    },
  };
}
var UserAgentPolicy = /** @class */ (_super => {
  tslib_1.__extends(UserAgentPolicy, _super);

  class UserAgentPolicy {
    constructor(_nextPolicy, _options, headerKey, headerValue) {
      const _this = _super.call(this, _nextPolicy, _options) || this;
      _this._nextPolicy = _nextPolicy;
      _this._options = _options;
      _this.headerKey = headerKey;
      _this.headerValue = headerValue;
      return _this;
    }

    sendRequest(request) {
      this.addUserAgentHeader(request);
      return this._nextPolicy.sendRequest(request);
    }

    addUserAgentHeader(request) {
      if (!request.headers) {
        request.headers = new HttpHeaders();
      }
      if (!request.headers.get(this.headerKey) && this.headerValue) {
        request.headers.set(this.headerKey, this.headerValue);
      }
    }
  }

  return UserAgentPolicy;
})(BaseRequestPolicy);
export { UserAgentPolicy };
//# sourceMappingURL=userAgentPolicy.js.map
