var microsoftRecognizersTextChoice = (function (exports) {
  "use strict";

  function unwrapExports(x) {
    return x &&
      x.__esModule &&
      Object.prototype.hasOwnProperty.call(x, "default")
      ? x["default"]
      : x;
  }

  function createCommonjsModule(fn, module) {
    return (
      (module = { exports: {} }), fn(module, module.exports), module.exports
    );
  }

  var culture = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Culture {
      constructor(cultureName, cultureCode) {
        this.cultureName = cultureName;
        this.cultureCode = cultureCode;
      }
      static getSupportedCultureCodes() {
        return Culture.supportedCultures.map((c) => c.cultureCode);
      }
      static mapToNearestLanguage(cultureCode) {
        if (cultureCode !== undefined) {
          cultureCode = cultureCode.toLowerCase();
          var supportedCultureCodes = Culture.getSupportedCultureCodes();
          if (supportedCultureCodes.indexOf(cultureCode) < 0) {
            var culturePrefix = cultureCode.split("-")[0].trim();
            supportedCultureCodes.forEach(function (supportedCultureCode) {
              if (supportedCultureCode.startsWith(culturePrefix)) {
                cultureCode = supportedCultureCode;
              }
            });
          }
        }
        return cultureCode;
      }
    }
    Culture.English = "en-us";
    Culture.Chinese = "zh-cn";
    Culture.Spanish = "es-es";
    Culture.Portuguese = "pt-br";
    Culture.French = "fr-fr";
    Culture.German = "de-de";
    Culture.Japanese = "ja-jp";
    Culture.Dutch = "nl-nl";
    Culture.Italian = "it-it";
    Culture.supportedCultures = [
      new Culture("English", Culture.English),
      new Culture("Chinese", Culture.Chinese),
      new Culture("Spanish", Culture.Spanish),
      new Culture("Portuguese", Culture.Portuguese),
      new Culture("French", Culture.French),
      new Culture("German", Culture.German),
      new Culture("Japanese", Culture.Japanese),
      new Culture("Dutch", Culture.Dutch),
      new Culture("Italian", Culture.Italian),
    ];
    exports.Culture = Culture;
    class CultureInfo {
      static getCultureInfo(cultureCode) {
        return new CultureInfo(cultureCode);
      }
      constructor(cultureName) {
        this.code = cultureName;
      }
    }
    exports.CultureInfo = CultureInfo;
  });

  unwrapExports(culture);

  var xregexp = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    function _slicedToArray(arr, i) {
      return (
        _arrayWithHoles(arr) ||
        _iterableToArrayLimit(arr, i) ||
        _nonIterableRest()
      );
    }

    function _nonIterableRest() {
      throw new TypeError(
        "Invalid attempt to destructure non-iterable instance"
      );
    }

    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (
          var _i = arr[Symbol.iterator](), _s;
          !(_n = (_s = _i.next()).done);
          _n = true
        ) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    /*!
     * XRegExp 4.2.0
     * <xregexp.com>
     * Steven Levithan (c) 2007-present MIT License
     */

    /**
     * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and
     * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to
     * make your client-side grepping simpler and more powerful, while freeing you from related
     * cross-browser inconsistencies.
     */
    // ==--------------------------==
    // Private stuff
    // ==--------------------------==
    // Property name used for extended regex instance data
    var REGEX_DATA = "xregexp"; // Optional features that can be installed and uninstalled

    var features = {
      astral: false,
      namespacing: false,
    }; // Native methods to use and restore ('native' is an ES3 reserved keyword)

    var nativ = {
      exec: RegExp.prototype.exec,
      test: RegExp.prototype.test,
      match: String.prototype.match,
      replace: String.prototype.replace,
      split: String.prototype.split,
    }; // Storage for fixed/extended native methods

    var fixed = {}; // Storage for regexes cached by `XRegExp.cache`

    var regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor

    var patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`

    var tokens = []; // Token scopes

    var defaultScope = "default";
    var classScope = "class"; // Regexes that match native regex syntax, including octals

    var nativeTokens = {
      // Any native multicharacter token in default scope, or any single character
      default:
        /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
      // Any native multicharacter token in character class scope, or any single character
      class:
        /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/,
    }; // Any backreference or dollar-prefixed character in replacement strings

    var replacementToken = /\$(?:{([\w$]+)}|<([\w$]+)>|(\d\d?|[\s\S]))/g; // Check for correct `exec` handling of nonparticipating capturing groups

    var correctExecNpcg = nativ.exec.call(/()??/, "")[1] === undefined; // Check for ES6 `flags` prop support

    var hasFlagsProp = /x/.flags !== undefined; // Shortcut to `Object.prototype.toString`

    var _ref = {},
      toString = _ref.toString;

    function hasNativeFlag(flag) {
      // Can't check based on the presence of properties/getters since browsers might support such
      // properties even when they don't support the corresponding flag in regex construction (tested
      // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`
      // throws an error)
      var isSupported = true;

      try {
        // Can't use regex literals for testing even in a `try` because regex literals with
        // unsupported flags cause a compilation error in IE
        new RegExp("", flag);
      } catch (exception) {
        isSupported = false;
      }

      return isSupported;
    } // Check for ES6 `u` flag support

    var hasNativeU = hasNativeFlag("u"); // Check for ES6 `y` flag support

    var hasNativeY = hasNativeFlag("y"); // Tracker for known flags, including addon flags

    var registeredFlags = {
      g: true,
      i: true,
      m: true,
      u: hasNativeU,
      y: hasNativeY,
    };
    /**
     * Attaches extended data and `XRegExp.prototype` properties to a regex object.
     *
     * @private
     * @param {RegExp} regex Regex to augment.
     * @param {Array} captureNames Array with capture names, or `null`.
     * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.
     * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.
     * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal
     *   operations, and never exposed to users. For internal-only regexes, we can improve perf by
     *   skipping some operations like attaching `XRegExp.prototype` properties.
     * @returns {RegExp} Augmented regex.
     */

    function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
      regex[REGEX_DATA] = {
        captureNames: captureNames,
      };

      if (isInternalOnly) {
        return regex;
      } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value

      if (regex.__proto__) {
        regex.__proto__ = XRegExp.prototype;
      } else {
        for (var p in XRegExp.prototype) {
          // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this
          // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`
          // extensions exist on `regex.prototype` anyway
          regex[p] = XRegExp.prototype[p];
        }
      }

      regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order

      regex[REGEX_DATA].flags = xFlags
        ? xFlags.split("").sort().join("")
        : xFlags;
      return regex;
    }
    /**
     * Removes any duplicate characters from the provided string.
     *
     * @private
     * @param {String} str String to remove duplicate characters from.
     * @returns {String} String with any duplicate characters removed.
     */

    function clipDuplicates(str) {
      return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, "");
    }
    /**
     * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`
     * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing
     * flags g and y while copying the regex.
     *
     * @private
     * @param {RegExp} regex Regex to copy.
     * @param {Object} [options] Options object with optional properties:
     *   - `addG` {Boolean} Add flag g while copying the regex.
     *   - `addY` {Boolean} Add flag y while copying the regex.
     *   - `removeG` {Boolean} Remove flag g while copying the regex.
     *   - `removeY` {Boolean} Remove flag y while copying the regex.
     *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal
     *     operations, and never exposed to users. For internal-only regexes, we can improve perf by
     *     skipping some operations like attaching `XRegExp.prototype` properties.
     *   - `source` {String} Overrides `<regex>.source`, for special cases.
     * @returns {RegExp} Copy of the provided regex, possibly with modified flags.
     */

    function copyRegex(regex, options) {
      if (!XRegExp.isRegExp(regex)) {
        throw new TypeError("Type RegExp expected");
      }

      var xData = regex[REGEX_DATA] || {};
      var flags = getNativeFlags(regex);
      var flagsToAdd = "";
      var flagsToRemove = "";
      var xregexpSource = null;
      var xregexpFlags = null;
      options = options || {};

      if (options.removeG) {
        flagsToRemove += "g";
      }

      if (options.removeY) {
        flagsToRemove += "y";
      }

      if (flagsToRemove) {
        flags = nativ.replace.call(
          flags,
          new RegExp("[".concat(flagsToRemove, "]+"), "g"),
          ""
        );
      }

      if (options.addG) {
        flagsToAdd += "g";
      }

      if (options.addY) {
        flagsToAdd += "y";
      }

      if (flagsToAdd) {
        flags = clipDuplicates(flags + flagsToAdd);
      }

      if (!options.isInternalOnly) {
        if (xData.source !== undefined) {
          xregexpSource = xData.source;
        } // null or undefined; don't want to add to `flags` if the previous value was null, since
        // that indicates we're not tracking original precompilation flags

        if (xData.flags != null) {
          // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never
          // removed for non-internal regexes, so don't need to handle it
          xregexpFlags = flagsToAdd
            ? clipDuplicates(xData.flags + flagsToAdd)
            : xData.flags;
        }
      } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid
      // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and
      // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the
      // translation to native regex syntax

      regex = augment(
        new RegExp(options.source || regex.source, flags),
        hasNamedCapture(regex) ? xData.captureNames.slice(0) : null,
        xregexpSource,
        xregexpFlags,
        options.isInternalOnly
      );
      return regex;
    }
    /**
     * Converts hexadecimal to decimal.
     *
     * @private
     * @param {String} hex
     * @returns {Number}
     */

    function dec(hex) {
      return parseInt(hex, 16);
    }
    /**
     * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an
     * inline comment or whitespace with flag x. This is used directly as a token handler function
     * passed to `XRegExp.addToken`.
     *
     * @private
     * @param {String} match Match arg of `XRegExp.addToken` handler
     * @param {String} scope Scope arg of `XRegExp.addToken` handler
     * @param {String} flags Flags arg of `XRegExp.addToken` handler
     * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match.
     */

    function getContextualTokenSeparator(match, scope, flags) {
      if (
        // No need to separate tokens if at the beginning or end of a group
        match.input[match.index - 1] === "(" ||
        match.input[match.index + match[0].length] === ")" || // No need to separate tokens if before or after a `|`
        match.input[match.index - 1] === "|" ||
        match.input[match.index + match[0].length] === "|" || // No need to separate tokens if at the beginning or end of the pattern
        match.index < 1 ||
        match.index + match[0].length >= match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookahead.
        // The way this is written relies on:
        // - The search regex matching only 3-char strings.
        // - Although `substr` gives chars from the end of the string if given a negative index,
        //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`
        nativ.test.call(/^\(\?[:=!]/, match.input.substr(match.index - 3, 3)) || // Avoid separating tokens when the following token is a quantifier
        isQuantifierNext(match.input, match.index + match[0].length, flags)
      ) {
        return "";
      } // Keep tokens separated. This avoids e.g. inadvertedly changing `\1 1` or `\1(?#)1` to `\11`.
      // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax
      // error `(? :` into `(?:`.

      return "(?:)";
    }
    /**
     * Returns native `RegExp` flags used by a regex object.
     *
     * @private
     * @param {RegExp} regex Regex to check.
     * @returns {String} Native flags in use.
     */

    function getNativeFlags(regex) {
      return hasFlagsProp
        ? regex.flags // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation
        : // with an empty string) allows this to continue working predictably when
          // `XRegExp.proptotype.toString` is overridden
          nativ.exec.call(
            /\/([a-z]*)$/i,
            RegExp.prototype.toString.call(regex)
          )[1];
    }
    /**
     * Determines whether a regex has extended instance data used to track capture names.
     *
     * @private
     * @param {RegExp} regex Regex to check.
     * @returns {Boolean} Whether the regex uses named capture.
     */

    function hasNamedCapture(regex) {
      return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
    }
    /**
     * Converts decimal to hexadecimal.
     *
     * @private
     * @param {Number|String} dec
     * @returns {String}
     */

    function hex(dec) {
      return parseInt(dec, 10).toString(16);
    }
    /**
     * Checks whether the next nonignorable token after the specified position is a quantifier.
     *
     * @private
     * @param {String} pattern Pattern to search within.
     * @param {Number} pos Index in `pattern` to search at.
     * @param {String} flags Flags used by the pattern.
     * @returns {Boolean} Whether the next nonignorable token is a quantifier.
     */

    function isQuantifierNext(pattern, pos, flags) {
      return nativ.test.call(
        flags.indexOf("x") !== -1 // Ignore any leading whitespace, line comments, and inline comments
          ? /^(?:\s|#[^#\n]*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/ // Ignore any leading inline comments
          : /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/,
        pattern.slice(pos)
      );
    }
    /**
     * Determines whether a value is of the specified type, by resolving its internal [[Class]].
     *
     * @private
     * @param {*} value Object to check.
     * @param {String} type Type to check for, in TitleCase.
     * @returns {Boolean} Whether the object matches the type.
     */

    function isType(value, type) {
      return toString.call(value) === "[object ".concat(type, "]");
    }
    /**
     * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.
     *
     * @private
     * @param {String} str
     * @returns {String}
     */

    function pad4(str) {
      while (str.length < 4) {
        str = "0".concat(str);
      }

      return str;
    }
    /**
     * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads
     * the flag preparation logic from the `XRegExp` constructor.
     *
     * @private
     * @param {String} pattern Regex pattern, possibly with a leading mode modifier.
     * @param {String} flags Any combination of flags.
     * @returns {Object} Object with properties `pattern` and `flags`.
     */

    function prepareFlags(pattern, flags) {
      // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags
      if (clipDuplicates(flags) !== flags) {
        throw new SyntaxError("Invalid duplicate regex flag ".concat(flags));
      } // Strip and apply a leading mode modifier with any combination of flags except g or y

      pattern = nativ.replace.call(
        pattern,
        /^\(\?([\w$]+)\)/,
        function ($0, $1) {
          if (nativ.test.call(/[gy]/, $1)) {
            throw new SyntaxError(
              "Cannot use flag g or y in mode modifier ".concat($0)
            );
          } // Allow duplicate flags within the mode modifier

          flags = clipDuplicates(flags + $1);
          return "";
        }
      ); // Throw on unknown native or nonnative flags

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (
          var _iterator = flags[Symbol.iterator](), _step;
          !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
          _iteratorNormalCompletion = true
        ) {
          var flag = _step.value;

          if (!registeredFlags[flag]) {
            throw new SyntaxError("Unknown regex flag ".concat(flag));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return {
        pattern: pattern,
        flags: flags,
      };
    }
    /**
     * Prepares an options object from the given value.
     *
     * @private
     * @param {String|Object} value Value to convert to an options object.
     * @returns {Object} Options object.
     */

    function prepareOptions(value) {
      var options = {};

      if (isType(value, "String")) {
        XRegExp.forEach(value, /[^\s,]+/, function (match) {
          options[match] = true;
        });
        return options;
      }

      return value;
    }
    /**
     * Registers a flag so it doesn't throw an 'unknown flag' error.
     *
     * @private
     * @param {String} flag Single-character flag to register.
     */

    function registerFlag(flag) {
      if (!/^[\w$]$/.test(flag)) {
        throw new Error("Flag must be a single character A-Za-z0-9_$");
      }

      registeredFlags[flag] = true;
    }
    /**
     * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified
     * position, until a match is found.
     *
     * @private
     * @param {String} pattern Original pattern from which an XRegExp object is being built.
     * @param {String} flags Flags being used to construct the regex.
     * @param {Number} pos Position to search for tokens within `pattern`.
     * @param {Number} scope Regex scope to apply: 'default' or 'class'.
     * @param {Object} context Context object to use for token handler functions.
     * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.
     */

    function runTokens(pattern, flags, pos, scope, context) {
      var i = tokens.length;
      var leadChar = pattern[pos];
      var result = null;
      var match;
      var t; // Run in reverse insertion order

      while (i--) {
        t = tokens[i];

        if (
          (t.leadChar && t.leadChar !== leadChar) ||
          (t.scope !== scope && t.scope !== "all") ||
          (t.flag && !(flags.indexOf(t.flag) !== -1))
        ) {
          continue;
        }

        match = XRegExp.exec(pattern, t.regex, pos, "sticky");

        if (match) {
          result = {
            matchLength: match[0].length,
            output: t.handler.call(context, match, scope, flags),
            reparse: t.reparse,
          }; // Finished with token tests

          break;
        }
      }

      return result;
    }
    /**
     * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to
     * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if
     * the Unicode Base addon is not available, since flag A is registered by that addon.
     *
     * @private
     * @param {Boolean} on `true` to enable; `false` to disable.
     */

    function setAstral(on) {
      features.astral = on;
    }
    /**
     * Adds named capture groups to the `groups` property of match arrays. See here for details:
     * https://github.com/tc39/proposal-regexp-named-groups
     *
     * @private
     * @param {Boolean} on `true` to enable; `false` to disable.
     */

    function setNamespacing(on) {
      features.namespacing = on;
    }
    /**
     * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow
     * the ES5 abstract operation `ToObject`.
     *
     * @private
     * @param {*} value Object to check and return.
     * @returns {*} The provided object.
     */

    function toObject(value) {
      // null or undefined
      if (value == null) {
        throw new TypeError("Cannot convert null or undefined to object");
      }

      return value;
    } // ==--------------------------==
    // Constructor
    // ==--------------------------==

    /**
     * Creates an extended regular expression object for matching text with a pattern. Differs from a
     * native regular expression in that additional syntax and flags are supported. The returned object
     * is in fact a native `RegExp` and works with all native methods.
     *
     * @class XRegExp
     * @constructor
     * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.
     * @param {String} [flags] Any combination of flags.
     *   Native flags:
     *     - `g` - global
     *     - `i` - ignore case
     *     - `m` - multiline anchors
     *     - `u` - unicode (ES6)
     *     - `y` - sticky (Firefox 3+, ES6)
     *   Additional XRegExp flags:
     *     - `n` - explicit capture
     *     - `s` - dot matches all (aka singleline)
     *     - `x` - free-spacing and line comments (aka extended)
     *     - `A` - astral (requires the Unicode Base addon)
     *   Flags cannot be provided when constructing one `RegExp` from another.
     * @returns {RegExp} Extended regular expression object.
     * @example
     *
     * // With named capture and flag x
     * XRegExp(`(?<year>  [0-9]{4} ) -?  # year
     *          (?<month> [0-9]{2} ) -?  # month
     *          (?<day>   [0-9]{2} )     # day`, 'x');
     *
     * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)
     * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and
     * // have fresh `lastIndex` properties (set to zero).
     * XRegExp(/regex/);
     */

    function XRegExp(pattern, flags) {
      if (XRegExp.isRegExp(pattern)) {
        if (flags !== undefined) {
          throw new TypeError("Cannot supply flags when copying a RegExp");
        }

        return copyRegex(pattern);
      } // Copy the argument behavior of `RegExp`

      pattern = pattern === undefined ? "" : String(pattern);
      flags = flags === undefined ? "" : String(flags);

      if (XRegExp.isInstalled("astral") && !(flags.indexOf("A") !== -1)) {
        // This causes an error to be thrown if the Unicode Base addon is not available
        flags += "A";
      }

      if (!patternCache[pattern]) {
        patternCache[pattern] = {};
      }

      if (!patternCache[pattern][flags]) {
        var context = {
          hasNamedCapture: false,
          captureNames: [],
        };
        var scope = defaultScope;
        var output = "";
        var pos = 0;
        var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier

        var applied = prepareFlags(pattern, flags);
        var appliedPattern = applied.pattern;
        var appliedFlags = applied.flags; // Use XRegExp's tokens to translate the pattern to a native regex pattern.
        // `appliedPattern.length` may change on each iteration if tokens use `reparse`

        while (pos < appliedPattern.length) {
          do {
            // Check for custom tokens at the current position
            result = runTokens(
              appliedPattern,
              appliedFlags,
              pos,
              scope,
              context
            ); // If the matched token used the `reparse` option, splice its output into the
            // pattern before running tokens again at the same position

            if (result && result.reparse) {
              appliedPattern =
                appliedPattern.slice(0, pos) +
                result.output +
                appliedPattern.slice(pos + result.matchLength);
            }
          } while (result && result.reparse);

          if (result) {
            output += result.output;
            pos += result.matchLength || 1;
          } else {
            // Get the native token at the current position
            var _XRegExp$exec = XRegExp.exec(
                appliedPattern,
                nativeTokens[scope],
                pos,
                "sticky"
              ),
              _XRegExp$exec2 = _slicedToArray(_XRegExp$exec, 1),
              token = _XRegExp$exec2[0];

            output += token;
            pos += token.length;

            if (token === "[" && scope === defaultScope) {
              scope = classScope;
            } else if (token === "]" && scope === classScope) {
              scope = defaultScope;
            }
          }
        }

        patternCache[pattern][flags] = {
          // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty
          // groups are sometimes inserted during regex transpilation in order to keep tokens
          // separated. However, more than one empty group in a row is never needed.
          pattern: nativ.replace.call(output, /(?:\(\?:\))+/g, "(?:)"),
          // Strip all but native flags
          flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ""),
          // `context.captureNames` has an item for each capturing group, even if unnamed
          captures: context.hasNamedCapture ? context.captureNames : null,
        };
      }

      var generated = patternCache[pattern][flags];
      return augment(
        new RegExp(generated.pattern, generated.flags),
        generated.captures,
        pattern,
        flags
      );
    } // Add `RegExp.prototype` to the prototype chain

    XRegExp.prototype = /(?:)/; // ==--------------------------==
    // Public properties
    // ==--------------------------==

    /**
     * The XRegExp version number as a string containing three dot-separated parts. For example,
     * '2.0.0-beta-3'.
     *
     * @static
     * @memberOf XRegExp
     * @type String
     */

    XRegExp.version = "4.2.0"; // ==--------------------------==
    // Public methods
    // ==--------------------------==
    // Intentionally undocumented; used in tests and addons

    XRegExp._clipDuplicates = clipDuplicates;
    XRegExp._hasNativeFlag = hasNativeFlag;
    XRegExp._dec = dec;
    XRegExp._hex = hex;
    XRegExp._pad4 = pad4;
    /**
     * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to
     * create XRegExp addons. If more than one token can match the same string, the last added wins.
     *
     * @memberOf XRegExp
     * @param {RegExp} regex Regex object that matches the new token.
     * @param {Function} handler Function that returns a new pattern string (using native regex syntax)
     *   to replace the matched token within all future XRegExp regexes. Has access to persistent
     *   properties of the regex being built, through `this`. Invoked with three arguments:
     *   - The match array, with named backreference properties.
     *   - The regex scope where the match was found: 'default' or 'class'.
     *   - The flags used by the regex, including any flags in a leading mode modifier.
     *   The handler function becomes part of the XRegExp construction process, so be careful not to
     *   construct XRegExps within the function or you will trigger infinite recursion.
     * @param {Object} [options] Options object with optional properties:
     *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.
     *   - `flag` {String} Single-character flag that triggers the token. This also registers the
     *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.
     *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are
     *     not required to trigger the token. This registers the flags, to prevent XRegExp from
     *     throwing an 'unknown flag' error when any of the flags are used.
     *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as
     *     final, and instead be reparseable by other tokens (including the current token). Allows
     *     token chaining or deferring.
     *   - `leadChar` {String} Single character that occurs at the beginning of any successful match
     *     of the token (not always applicable). This doesn't change the behavior of the token unless
     *     you provide an erroneous value. However, providing it can increase the token's performance
     *     since the token can be skipped at any positions where this character doesn't appear.
     * @example
     *
     * // Basic usage: Add \a for the ALERT control code
     * XRegExp.addToken(
     *   /\\a/,
     *   () => '\\x07',
     *   {scope: 'all'}
     * );
     * XRegExp('\\a[\\a-\\n]+').test('\x07\n\x07'); // -> true
     *
     * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.
     * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of
     * // character classes only)
     * XRegExp.addToken(
     *   /([?*+]|{\d+(?:,\d*)?})(\??)/,
     *   (match) => `${match[1]}${match[2] ? '' : '?'}`,
     *   {flag: 'U'}
     * );
     * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'
     * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'
     */

    XRegExp.addToken = function (regex, handler, options) {
      options = options || {};
      var _options = options,
        optionalFlags = _options.optionalFlags;

      if (options.flag) {
        registerFlag(options.flag);
      }

      if (optionalFlags) {
        optionalFlags = nativ.split.call(optionalFlags, "");
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (
            var _iterator2 = optionalFlags[Symbol.iterator](), _step2;
            !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);
            _iteratorNormalCompletion2 = true
          ) {
            var flag = _step2.value;
            registerFlag(flag);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      } // Add to the private list of syntax tokens

      tokens.push({
        regex: copyRegex(regex, {
          addG: true,
          addY: hasNativeY,
          isInternalOnly: true,
        }),
        handler: handler,
        scope: options.scope || defaultScope,
        flag: options.flag,
        reparse: options.reparse,
        leadChar: options.leadChar,
      }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags
      // might now produce different results

      XRegExp.cache.flush("patterns");
    };
    /**
     * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with
     * the same pattern and flag combination, the cached copy of the regex is returned.
     *
     * @memberOf XRegExp
     * @param {String} pattern Regex pattern string.
     * @param {String} [flags] Any combination of XRegExp flags.
     * @returns {RegExp} Cached XRegExp object.
     * @example
     *
     * while (match = XRegExp.cache('.', 'gs').exec(str)) {
     *   // The regex is compiled once only
     * }
     */

    XRegExp.cache = function (pattern, flags) {
      if (!regexCache[pattern]) {
        regexCache[pattern] = {};
      }

      return (
        regexCache[pattern][flags] ||
        (regexCache[pattern][flags] = XRegExp(pattern, flags))
      );
    }; // Intentionally undocumented; used in tests

    XRegExp.cache.flush = function (cacheName) {
      if (cacheName === "patterns") {
        // Flush the pattern cache used by the `XRegExp` constructor
        patternCache = {};
      } else {
        // Flush the regex cache populated by `XRegExp.cache`
        regexCache = {};
      }
    };
    /**
     * Escapes any regular expression metacharacters, for use when matching literal strings. The result
     * can safely be used at any point within a regex that uses any flags.
     *
     * @memberOf XRegExp
     * @param {String} str String to escape.
     * @returns {String} String with regex metacharacters escaped.
     * @example
     *
     * XRegExp.escape('Escaped? <.>');
     * // -> 'Escaped\?\ <\.>'
     */

    XRegExp.escape = function (str) {
      return nativ.replace.call(
        toObject(str),
        /[-\[\]{}()*+?.,\\^$|#\s]/g,
        "\\$&"
      );
    };
    /**
     * Executes a regex search in a specified string. Returns a match array or `null`. If the provided
     * regex uses named capture, named backreference properties are included on the match array.
     * Optional `pos` and `sticky` arguments specify the search start position, and whether the match
     * must start at the specified position only. The `lastIndex` property of the provided regex is not
     * used, but is updated for compatibility. Also fixes browser bugs compared to the native
     * `RegExp.prototype.exec` and can be used reliably cross-browser.
     *
     * @memberOf XRegExp
     * @param {String} str String to search.
     * @param {RegExp} regex Regex to search with.
     * @param {Number} [pos=0] Zero-based index at which to start the search.
     * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
     *   only. The string `'sticky'` is accepted as an alternative to `true`.
     * @returns {Array} Match array with named backreference properties, or `null`.
     * @example
     *
     * // Basic use, with named backreference
     * let match = XRegExp.exec('U+2620', XRegExp('U\\+(?<hex>[0-9A-F]{4})'));
     * match.hex; // -> '2620'
     *
     * // With pos and sticky, in a loop
     * let pos = 2, result = [], match;
     * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\d)>/, pos, 'sticky')) {
     *   result.push(match[1]);
     *   pos = match.index + match[0].length;
     * }
     * // result -> ['2', '3', '4']
     */

    XRegExp.exec = function (str, regex, pos, sticky) {
      var cacheKey = "g";
      var addY = false;
      var fakeY = false;
      var match;
      addY = hasNativeY && !!(sticky || (regex.sticky && sticky !== false));

      if (addY) {
        cacheKey += "y";
      } else if (sticky) {
        // Simulate sticky matching by appending an empty capture to the original regex. The
        // resulting regex will succeed no matter what at the current index (set with `lastIndex`),
        // and will not search the rest of the subject string. We'll know that the original regex
        // has failed if that last capture is `''` rather than `undefined` (i.e., if that last
        // capture participated in the match).
        fakeY = true;
        cacheKey += "FakeY";
      }

      regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`

      var r2 =
        regex[REGEX_DATA][cacheKey] ||
        (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
          addG: true,
          addY: addY,
          source: fakeY ? "".concat(regex.source, "|()") : undefined,
          removeY: sticky === false,
          isInternalOnly: true,
        }));
      pos = pos || 0;
      r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.

      match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means
      // the original regexp failed (see above).

      if (fakeY && match && match.pop() === "") {
        match = null;
      }

      if (regex.global) {
        regex.lastIndex = match ? r2.lastIndex : 0;
      }

      return match;
    };
    /**
     * Executes a provided function once per regex match. Searches always start at the beginning of the
     * string and continue until the end, regardless of the state of the regex's `global` property and
     * initial `lastIndex`.
     *
     * @memberOf XRegExp
     * @param {String} str String to search.
     * @param {RegExp} regex Regex to search with.
     * @param {Function} callback Function to execute for each match. Invoked with four arguments:
     *   - The match array, with named backreference properties.
     *   - The zero-based match index.
     *   - The string being traversed.
     *   - The regex object being used to traverse the string.
     * @example
     *
     * // Extracts every other digit from a string
     * const evens = [];
     * XRegExp.forEach('1a2345', /\d/, (match, i) => {
     *   if (i % 2) evens.push(+match[0]);
     * });
     * // evens -> [2, 4]
     */

    XRegExp.forEach = function (str, regex, callback) {
      var pos = 0;
      var i = -1;
      var match;

      while ((match = XRegExp.exec(str, regex, pos))) {
        // Because `regex` is provided to `callback`, the function could use the deprecated/
        // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`
        // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,
        // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of
        // regexes, mutating the regex will not have any effect on the iteration or matched strings,
        // which is a nice side effect that brings extra safety.
        callback(match, ++i, str, regex);
        pos = match.index + (match[0].length || 1);
      }
    };
    /**
     * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with
     * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native
     * regexes are not recompiled using XRegExp syntax.
     *
     * @memberOf XRegExp
     * @param {RegExp} regex Regex to globalize.
     * @returns {RegExp} Copy of the provided regex with flag `g` added.
     * @example
     *
     * const globalCopy = XRegExp.globalize(/regex/);
     * globalCopy.global; // -> true
     */

    XRegExp.globalize = function (regex) {
      return copyRegex(regex, {
        addG: true,
      });
    };
    /**
     * Installs optional features according to the specified options. Can be undone using
     * `XRegExp.uninstall`.
     *
     * @memberOf XRegExp
     * @param {Object|String} options Options object or string.
     * @example
     *
     * // With an options object
     * XRegExp.install({
     *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)
     *   astral: true,
     *
     *   // Adds named capture groups to the `groups` property of matches
     *   namespacing: true
     * });
     *
     * // With an options string
     * XRegExp.install('astral namespacing');
     */

    XRegExp.install = function (options) {
      options = prepareOptions(options);

      if (!features.astral && options.astral) {
        setAstral(true);
      }

      if (!features.namespacing && options.namespacing) {
        setNamespacing(true);
      }
    };
    /**
     * Checks whether an individual optional feature is installed.
     *
     * @memberOf XRegExp
     * @param {String} feature Name of the feature to check. One of:
     *   - `astral`
     *   - `namespacing`
     * @returns {Boolean} Whether the feature is installed.
     * @example
     *
     * XRegExp.isInstalled('astral');
     */

    XRegExp.isInstalled = function (feature) {
      return !!features[feature];
    };
    /**
     * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes
     * created in another frame, when `instanceof` and `constructor` checks would fail.
     *
     * @memberOf XRegExp
     * @param {*} value Object to check.
     * @returns {Boolean} Whether the object is a `RegExp` object.
     * @example
     *
     * XRegExp.isRegExp('string'); // -> false
     * XRegExp.isRegExp(/regex/i); // -> true
     * XRegExp.isRegExp(RegExp('^', 'm')); // -> true
     * XRegExp.isRegExp(XRegExp('(?s).')); // -> true
     */

    XRegExp.isRegExp = function (value) {
      return toString.call(value) === "[object RegExp]";
    }; // isType(value, 'RegExp');

    /**
     * Returns the first matched string, or in global mode, an array containing all matched strings.
     * This is essentially a more convenient re-implementation of `String.prototype.match` that gives
     * the result types you actually want (string instead of `exec`-style array in match-first mode,
     * and an empty array instead of `null` when no matches are found in match-all mode). It also lets
     * you override flag g and ignore `lastIndex`, and fixes browser bugs.
     *
     * @memberOf XRegExp
     * @param {String} str String to search.
     * @param {RegExp} regex Regex to search with.
     * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to
     *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,
     *   `scope` is 'all'.
     * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all
     *   mode: Array of all matched strings, or an empty array.
     * @example
     *
     * // Match first
     * XRegExp.match('abc', /\w/); // -> 'a'
     * XRegExp.match('abc', /\w/g, 'one'); // -> 'a'
     * XRegExp.match('abc', /x/g, 'one'); // -> null
     *
     * // Match all
     * XRegExp.match('abc', /\w/g); // -> ['a', 'b', 'c']
     * XRegExp.match('abc', /\w/, 'all'); // -> ['a', 'b', 'c']
     * XRegExp.match('abc', /x/, 'all'); // -> []
     */

    XRegExp.match = function (str, regex, scope) {
      var global = (regex.global && scope !== "one") || scope === "all";
      var cacheKey = (global ? "g" : "") + (regex.sticky ? "y" : "") || "noGY";
      regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`

      var r2 =
        regex[REGEX_DATA][cacheKey] ||
        (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
          addG: !!global,
          removeG: scope === "one",
          isInternalOnly: true,
        }));
      var result = nativ.match.call(toObject(str), r2);

      if (regex.global) {
        regex.lastIndex =
          scope === "one" && result // Can't use `r2.lastIndex` since `r2` is nonglobal in this case
            ? result.index + result[0].length
            : 0;
      }

      return global ? result || [] : result && result[0];
    };
    /**
     * Retrieves the matches from searching a string using a chain of regexes that successively search
     * within previous matches. The provided `chain` array can contain regexes and or objects with
     * `regex` and `backref` properties. When a backreference is specified, the named or numbered
     * backreference is passed forward to the next regex or returned.
     *
     * @memberOf XRegExp
     * @param {String} str String to search.
     * @param {Array} chain Regexes that each search for matches within preceding results.
     * @returns {Array} Matches by the last regex in the chain, or an empty array.
     * @example
     *
     * // Basic usage; matches numbers within <b> tags
     * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [
     *   XRegExp('(?is)<b>.*?</b>'),
     *   /\d+/
     * ]);
     * // -> ['2', '4', '56']
     *
     * // Passing forward and returning specific backreferences
     * html = '<a href="http://xregexp.com/api/">XRegExp</a>\
     *         <a href="http://www.google.com/">Google</a>';
     * XRegExp.matchChain(html, [
     *   {regex: /<a href="([^"]+)">/i, backref: 1},
     *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}
     * ]);
     * // -> ['xregexp.com', 'www.google.com']
     */

    XRegExp.matchChain = function (str, chain) {
      return (function recurseChain(values, level) {
        var item = chain[level].regex
          ? chain[level]
          : {
              regex: chain[level],
            };
        var matches = [];

        function addMatch(match) {
          if (item.backref) {
            var ERR_UNDEFINED_GROUP =
              "Backreference to undefined group: ".concat(item.backref);
            var isNamedBackref = isNaN(item.backref);

            if (isNamedBackref && XRegExp.isInstalled("namespacing")) {
              // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`
              if (!(item.backref in match.groups)) {
                throw new ReferenceError(ERR_UNDEFINED_GROUP);
              }
            } else if (!match.hasOwnProperty(item.backref)) {
              throw new ReferenceError(ERR_UNDEFINED_GROUP);
            }

            var backrefValue =
              isNamedBackref && XRegExp.isInstalled("namespacing")
                ? match.groups[item.backref]
                : match[item.backref];
            matches.push(backrefValue || "");
          } else {
            matches.push(match[0]);
          }
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (
            var _iterator3 = values[Symbol.iterator](), _step3;
            !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);
            _iteratorNormalCompletion3 = true
          ) {
            var value = _step3.value;
            XRegExp.forEach(value, item.regex, addMatch);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return level === chain.length - 1 || !matches.length
          ? matches
          : recurseChain(matches, level + 1);
      })([str], 0);
    };
    /**
     * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string
     * or regex, and the replacement can be a string or a function to be called for each match. To
     * perform a global search and replace, use the optional `scope` argument or include flag g if using
     * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.
     * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser
     * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.
     *
     * @memberOf XRegExp
     * @param {String} str String to search.
     * @param {RegExp|String} search Search pattern to be replaced.
     * @param {String|Function} replacement Replacement string or a function invoked to create it.
     *   Replacement strings can include special replacement syntax:
     *     - $$ - Inserts a literal $ character.
     *     - $&, $0 - Inserts the matched substring.
     *     - $` - Inserts the string that precedes the matched substring (left context).
     *     - $' - Inserts the string that follows the matched substring (right context).
     *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts
     *       backreference n/nn.
     *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing
     *       group, inserts backreference n.
     *   Replacement functions are invoked with three or more arguments:
     *     - The matched substring (corresponds to $& above). Named backreferences are accessible as
     *       properties of this first argument.
     *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).
     *     - The zero-based index of the match within the total search string.
     *     - The total string being searched.
     * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not
     *   explicitly specified and using a regex with flag g, `scope` is 'all'.
     * @returns {String} New string with one or all matches replaced.
     * @example
     *
     * // Regex search, using named backreferences in replacement string
     * const name = XRegExp('(?<first>\\w+) (?<last>\\w+)');
     * XRegExp.replace('John Smith', name, '$<last>, $<first>');
     * // -> 'Smith, John'
     *
     * // Regex search, using named backreferences in replacement function
     * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);
     * // -> 'Smith, John'
     *
     * // String search, with replace-all
     * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');
     * // -> 'XRegExp builds XRegExps'
     */

    XRegExp.replace = function (str, search, replacement, scope) {
      var isRegex = XRegExp.isRegExp(search);
      var global = (search.global && scope !== "one") || scope === "all";
      var cacheKey = (global ? "g" : "") + (search.sticky ? "y" : "") || "noGY";
      var s2 = search;

      if (isRegex) {
        search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s
        // `lastIndex` isn't updated *during* replacement iterations

        s2 =
          search[REGEX_DATA][cacheKey] ||
          (search[REGEX_DATA][cacheKey] = copyRegex(search, {
            addG: !!global,
            removeG: scope === "one",
            isInternalOnly: true,
          }));
      } else if (global) {
        s2 = new RegExp(XRegExp.escape(String(search)), "g");
      } // Fixed `replace` required for named backreferences, etc.

      var result = fixed.replace.call(toObject(str), s2, replacement);

      if (isRegex && search.global) {
        // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
        search.lastIndex = 0;
      }

      return result;
    };
    /**
     * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an
     * array of replacement details. Later replacements operate on the output of earlier replacements.
     * Replacement details are accepted as an array with a regex or string to search for, the
     * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp
     * replacement text syntax, which supports named backreference properties via `${name}` or
     * `$<name>`.
     *
     * @memberOf XRegExp
     * @param {String} str String to search.
     * @param {Array} replacements Array of replacement detail arrays.
     * @returns {String} New string with all replacements.
     * @example
     *
     * str = XRegExp.replaceEach(str, [
     *   [XRegExp('(?<name>a)'), 'z${name}'],
     *   [/b/gi, 'y'],
     *   [/c/g, 'x', 'one'], // scope 'one' overrides /g
     *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g
     *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings
     *   [/f/g, ($0) => $0.toUpperCase()]
     * ]);
     */

    XRegExp.replaceEach = function (str, replacements) {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (
          var _iterator4 = replacements[Symbol.iterator](), _step4;
          !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done);
          _iteratorNormalCompletion4 = true
        ) {
          var r = _step4.value;
          str = XRegExp.replace(str, r[0], r[1], r[2]);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      return str;
    };
    /**
     * Splits a string into an array of strings using a regex or string separator. Matches of the
     * separator are not included in the result array. However, if `separator` is a regex that contains
     * capturing groups, backreferences are spliced into the result each time `separator` is matched.
     * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
     * cross-browser.
     *
     * @memberOf XRegExp
     * @param {String} str String to split.
     * @param {RegExp|String} separator Regex or string to use for separating the string.
     * @param {Number} [limit] Maximum number of items to include in the result array.
     * @returns {Array} Array of substrings.
     * @example
     *
     * // Basic use
     * XRegExp.split('a b c', ' ');
     * // -> ['a', 'b', 'c']
     *
     * // With limit
     * XRegExp.split('a b c', ' ', 2);
     * // -> ['a', 'b']
     *
     * // Backreferences in result array
     * XRegExp.split('..word1..', /([a-z]+)(\d+)/i);
     * // -> ['..', 'word', '1', '..']
     */

    XRegExp.split = function (str, separator, limit) {
      return fixed.split.call(toObject(str), separator, limit);
    };
    /**
     * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and
     * `sticky` arguments specify the search start position, and whether the match must start at the
     * specified position only. The `lastIndex` property of the provided regex is not used, but is
     * updated for compatibility. Also fixes browser bugs compared to the native
     * `RegExp.prototype.test` and can be used reliably cross-browser.
     *
     * @memberOf XRegExp
     * @param {String} str String to search.
     * @param {RegExp} regex Regex to search with.
     * @param {Number} [pos=0] Zero-based index at which to start the search.
     * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
     *   only. The string `'sticky'` is accepted as an alternative to `true`.
     * @returns {Boolean} Whether the regex matched the provided value.
     * @example
     *
     * // Basic use
     * XRegExp.test('abc', /c/); // -> true
     *
     * // With pos and sticky
     * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false
     * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true
     */
    // Do this the easy way :-)

    XRegExp.test = function (str, regex, pos, sticky) {
      return !!XRegExp.exec(str, regex, pos, sticky);
    };
    /**
     * Uninstalls optional features according to the specified options. All optional features start out
     * uninstalled, so this is used to undo the actions of `XRegExp.install`.
     *
     * @memberOf XRegExp
     * @param {Object|String} options Options object or string.
     * @example
     *
     * // With an options object
     * XRegExp.uninstall({
     *   // Disables support for astral code points in Unicode addons
     *   astral: true,
     *
     *   // Don't add named capture groups to the `groups` property of matches
     *   namespacing: true
     * });
     *
     * // With an options string
     * XRegExp.uninstall('astral namespacing');
     */

    XRegExp.uninstall = function (options) {
      options = prepareOptions(options);

      if (features.astral && options.astral) {
        setAstral(false);
      }

      if (features.namespacing && options.namespacing) {
        setNamespacing(false);
      }
    };
    /**
     * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as
     * regex objects or strings. Metacharacters are escaped in patterns provided as strings.
     * Backreferences in provided regex objects are automatically renumbered to work correctly within
     * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the
     * `flags` argument.
     *
     * @memberOf XRegExp
     * @param {Array} patterns Regexes and strings to combine.
     * @param {String} [flags] Any combination of XRegExp flags.
     * @param {Object} [options] Options object with optional properties:
     *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.
     * @returns {RegExp} Union of the provided regexes and strings.
     * @example
     *
     * XRegExp.union(['a+b*c', /(dogs)\1/, /(cats)\1/], 'i');
     * // -> /a\+b\*c|(dogs)\1|(cats)\2/i
     *
     * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});
     * // -> /manbearpig/i
     */

    XRegExp.union = function (patterns, flags, options) {
      options = options || {};
      var conjunction = options.conjunction || "or";
      var numCaptures = 0;
      var numPriorCaptures;
      var captureNames;

      function rewrite(match, paren, backref) {
        var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group

        if (paren) {
          ++numCaptures; // If the current capture has a name, preserve the name

          if (name) {
            return "(?<".concat(name, ">");
          } // Backreference
        } else if (backref) {
          // Rewrite the backreference
          return "\\".concat(+backref + numPriorCaptures);
        }

        return match;
      }

      if (!(isType(patterns, "Array") && patterns.length)) {
        throw new TypeError(
          "Must provide a nonempty array of patterns to merge"
        );
      }

      var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
      var output = [];
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (
          var _iterator5 = patterns[Symbol.iterator](), _step5;
          !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done);
          _iteratorNormalCompletion5 = true
        ) {
          var pattern = _step5.value;

          if (XRegExp.isRegExp(pattern)) {
            numPriorCaptures = numCaptures;
            captureNames =
              (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are
            // independently valid; helps keep this simple. Named captures are put back

            output.push(
              nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite)
            );
          } else {
            output.push(XRegExp.escape(pattern));
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      var separator = conjunction === "none" ? "" : "|";
      return XRegExp(output.join(separator), flags);
    }; // ==--------------------------==
    // Fixed/extended native methods
    // ==--------------------------==

    /**
     * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
     * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.
     *
     * @memberOf RegExp
     * @param {String} str String to search.
     * @returns {Array} Match array with named backreference properties, or `null`.
     */

    fixed.exec = function (str) {
      var origLastIndex = this.lastIndex;
      var match = nativ.exec.apply(this, arguments);

      if (match) {
        // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing
        // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9
        // in standards mode follows the spec.
        if (!correctExecNpcg && match.length > 1 && match.indexOf("") !== -1) {
          var r2 = copyRegex(this, {
            removeG: true,
            isInternalOnly: true,
          }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed
          // matching due to characters outside the match

          nativ.replace.call(String(str).slice(match.index), r2, function () {
            var len = arguments.length; // Skip index 0 and the last 2

            for (var i = 1; i < len - 2; ++i) {
              if (
                (i < 0 || arguments.length <= i ? undefined : arguments[i]) ===
                undefined
              ) {
                match[i] = undefined;
              }
            }
          });
        } // Attach named capture properties

        var groupsObject = match;

        if (XRegExp.isInstalled("namespacing")) {
          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
          match.groups = Object.create(null);
          groupsObject = match.groups;
        }

        if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
          // Skip index 0
          for (var i = 1; i < match.length; ++i) {
            var name = this[REGEX_DATA].captureNames[i - 1];

            if (name) {
              groupsObject[name] = match[i];
            }
          }
        } // Fix browsers that increment `lastIndex` after zero-length matches

        if (this.global && !match[0].length && this.lastIndex > match.index) {
          this.lastIndex = match.index;
        }
      }

      if (!this.global) {
        // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
        this.lastIndex = origLastIndex;
      }

      return match;
    };
    /**
     * Fixes browser bugs in the native `RegExp.prototype.test`.
     *
     * @memberOf RegExp
     * @param {String} str String to search.
     * @returns {Boolean} Whether the regex matched the provided value.
     */

    fixed.test = function (str) {
      // Do this the easy way :-)
      return !!fixed.exec.call(this, str);
    };
    /**
     * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
     * bugs in the native `String.prototype.match`.
     *
     * @memberOf String
     * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.
     * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,
     *   the result of calling `regex.exec(this)`.
     */

    fixed.match = function (regex) {
      if (!XRegExp.isRegExp(regex)) {
        // Use the native `RegExp` rather than `XRegExp`
        regex = new RegExp(regex);
      } else if (regex.global) {
        var result = nativ.match.apply(this, arguments); // Fixes IE bug

        regex.lastIndex = 0;
        return result;
      }

      return fixed.exec.call(regex, toObject(this));
    };
    /**
     * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement
     * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also
     * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex
     * search value, and the value of a replacement regex's `lastIndex` property during replacement
     * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third
     * (`flags`) argument. Use via `XRegExp.replace`.
     *
     * @memberOf String
     * @param {RegExp|String} search Search pattern to be replaced.
     * @param {String|Function} replacement Replacement string or a function invoked to create it.
     * @returns {String} New string with one or all matches replaced.
     */

    fixed.replace = function (search, replacement) {
      var isRegex = XRegExp.isRegExp(search);
      var origLastIndex;
      var captureNames;
      var result;

      if (isRegex) {
        if (search[REGEX_DATA]) {
          captureNames = search[REGEX_DATA].captureNames;
        } // Only needed if `search` is nonglobal

        origLastIndex = search.lastIndex;
      } else {
        search += ""; // Type-convert
      } // Don't use `typeof`; some older browsers return 'function' for regex objects

      if (isType(replacement, "Function")) {
        // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement
        // functions isn't type-converted to a string
        result = nativ.replace.call(String(this), search, function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }

          if (captureNames) {
            var groupsObject;

            if (XRegExp.isInstalled("namespacing")) {
              // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
              groupsObject = Object.create(null);
              args.push(groupsObject);
            } else {
              // Change the `args[0]` string primitive to a `String` object that can store
              // properties. This really does need to use `String` as a constructor
              args[0] = new String(args[0]);
              groupsObject = args[0];
            } // Store named backreferences

            for (var i = 0; i < captureNames.length; ++i) {
              if (captureNames[i]) {
                groupsObject[captureNames[i]] = args[i + 1];
              }
            }
          } // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari
          // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)

          if (isRegex && search.global) {
            search.lastIndex = args[args.length - 2] + args[0].length;
          } // ES6 specs the context for replacement functions as `undefined`

          return replacement.apply(void 0, args);
        });
      } else {
        // Ensure that the last value of `args` will be a string when given nonstring `this`,
        // while still throwing on null or undefined context
        result = nativ.replace.call(
          this == null ? this : String(this),
          search,
          function () {
            for (
              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2] = arguments[_key2];
            }

            return nativ.replace.call(
              String(replacement),
              replacementToken,
              replacer
            );

            function replacer($0, bracketed, angled, dollarToken) {
              bracketed = bracketed || angled; // Named or numbered backreference with curly or angled braces

              if (bracketed) {
                // XRegExp behavior for `${n}` or `$<n>`:
                // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the
                //    entire match. Any number of leading zeros may be used.
                // 2. Backreference to named capture `n`, if it exists and is not an integer
                //    overridden by numbered capture. In practice, this does not overlap with
                //    numbered capture since XRegExp does not allow named capture to use a bare
                //    integer as the name.
                // 3. If the name or number does not refer to an existing capturing group, it's
                //    an error.
                var n = +bracketed; // Type-convert; drop leading zeros

                if (n <= args.length - 3) {
                  return args[n] || "";
                } // Groups with the same name is an error, else would need `lastIndexOf`

                n = captureNames ? captureNames.indexOf(bracketed) : -1;

                if (n < 0) {
                  throw new SyntaxError(
                    "Backreference to undefined group ".concat($0)
                  );
                }

                return args[n + 1] || "";
              } // Else, special variable or numbered backreference without curly braces

              if (dollarToken === "$") {
                // $$
                return "$";
              }

              if (dollarToken === "&" || +dollarToken === 0) {
                // $&, $0 (not followed by 1-9), $00
                return args[0];
              }

              if (dollarToken === "`") {
                // $` (left context)
                return args[args.length - 1].slice(0, args[args.length - 2]);
              }

              if (dollarToken === "'") {
                // $' (right context)
                return args[args.length - 1].slice(
                  args[args.length - 2] + args[0].length
                );
              } // Else, numbered backreference without braces

              dollarToken = +dollarToken; // Type-convert; drop leading zero
              // XRegExp behavior for `$n` and `$nn`:
              // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.
              // - `$1` is an error if no capturing groups.
              // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`
              //   instead.
              // - `$01` is `$1` if at least one capturing group, else it's an error.
              // - `$0` (not followed by 1-9) and `$00` are the entire match.
              // Native behavior, for comparison:
              // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.
              // - `$1` is a literal `$1` if no capturing groups.
              // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.
              // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.
              // - `$0` is a literal `$0`.

              if (!isNaN(dollarToken)) {
                if (dollarToken > args.length - 3) {
                  throw new SyntaxError(
                    "Backreference to undefined group ".concat($0)
                  );
                }

                return args[dollarToken] || "";
              } // `$` followed by an unsupported char is an error, unlike native JS

              throw new SyntaxError("Invalid token ".concat($0));
            }
          }
        );
      }

      if (isRegex) {
        if (search.global) {
          // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
          search.lastIndex = 0;
        } else {
          // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
          search.lastIndex = origLastIndex;
        }
      }

      return result;
    };
    /**
     * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.
     *
     * @memberOf String
     * @param {RegExp|String} separator Regex or string to use for separating the string.
     * @param {Number} [limit] Maximum number of items to include in the result array.
     * @returns {Array} Array of substrings.
     */

    fixed.split = function (separator, limit) {
      if (!XRegExp.isRegExp(separator)) {
        // Browsers handle nonregex split correctly, so use the faster native method
        return nativ.split.apply(this, arguments);
      }

      var str = String(this);
      var output = [];
      var origLastIndex = separator.lastIndex;
      var lastLastIndex = 0;
      var lastLength; // Values for `limit`, per the spec:
      // If undefined: pow(2,32) - 1
      // If 0, Infinity, or NaN: 0
      // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);
      // If negative number: pow(2,32) - floor(abs(limit))
      // If other: Type-convert, then use the above rules
      // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless
      // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+

      limit = (limit === undefined ? -1 : limit) >>> 0;
      XRegExp.forEach(str, separator, function (match) {
        // This condition is not the same as `if (match[0].length)`
        if (match.index + match[0].length > lastLastIndex) {
          output.push(str.slice(lastLastIndex, match.index));

          if (match.length > 1 && match.index < str.length) {
            Array.prototype.push.apply(output, match.slice(1));
          }

          lastLength = match[0].length;
          lastLastIndex = match.index + lastLength;
        }
      });

      if (lastLastIndex === str.length) {
        if (!nativ.test.call(separator, "") || lastLength) {
          output.push("");
        }
      } else {
        output.push(str.slice(lastLastIndex));
      }

      separator.lastIndex = origLastIndex;
      return output.length > limit ? output.slice(0, limit) : output;
    }; // ==--------------------------==
    // Built-in syntax/flag tokens
    // ==--------------------------==

    /*
     * Letter escapes that natively match literal characters: `\a`, `\A`, etc. These should be
     * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser
     * consistency and to reserve their syntax, but lets them be superseded by addons.
     */

    XRegExp.addToken(
      /\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/,
      function (match, scope) {
        // \B is allowed in default scope only
        if (match[1] === "B" && scope === defaultScope) {
          return match[0];
        }

        throw new SyntaxError("Invalid escape ".concat(match[0]));
      },
      {
        scope: "all",
        leadChar: "\\",
      }
    );
    /*
     * Unicode code point escape with curly braces: `\u{N..}`. `N..` is any one or more digit
     * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag
     * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to
     * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior
     * if you follow a `\u{N..}` token that references a code point above U+FFFF with a quantifier, or
     * if you use the same in a character class.
     */

    XRegExp.addToken(
      /\\u{([\dA-Fa-f]+)}/,
      function (match, scope, flags) {
        var code = dec(match[1]);

        if (code > 0x10ffff) {
          throw new SyntaxError("Invalid Unicode code point ".concat(match[0]));
        }

        if (code <= 0xffff) {
          // Converting to \uNNNN avoids needing to escape the literal character and keep it
          // separate from preceding tokens
          return "\\u".concat(pad4(hex(code)));
        } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling

        if (hasNativeU && flags.indexOf("u") !== -1) {
          return match[0];
        }

        throw new SyntaxError(
          "Cannot use Unicode code point above \\u{FFFF} without flag u"
        );
      },
      {
        scope: "all",
        leadChar: "\\",
      }
    );
    /*
     * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.
     * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because
     * character class endings can't be determined.
     */

    XRegExp.addToken(
      /\[(\^?)\]/, // For cross-browser compatibility with ES3, convert [] to \b\B and [^] to [\s\S].
      // (?!) should work like \b\B, but is unreliable in some versions of Firefox

      /* eslint-disable no-confusing-arrow */
      function (match) {
        return match[1] ? "[\\s\\S]" : "\\b\\B";
      },
      /* eslint-enable no-confusing-arrow */
      {
        leadChar: "[",
      }
    );
    /*
     * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in
     * free-spacing mode (flag x).
     */

    XRegExp.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, {
      leadChar: "(",
    });
    /*
     * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.
     */

    XRegExp.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, {
      flag: "x",
    });
    /*
     * Dot, in dotall mode (aka singleline mode, flag s) only.
     */

    XRegExp.addToken(
      /\./,
      function () {
        return "[\\s\\S]";
      },
      {
        flag: "s",
        leadChar: ".",
      }
    );
    /*
     * Named backreference: `\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,
     * and $ only. Also allows numbered backreferences as `\k<n>`.
     */

    XRegExp.addToken(
      /\\k<([\w$]+)>/,
      function (match) {
        // Groups with the same name is an error, else would need `lastIndexOf`
        var index = isNaN(match[1])
          ? this.captureNames.indexOf(match[1]) + 1
          : +match[1];
        var endIndex = match.index + match[0].length;

        if (!index || index > this.captureNames.length) {
          throw new SyntaxError(
            "Backreference to undefined group ".concat(match[0])
          );
        } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.
        // inadvertedly changing `(?<n>)\k<n>1` to `()\11`.

        return "\\"
          .concat(index)
          .concat(
            endIndex === match.input.length || isNaN(match.input[endIndex])
              ? ""
              : "(?:)"
          );
      },
      {
        leadChar: "\\",
      }
    );
    /*
     * Numbered backreference or octal, plus any following digits: `\0`, `\11`, etc. Octals except `\0`
     * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches
     * are returned unaltered. IE < 9 doesn't support backreferences above `\99` in regex syntax.
     */

    XRegExp.addToken(
      /\\(\d+)/,
      function (match, scope) {
        if (
          !(
            scope === defaultScope &&
            /^[1-9]/.test(match[1]) &&
            +match[1] <= this.captureNames.length
          ) &&
          match[1] !== "0"
        ) {
          throw new SyntaxError(
            "Cannot use octal escape or backreference to undefined group ".concat(
              match[0]
            )
          );
        }

        return match[0];
      },
      {
        scope: "all",
        leadChar: "\\",
      }
    );
    /*
     * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the
     * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style
     * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively
     * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to
     * Python-style named capture as octals.
     */

    XRegExp.addToken(
      /\(\?P?<([\w$]+)>/,
      function (match) {
        // Disallow bare integers as names because named backreferences are added to match arrays
        // and therefore numeric properties may lead to incorrect lookups
        if (!isNaN(match[1])) {
          throw new SyntaxError(
            "Cannot use integer as capture name ".concat(match[0])
          );
        }

        if (
          !XRegExp.isInstalled("namespacing") &&
          (match[1] === "length" || match[1] === "__proto__")
        ) {
          throw new SyntaxError(
            "Cannot use reserved word as capture name ".concat(match[0])
          );
        }

        if (this.captureNames.indexOf(match[1]) !== -1) {
          throw new SyntaxError(
            "Cannot use same name for multiple groups ".concat(match[0])
          );
        }

        this.captureNames.push(match[1]);
        this.hasNamedCapture = true;
        return "(";
      },
      {
        leadChar: "(",
      }
    );
    /*
     * Capturing group; match the opening parenthesis only. Required for support of named capturing
     * groups. Also adds explicit capture mode (flag n).
     */

    XRegExp.addToken(
      /\((?!\?)/,
      function (match, scope, flags) {
        if (flags.indexOf("n") !== -1) {
          return "(?:";
        }

        this.captureNames.push(null);
        return "(";
      },
      {
        optionalFlags: "n",
        leadChar: "(",
      }
    );
    var _default = XRegExp;
    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(xregexp);

  var build = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    /*!
     * XRegExp.build 4.2.0
     * <xregexp.com>
     * Steven Levithan (c) 2012-present MIT License
     */
    var _default = function _default(XRegExp) {
      var REGEX_DATA = "xregexp";
      var subParts =
        /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
      var parts = XRegExp.union(
        [/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts],
        "g",
        {
          conjunction: "or",
        }
      );
      /**
       * Strips a leading `^` and trailing unescaped `$`, if both are present.
       *
       * @private
       * @param {String} pattern Pattern to process.
       * @returns {String} Pattern with edge anchors removed.
       */

      function deanchor(pattern) {
        // Allow any number of empty noncapturing groups before/after anchors, because regexes
        // built/generated by XRegExp sometimes include them
        var leadingAnchor = /^(?:\(\?:\))*\^/;
        var trailingAnchor = /\$(?:\(\?:\))*$/;

        if (
          leadingAnchor.test(pattern) &&
          trailingAnchor.test(pattern) && // Ensure that the trailing `$` isn't escaped
          trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ""))
        ) {
          return pattern.replace(leadingAnchor, "").replace(trailingAnchor, "");
        }

        return pattern;
      }
      /**
       * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.
       *
       * @private
       * @param {String|RegExp} value Value to convert.
       * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not
       *   already a regex generated by XRegExp
       * @returns {RegExp} XRegExp object with XRegExp syntax applied.
       */

      function asXRegExp(value, addFlagX) {
        var flags = addFlagX ? "x" : "";
        return XRegExp.isRegExp(value)
          ? value[REGEX_DATA] && value[REGEX_DATA].captureNames // Don't recompile, to preserve capture names
            ? value // Recompile as XRegExp
            : XRegExp(value.source, flags) // Compile string as XRegExp
          : XRegExp(value, flags);
      }

      function interpolate(substitution) {
        return substitution instanceof RegExp
          ? substitution
          : XRegExp.escape(substitution);
      }

      function reduceToSubpatternsObject(
        subpatterns,
        interpolated,
        subpatternIndex
      ) {
        subpatterns["subpattern".concat(subpatternIndex)] = interpolated;
        return subpatterns;
      }

      function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {
        var hasSubpattern = subpatternIndex < rawLiterals.length - 1;
        return (
          raw +
          (hasSubpattern ? "{{subpattern".concat(subpatternIndex, "}}") : "")
        );
      }
      /**
       * Provides tagged template literals that create regexes with XRegExp syntax and flags. The
       * provided pattern is handled as a raw string, so backslashes don't need to be escaped.
       *
       * Interpolation of strings and regexes shares the features of `XRegExp.build`. Interpolated
       * patterns are treated as atomic units when quantified, interpolated strings have their special
       * characters escaped, a leading `^` and trailing unescaped `$` are stripped from interpolated
       * regexes if both are present, and any backreferences within an interpolated regex are
       * rewritten to work within the overall pattern.
       *
       * @memberOf XRegExp
       * @param {String} [flags] Any combination of XRegExp flags.
       * @returns {Function} Handler for template literals that construct regexes with XRegExp syntax.
       * @example
       *
       * const h12 = /1[0-2]|0?[1-9]/;
       * const h24 = /2[0-3]|[01][0-9]/;
       * const hours = XRegExp.tag('x')`${h12} : | ${h24}`;
       * const minutes = /^[0-5][0-9]$/;
       * // Note that explicitly naming the 'minutes' group is required for named backreferences
       * const time = XRegExp.tag('x')`^ ${hours} (?<minutes>${minutes}) $`;
       * time.test('10:59'); // -> true
       * XRegExp.exec('10:59', time).minutes; // -> '59'
       */

      XRegExp.tag = function (flags) {
        return function (literals) {
          for (
            var _len = arguments.length,
              substitutions = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            substitutions[_key - 1] = arguments[_key];
          }

          var subpatterns = substitutions
            .map(interpolate)
            .reduce(reduceToSubpatternsObject, {});
          var pattern = literals.raw.map(embedSubpatternAfter).join("");
          return XRegExp.build(pattern, subpatterns, flags);
        };
      };
      /**
       * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in
       * the outer pattern and provided subpatterns are automatically renumbered to work correctly.
       * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.
       *
       * @memberOf XRegExp
       * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows
       *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within
       *   character classes.
       * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A
       *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.
       * @param {String} [flags] Any combination of XRegExp flags.
       * @returns {RegExp} Regex with interpolated subpatterns.
       * @example
       *
       * const time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {
       *   hours: XRegExp.build('{{h12}} : | {{h24}}', {
       *     h12: /1[0-2]|0?[1-9]/,
       *     h24: /2[0-3]|[01][0-9]/
       *   }, 'x'),
       *   minutes: /^[0-5][0-9]$/
       * });
       * time.test('10:59'); // -> true
       * XRegExp.exec('10:59', time).minutes; // -> '59'
       */

      XRegExp.build = function (pattern, subs, flags) {
        flags = flags || ""; // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how
        // some browsers convert `RegExp('\n')` to a regex that contains the literal characters `\`
        // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.

        var addFlagX = flags.indexOf("x") !== -1;
        var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern); // Add flags within a leading mode modifier to the overall pattern's flags

        if (inlineFlags) {
          flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
        }

        var data = {};

        for (var p in subs) {
          if (subs.hasOwnProperty(p)) {
            // Passing to XRegExp enables extended syntax and ensures independent validity,
            // lest an unescaped `(`, `)`, `[`, or trailing `\` breaks the `(?:)` wrapper. For
            // subpatterns provided as native regexes, it dies on octals and adds the property
            // used to hold extended regex instance data, for simplicity.
            var sub = asXRegExp(subs[p], addFlagX);
            data[p] = {
              // Deanchoring allows embedding independently useful anchored regexes. If you
              // really need to keep your anchors, double them (i.e., `^^...$$`).
              pattern: deanchor(sub.source),
              names: sub[REGEX_DATA].captureNames || [],
            };
          }
        } // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;
        // helps keep this simple. Named captures will be put back.

        var patternAsRegex = asXRegExp(pattern, addFlagX); // 'Caps' is short for 'captures'

        var numCaps = 0;
        var numPriorCaps;
        var numOuterCaps = 0;
        var outerCapsMap = [0];
        var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
        var output = patternAsRegex.source.replace(
          parts,
          function ($0, $1, $2, $3, $4) {
            var subName = $1 || $2;
            var capName;
            var intro;
            var localCapIndex; // Named subpattern

            if (subName) {
              if (!data.hasOwnProperty(subName)) {
                throw new ReferenceError("Undefined property ".concat($0));
              } // Named subpattern was wrapped in a capturing group

              if ($1) {
                capName = outerCapNames[numOuterCaps];
                outerCapsMap[++numOuterCaps] = ++numCaps; // If it's a named group, preserve the name. Otherwise, use the subpattern name
                // as the capture name

                intro = "(?<".concat(capName || subName, ">");
              } else {
                intro = "(?:";
              }

              numPriorCaps = numCaps;
              var rewrittenSubpattern = data[subName].pattern.replace(
                subParts,
                function (match, paren, backref) {
                  // Capturing group
                  if (paren) {
                    capName = data[subName].names[numCaps - numPriorCaps];
                    ++numCaps; // If the current capture has a name, preserve the name

                    if (capName) {
                      return "(?<".concat(capName, ">");
                    } // Backreference
                  } else if (backref) {
                    localCapIndex = +backref - 1; // Rewrite the backreference

                    return data[subName].names[localCapIndex] // Need to preserve the backreference name in case using flag `n`
                      ? "\\k<".concat(data[subName].names[localCapIndex], ">")
                      : "\\".concat(+backref + numPriorCaps);
                  }

                  return match;
                }
              );
              return "".concat(intro).concat(rewrittenSubpattern, ")");
            } // Capturing group

            if ($3) {
              capName = outerCapNames[numOuterCaps];
              outerCapsMap[++numOuterCaps] = ++numCaps; // If the current capture has a name, preserve the name

              if (capName) {
                return "(?<".concat(capName, ">");
              } // Backreference
            } else if ($4) {
              localCapIndex = +$4 - 1; // Rewrite the backreference

              return outerCapNames[localCapIndex] // Need to preserve the backreference name in case using flag `n`
                ? "\\k<".concat(outerCapNames[localCapIndex], ">")
                : "\\".concat(outerCapsMap[+$4]);
            }

            return $0;
          }
        );
        return XRegExp(output, flags);
      };
    };

    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(build);

  var matchrecursive = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    /*!
     * XRegExp.matchRecursive 4.2.0
     * <xregexp.com>
     * Steven Levithan (c) 2009-present MIT License
     */
    var _default = function _default(XRegExp) {
      /**
       * Returns a match detail object composed of the provided values.
       *
       * @private
       */
      function row(name, value, start, end) {
        return {
          name: name,
          value: value,
          start: start,
          end: end,
        };
      }
      /**
       * Returns an array of match strings between outermost left and right delimiters, or an array of
       * objects with detailed match parts and position data. An error is thrown if delimiters are
       * unbalanced within the data.
       *
       * @memberOf XRegExp
       * @param {String} str String to search.
       * @param {String} left Left delimiter as an XRegExp pattern.
       * @param {String} right Right delimiter as an XRegExp pattern.
       * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.
       * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.
       * @returns {Array} Array of matches, or an empty array.
       * @example
       *
       * // Basic usage
       * let str = '(t((e))s)t()(ing)';
       * XRegExp.matchRecursive(str, '\\(', '\\)', 'g');
       * // -> ['t((e))s', '', 'ing']
       *
       * // Extended information mode with valueNames
       * str = 'Here is <div> <div>an</div></div> example';
       * XRegExp.matchRecursive(str, '<div\\s*>', '</div>', 'gi', {
       *   valueNames: ['between', 'left', 'match', 'right']
       * });
       * // -> [
       * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},
       * // {name: 'left',    value: '<div>',          start: 8,  end: 13},
       * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},
       * // {name: 'right',   value: '</div>',         start: 27, end: 33},
       * // {name: 'between', value: ' example',       start: 33, end: 41}
       * // ]
       *
       * // Omitting unneeded parts with null valueNames, and using escapeChar
       * str = '...{1}.\\{{function(x,y){return {y:x}}}';
       * XRegExp.matchRecursive(str, '{', '}', 'g', {
       *   valueNames: ['literal', null, 'value', null],
       *   escapeChar: '\\'
       * });
       * // -> [
       * // {name: 'literal', value: '...',  start: 0, end: 3},
       * // {name: 'value',   value: '1',    start: 4, end: 5},
       * // {name: 'literal', value: '.\\{', start: 6, end: 9},
       * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}
       * // ]
       *
       * // Sticky mode via flag y
       * str = '<1><<<2>>><3>4<5>';
       * XRegExp.matchRecursive(str, '<', '>', 'gy');
       * // -> ['1', '<<2>>', '3']
       */

      XRegExp.matchRecursive = function (str, left, right, flags, options) {
        flags = flags || "";
        options = options || {};
        var global = flags.indexOf("g") !== -1;
        var sticky = flags.indexOf("y") !== -1; // Flag `y` is controlled internally

        var basicFlags = flags.replace(/y/g, "");
        var _options = options,
          escapeChar = _options.escapeChar;
        var vN = options.valueNames;
        var output = [];
        var openTokens = 0;
        var delimStart = 0;
        var delimEnd = 0;
        var lastOuterEnd = 0;
        var outerStart;
        var innerStart;
        var leftMatch;
        var rightMatch;
        var esc;
        left = XRegExp(left, basicFlags);
        right = XRegExp(right, basicFlags);

        if (escapeChar) {
          if (escapeChar.length > 1) {
            throw new Error("Cannot use more than one escape character");
          }

          escapeChar = XRegExp.escape(escapeChar); // Example of concatenated `esc` regex:
          // `escapeChar`: '%'
          // `left`: '<'
          // `right`: '>'
          // Regex is: /(?:%[\S\s]|(?:(?!<|>)[^%])+)+/

          esc = new RegExp(
            "(?:"
              .concat(escapeChar, "[\\S\\s]|(?:(?!")
              .concat(
                // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.
                // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax
                // transformation resulting from those flags was already applied to `left` and
                // `right` when they were passed through the XRegExp constructor above.
                XRegExp.union([left, right], "", {
                  conjunction: "or",
                }).source,
                ")[^"
              )
              .concat(escapeChar, "])+)+"), // Flags `gy` not needed here
            flags.replace(/[^imu]+/g, "")
          );
        }

        while (true) {
          // If using an escape character, advance to the delimiter's next starting position,
          // skipping any escaped characters in between
          if (escapeChar) {
            delimEnd += (XRegExp.exec(str, esc, delimEnd, "sticky") || [""])[0]
              .length;
          }

          leftMatch = XRegExp.exec(str, left, delimEnd);
          rightMatch = XRegExp.exec(str, right, delimEnd); // Keep the leftmost match only

          if (leftMatch && rightMatch) {
            if (leftMatch.index <= rightMatch.index) {
              rightMatch = null;
            } else {
              leftMatch = null;
            }
          } // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):
          // LM | RM | OT | Result
          // 1  | 0  | 1  | loop
          // 1  | 0  | 0  | loop
          // 0  | 1  | 1  | loop
          // 0  | 1  | 0  | throw
          // 0  | 0  | 1  | throw
          // 0  | 0  | 0  | break
          // The paths above don't include the sticky mode special case. The loop ends after the
          // first completed match if not `global`.

          if (leftMatch || rightMatch) {
            delimStart = (leftMatch || rightMatch).index;
            delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
          } else if (!openTokens) {
            break;
          }

          if (sticky && !openTokens && delimStart > lastOuterEnd) {
            break;
          }

          if (leftMatch) {
            if (!openTokens) {
              outerStart = delimStart;
              innerStart = delimEnd;
            }

            ++openTokens;
          } else if (rightMatch && openTokens) {
            if (!--openTokens) {
              if (vN) {
                if (vN[0] && outerStart > lastOuterEnd) {
                  output.push(
                    row(
                      vN[0],
                      str.slice(lastOuterEnd, outerStart),
                      lastOuterEnd,
                      outerStart
                    )
                  );
                }

                if (vN[1]) {
                  output.push(
                    row(
                      vN[1],
                      str.slice(outerStart, innerStart),
                      outerStart,
                      innerStart
                    )
                  );
                }

                if (vN[2]) {
                  output.push(
                    row(
                      vN[2],
                      str.slice(innerStart, delimStart),
                      innerStart,
                      delimStart
                    )
                  );
                }

                if (vN[3]) {
                  output.push(
                    row(
                      vN[3],
                      str.slice(delimStart, delimEnd),
                      delimStart,
                      delimEnd
                    )
                  );
                }
              } else {
                output.push(str.slice(innerStart, delimStart));
              }

              lastOuterEnd = delimEnd;

              if (!global) {
                break;
              }
            }
          } else {
            throw new Error("Unbalanced delimiter found in string");
          } // If the delimiter matched an empty string, avoid an infinite loop

          if (delimStart === delimEnd) {
            ++delimEnd;
          }
        }

        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
          output.push(
            row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length)
          );
        }

        return output;
      };
    };

    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(matchrecursive);

  var unicodeBase = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    /*!
     * XRegExp Unicode Base 4.2.0
     * <xregexp.com>
     * Steven Levithan (c) 2008-present MIT License
     */
    var _default = function _default(XRegExp) {
      /**
       * Adds base support for Unicode matching:
       * - Adds syntax `\p{..}` for matching Unicode tokens. Tokens can be inverted using `\P{..}` or
       *   `\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the
       *   braces for token names that are a single letter (e.g. `\pL` or `PL`).
       * - Adds flag A (astral), which enables 21-bit Unicode support.
       * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.
       *
       * Unicode Base relies on externally provided Unicode character data. Official addons are
       * available to provide data for Unicode categories, scripts, blocks, and properties.
       *
       * @requires XRegExp
       */
      // ==--------------------------==
      // Private stuff
      // ==--------------------------==
      // Storage for Unicode data
      var unicode = {}; // Reuse utils

      var dec = XRegExp._dec;
      var hex = XRegExp._hex;
      var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed

      function normalize(name) {
        return name.replace(/[- _]+/g, "").toLowerCase();
      } // Gets the decimal code of a literal code unit, \xHH, \uHHHH, or a backslash-escaped literal

      function charCode(chr) {
        var esc = /^\\[xu](.+)/.exec(chr);
        return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === "\\" ? 1 : 0);
      } // Inverts a list of ordered BMP characters and ranges

      function invertBmp(range) {
        var output = "";
        var lastEnd = -1;
        XRegExp.forEach(
          range,
          /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/,
          function (m) {
            var start = charCode(m[1]);

            if (start > lastEnd + 1) {
              output += "\\u".concat(pad4(hex(lastEnd + 1)));

              if (start > lastEnd + 2) {
                output += "-\\u".concat(pad4(hex(start - 1)));
              }
            }

            lastEnd = charCode(m[2] || m[1]);
          }
        );

        if (lastEnd < 0xffff) {
          output += "\\u".concat(pad4(hex(lastEnd + 1)));

          if (lastEnd < 0xfffe) {
            output += "-\\uFFFF";
          }
        }

        return output;
      } // Generates an inverted BMP range on first use

      function cacheInvertedBmp(slug) {
        var prop = "b!";
        return (
          unicode[slug][prop] ||
          (unicode[slug][prop] = invertBmp(unicode[slug].bmp))
        );
      } // Combines and optionally negates BMP and astral data

      function buildAstral(slug, isNegated) {
        var item = unicode[slug];
        var combined = "";

        if (item.bmp && !item.isBmpLast) {
          combined = "[".concat(item.bmp, "]").concat(item.astral ? "|" : "");
        }

        if (item.astral) {
          combined += item.astral;
        }

        if (item.isBmpLast && item.bmp) {
          combined += ""
            .concat(item.astral ? "|" : "", "[")
            .concat(item.bmp, "]");
        } // Astral Unicode tokens always match a code point, never a code unit

        return isNegated
          ? "(?:(?!".concat(
              combined,
              ")(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))"
            )
          : "(?:".concat(combined, ")");
      } // Builds a complete astral pattern on first use

      function cacheAstral(slug, isNegated) {
        var prop = isNegated ? "a!" : "a=";
        return (
          unicode[slug][prop] ||
          (unicode[slug][prop] = buildAstral(slug, isNegated))
        );
      } // ==--------------------------==
      // Core functionality
      // ==--------------------------==

      /*
       * Add astral mode (flag A) and Unicode token syntax: `\p{..}`, `\P{..}`, `\p{^..}`, `\pC`.
       */

      XRegExp.addToken(
        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\p{^}`
        /\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/,
        function (match, scope, flags) {
          var ERR_DOUBLE_NEG = "Invalid double negation ";
          var ERR_UNKNOWN_NAME = "Unknown Unicode token ";
          var ERR_UNKNOWN_REF = "Unicode token missing data ";
          var ERR_ASTRAL_ONLY = "Astral mode required for Unicode token ";
          var ERR_ASTRAL_IN_CLASS =
            "Astral mode does not support Unicode tokens within character classes"; // Negated via \P{..} or \p{^..}

          var isNegated = match[1] === "P" || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A

          var isAstralMode = flags.indexOf("A") !== -1; // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\p{}`

          var slug = normalize(match[4] || match[3]); // Token data object

          var item = unicode[slug];

          if (match[1] === "P" && match[2]) {
            throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
          }

          if (!unicode.hasOwnProperty(slug)) {
            throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
          } // Switch to the negated form of the referenced Unicode token

          if (item.inverseOf) {
            slug = normalize(item.inverseOf);

            if (!unicode.hasOwnProperty(slug)) {
              throw new ReferenceError(
                ""
                  .concat(ERR_UNKNOWN_REF + match[0], " -> ")
                  .concat(item.inverseOf)
              );
            }

            item = unicode[slug];
            isNegated = !isNegated;
          }

          if (!(item.bmp || isAstralMode)) {
            throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
          }

          if (isAstralMode) {
            if (scope === "class") {
              throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
            }

            return cacheAstral(slug, isNegated);
          }

          return scope === "class"
            ? isNegated
              ? cacheInvertedBmp(slug)
              : item.bmp
            : "".concat((isNegated ? "[^" : "[") + item.bmp, "]");
        },
        {
          scope: "all",
          optionalFlags: "A",
          leadChar: "\\",
        }
      );
      /**
       * Adds to the list of Unicode tokens that XRegExp regexes can match via `\p` or `\P`.
       *
       * @memberOf XRegExp
       * @param {Array} data Objects with named character ranges. Each object may have properties
       *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are
       *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If
       *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,
       *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are
       *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and
       *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan
       *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and
       *   `astral` data should be a combination of literal characters and `\xHH` or `\uHHHH` escape
       *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be
       *   escaped, apart from range-creating hyphens. The `astral` data can additionally use
       *   character classes and alternation, and should use surrogate pairs to represent astral code
       *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is
       *   defined as the exact inverse of another token.
       * @example
       *
       * // Basic use
       * XRegExp.addUnicodeData([{
       *   name: 'XDigit',
       *   alias: 'Hexadecimal',
       *   bmp: '0-9A-Fa-f'
       * }]);
       * XRegExp('\\p{XDigit}:\\p{Hexadecimal}+').test('0:3D'); // -> true
       */

      XRegExp.addUnicodeData = function (data) {
        var ERR_NO_NAME = "Unicode token requires name";
        var ERR_NO_DATA = "Unicode token has no character data ";
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (
            var _iterator = data[Symbol.iterator](), _step;
            !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
            _iteratorNormalCompletion = true
          ) {
            var item = _step.value;

            if (!item.name) {
              throw new Error(ERR_NO_NAME);
            }

            if (!(item.inverseOf || item.bmp || item.astral)) {
              throw new Error(ERR_NO_DATA + item.name);
            }

            unicode[normalize(item.name)] = item;

            if (item.alias) {
              unicode[normalize(item.alias)] = item;
            }
          } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and
          // flags might now produce different results
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        XRegExp.cache.flush("patterns");
      };
      /**
       * @ignore
       *
       * Return a reference to the internal Unicode definition structure for the given Unicode
       * Property if the given name is a legal Unicode Property for use in XRegExp `\p` or `\P` regex
       * constructs.
       *
       * @memberOf XRegExp
       * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),
       *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode
       *   Properties and Property Aliases.
       * @returns {Object} Reference to definition structure when the name matches a Unicode Property.
       *
       * @note
       * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.
       *
       * @note
       * This method is *not* part of the officially documented API and may change or be removed in
       * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode
       * structures set up by XRegExp.
       */

      XRegExp._getUnicodeProperty = function (name) {
        var slug = normalize(name);
        return unicode[slug];
      };
    };

    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(unicodeBase);

  var blocks = [
    {
      name: "InAdlam",
      astral: "\uD83A[\uDD00-\uDD5F]",
    },
    {
      name: "InAegean_Numbers",
      astral: "\uD800[\uDD00-\uDD3F]",
    },
    {
      name: "InAhom",
      astral: "\uD805[\uDF00-\uDF3F]",
    },
    {
      name: "InAlchemical_Symbols",
      astral: "\uD83D[\uDF00-\uDF7F]",
    },
    {
      name: "InAlphabetic_Presentation_Forms",
      bmp: "\uFB00-\uFB4F",
    },
    {
      name: "InAnatolian_Hieroglyphs",
      astral: "\uD811[\uDC00-\uDE7F]",
    },
    {
      name: "InAncient_Greek_Musical_Notation",
      astral: "\uD834[\uDE00-\uDE4F]",
    },
    {
      name: "InAncient_Greek_Numbers",
      astral: "\uD800[\uDD40-\uDD8F]",
    },
    {
      name: "InAncient_Symbols",
      astral: "\uD800[\uDD90-\uDDCF]",
    },
    {
      name: "InArabic",
      bmp: "\u0600-\u06FF",
    },
    {
      name: "InArabic_Extended_A",
      bmp: "\u08A0-\u08FF",
    },
    {
      name: "InArabic_Mathematical_Alphabetic_Symbols",
      astral: "\uD83B[\uDE00-\uDEFF]",
    },
    {
      name: "InArabic_Presentation_Forms_A",
      bmp: "\uFB50-\uFDFF",
    },
    {
      name: "InArabic_Presentation_Forms_B",
      bmp: "\uFE70-\uFEFF",
    },
    {
      name: "InArabic_Supplement",
      bmp: "\u0750-\u077F",
    },
    {
      name: "InArmenian",
      bmp: "\u0530-\u058F",
    },
    {
      name: "InArrows",
      bmp: "\u2190-\u21FF",
    },
    {
      name: "InAvestan",
      astral: "\uD802[\uDF00-\uDF3F]",
    },
    {
      name: "InBalinese",
      bmp: "\u1B00-\u1B7F",
    },
    {
      name: "InBamum",
      bmp: "\uA6A0-\uA6FF",
    },
    {
      name: "InBamum_Supplement",
      astral: "\uD81A[\uDC00-\uDE3F]",
    },
    {
      name: "InBasic_Latin",
      bmp: "\0-\x7F",
    },
    {
      name: "InBassa_Vah",
      astral: "\uD81A[\uDED0-\uDEFF]",
    },
    {
      name: "InBatak",
      bmp: "\u1BC0-\u1BFF",
    },
    {
      name: "InBengali",
      bmp: "\u0980-\u09FF",
    },
    {
      name: "InBhaiksuki",
      astral: "\uD807[\uDC00-\uDC6F]",
    },
    {
      name: "InBlock_Elements",
      bmp: "\u2580-\u259F",
    },
    {
      name: "InBopomofo",
      bmp: "\u3100-\u312F",
    },
    {
      name: "InBopomofo_Extended",
      bmp: "\u31A0-\u31BF",
    },
    {
      name: "InBox_Drawing",
      bmp: "\u2500-\u257F",
    },
    {
      name: "InBrahmi",
      astral: "\uD804[\uDC00-\uDC7F]",
    },
    {
      name: "InBraille_Patterns",
      bmp: "\u2800-\u28FF",
    },
    {
      name: "InBuginese",
      bmp: "\u1A00-\u1A1F",
    },
    {
      name: "InBuhid",
      bmp: "\u1740-\u175F",
    },
    {
      name: "InByzantine_Musical_Symbols",
      astral: "\uD834[\uDC00-\uDCFF]",
    },
    {
      name: "InCJK_Compatibility",
      bmp: "\u3300-\u33FF",
    },
    {
      name: "InCJK_Compatibility_Forms",
      bmp: "\uFE30-\uFE4F",
    },
    {
      name: "InCJK_Compatibility_Ideographs",
      bmp: "\uF900-\uFAFF",
    },
    {
      name: "InCJK_Compatibility_Ideographs_Supplement",
      astral: "\uD87E[\uDC00-\uDE1F]",
    },
    {
      name: "InCJK_Radicals_Supplement",
      bmp: "\u2E80-\u2EFF",
    },
    {
      name: "InCJK_Strokes",
      bmp: "\u31C0-\u31EF",
    },
    {
      name: "InCJK_Symbols_And_Punctuation",
      bmp: "\u3000-\u303F",
    },
    {
      name: "InCJK_Unified_Ideographs",
      bmp: "\u4E00-\u9FFF",
    },
    {
      name: "InCJK_Unified_Ideographs_Extension_A",
      bmp: "\u3400-\u4DBF",
    },
    {
      name: "InCJK_Unified_Ideographs_Extension_B",
      astral: "[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]",
    },
    {
      name: "InCJK_Unified_Ideographs_Extension_C",
      astral:
        "\uD869[\uDF00-\uDFFF]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF3F]",
    },
    {
      name: "InCJK_Unified_Ideographs_Extension_D",
      astral: "\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]",
    },
    {
      name: "InCJK_Unified_Ideographs_Extension_E",
      astral:
        "\uD86E[\uDC20-\uDFFF]|[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]",
    },
    {
      name: "InCJK_Unified_Ideographs_Extension_F",
      astral:
        "\uD873[\uDEB0-\uDFFF]|[\uD874-\uD879][\uDC00-\uDFFF]|\uD87A[\uDC00-\uDFEF]",
    },
    {
      name: "InCarian",
      astral: "\uD800[\uDEA0-\uDEDF]",
    },
    {
      name: "InCaucasian_Albanian",
      astral: "\uD801[\uDD30-\uDD6F]",
    },
    {
      name: "InChakma",
      astral: "\uD804[\uDD00-\uDD4F]",
    },
    {
      name: "InCham",
      bmp: "\uAA00-\uAA5F",
    },
    {
      name: "InCherokee",
      bmp: "\u13A0-\u13FF",
    },
    {
      name: "InCherokee_Supplement",
      bmp: "\uAB70-\uABBF",
    },
    {
      name: "InChess_Symbols",
      astral: "\uD83E[\uDE00-\uDE6F]",
    },
    {
      name: "InCombining_Diacritical_Marks",
      bmp: "\u0300-\u036F",
    },
    {
      name: "InCombining_Diacritical_Marks_Extended",
      bmp: "\u1AB0-\u1AFF",
    },
    {
      name: "InCombining_Diacritical_Marks_For_Symbols",
      bmp: "\u20D0-\u20FF",
    },
    {
      name: "InCombining_Diacritical_Marks_Supplement",
      bmp: "\u1DC0-\u1DFF",
    },
    {
      name: "InCombining_Half_Marks",
      bmp: "\uFE20-\uFE2F",
    },
    {
      name: "InCommon_Indic_Number_Forms",
      bmp: "\uA830-\uA83F",
    },
    {
      name: "InControl_Pictures",
      bmp: "\u2400-\u243F",
    },
    {
      name: "InCoptic",
      bmp: "\u2C80-\u2CFF",
    },
    {
      name: "InCoptic_Epact_Numbers",
      astral: "\uD800[\uDEE0-\uDEFF]",
    },
    {
      name: "InCounting_Rod_Numerals",
      astral: "\uD834[\uDF60-\uDF7F]",
    },
    {
      name: "InCuneiform",
      astral: "\uD808[\uDC00-\uDFFF]",
    },
    {
      name: "InCuneiform_Numbers_And_Punctuation",
      astral: "\uD809[\uDC00-\uDC7F]",
    },
    {
      name: "InCurrency_Symbols",
      bmp: "\u20A0-\u20CF",
    },
    {
      name: "InCypriot_Syllabary",
      astral: "\uD802[\uDC00-\uDC3F]",
    },
    {
      name: "InCyrillic",
      bmp: "\u0400-\u04FF",
    },
    {
      name: "InCyrillic_Extended_A",
      bmp: "\u2DE0-\u2DFF",
    },
    {
      name: "InCyrillic_Extended_B",
      bmp: "\uA640-\uA69F",
    },
    {
      name: "InCyrillic_Extended_C",
      bmp: "\u1C80-\u1C8F",
    },
    {
      name: "InCyrillic_Supplement",
      bmp: "\u0500-\u052F",
    },
    {
      name: "InDeseret",
      astral: "\uD801[\uDC00-\uDC4F]",
    },
    {
      name: "InDevanagari",
      bmp: "\u0900-\u097F",
    },
    {
      name: "InDevanagari_Extended",
      bmp: "\uA8E0-\uA8FF",
    },
    {
      name: "InDingbats",
      bmp: "\u2700-\u27BF",
    },
    {
      name: "InDogra",
      astral: "\uD806[\uDC00-\uDC4F]",
    },
    {
      name: "InDomino_Tiles",
      astral: "\uD83C[\uDC30-\uDC9F]",
    },
    {
      name: "InDuployan",
      astral: "\uD82F[\uDC00-\uDC9F]",
    },
    {
      name: "InEarly_Dynastic_Cuneiform",
      astral: "\uD809[\uDC80-\uDD4F]",
    },
    {
      name: "InEgyptian_Hieroglyphs",
      astral: "\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]",
    },
    {
      name: "InElbasan",
      astral: "\uD801[\uDD00-\uDD2F]",
    },
    {
      name: "InEmoticons",
      astral: "\uD83D[\uDE00-\uDE4F]",
    },
    {
      name: "InEnclosed_Alphanumeric_Supplement",
      astral: "\uD83C[\uDD00-\uDDFF]",
    },
    {
      name: "InEnclosed_Alphanumerics",
      bmp: "\u2460-\u24FF",
    },
    {
      name: "InEnclosed_CJK_Letters_And_Months",
      bmp: "\u3200-\u32FF",
    },
    {
      name: "InEnclosed_Ideographic_Supplement",
      astral: "\uD83C[\uDE00-\uDEFF]",
    },
    {
      name: "InEthiopic",
      bmp: "\u1200-\u137F",
    },
    {
      name: "InEthiopic_Extended",
      bmp: "\u2D80-\u2DDF",
    },
    {
      name: "InEthiopic_Extended_A",
      bmp: "\uAB00-\uAB2F",
    },
    {
      name: "InEthiopic_Supplement",
      bmp: "\u1380-\u139F",
    },
    {
      name: "InGeneral_Punctuation",
      bmp: "\u2000-\u206F",
    },
    {
      name: "InGeometric_Shapes",
      bmp: "\u25A0-\u25FF",
    },
    {
      name: "InGeometric_Shapes_Extended",
      astral: "\uD83D[\uDF80-\uDFFF]",
    },
    {
      name: "InGeorgian",
      bmp: "\u10A0-\u10FF",
    },
    {
      name: "InGeorgian_Extended",
      bmp: "\u1C90-\u1CBF",
    },
    {
      name: "InGeorgian_Supplement",
      bmp: "\u2D00-\u2D2F",
    },
    {
      name: "InGlagolitic",
      bmp: "\u2C00-\u2C5F",
    },
    {
      name: "InGlagolitic_Supplement",
      astral: "\uD838[\uDC00-\uDC2F]",
    },
    {
      name: "InGothic",
      astral: "\uD800[\uDF30-\uDF4F]",
    },
    {
      name: "InGrantha",
      astral: "\uD804[\uDF00-\uDF7F]",
    },
    {
      name: "InGreek_And_Coptic",
      bmp: "\u0370-\u03FF",
    },
    {
      name: "InGreek_Extended",
      bmp: "\u1F00-\u1FFF",
    },
    {
      name: "InGujarati",
      bmp: "\u0A80-\u0AFF",
    },
    {
      name: "InGunjala_Gondi",
      astral: "\uD807[\uDD60-\uDDAF]",
    },
    {
      name: "InGurmukhi",
      bmp: "\u0A00-\u0A7F",
    },
    {
      name: "InHalfwidth_And_Fullwidth_Forms",
      bmp: "\uFF00-\uFFEF",
    },
    {
      name: "InHangul_Compatibility_Jamo",
      bmp: "\u3130-\u318F",
    },
    {
      name: "InHangul_Jamo",
      bmp: "\u1100-\u11FF",
    },
    {
      name: "InHangul_Jamo_Extended_A",
      bmp: "\uA960-\uA97F",
    },
    {
      name: "InHangul_Jamo_Extended_B",
      bmp: "\uD7B0-\uD7FF",
    },
    {
      name: "InHangul_Syllables",
      bmp: "\uAC00-\uD7AF",
    },
    {
      name: "InHanifi_Rohingya",
      astral: "\uD803[\uDD00-\uDD3F]",
    },
    {
      name: "InHanunoo",
      bmp: "\u1720-\u173F",
    },
    {
      name: "InHatran",
      astral: "\uD802[\uDCE0-\uDCFF]",
    },
    {
      name: "InHebrew",
      bmp: "\u0590-\u05FF",
    },
    {
      name: "InHigh_Private_Use_Surrogates",
      bmp: "\uDB80-\uDBFF",
    },
    {
      name: "InHigh_Surrogates",
      bmp: "\uD800-\uDB7F",
    },
    {
      name: "InHiragana",
      bmp: "\u3040-\u309F",
    },
    {
      name: "InIPA_Extensions",
      bmp: "\u0250-\u02AF",
    },
    {
      name: "InIdeographic_Description_Characters",
      bmp: "\u2FF0-\u2FFF",
    },
    {
      name: "InIdeographic_Symbols_And_Punctuation",
      astral: "\uD81B[\uDFE0-\uDFFF]",
    },
    {
      name: "InImperial_Aramaic",
      astral: "\uD802[\uDC40-\uDC5F]",
    },
    {
      name: "InIndic_Siyaq_Numbers",
      astral: "\uD83B[\uDC70-\uDCBF]",
    },
    {
      name: "InInscriptional_Pahlavi",
      astral: "\uD802[\uDF60-\uDF7F]",
    },
    {
      name: "InInscriptional_Parthian",
      astral: "\uD802[\uDF40-\uDF5F]",
    },
    {
      name: "InJavanese",
      bmp: "\uA980-\uA9DF",
    },
    {
      name: "InKaithi",
      astral: "\uD804[\uDC80-\uDCCF]",
    },
    {
      name: "InKana_Extended_A",
      astral: "\uD82C[\uDD00-\uDD2F]",
    },
    {
      name: "InKana_Supplement",
      astral: "\uD82C[\uDC00-\uDCFF]",
    },
    {
      name: "InKanbun",
      bmp: "\u3190-\u319F",
    },
    {
      name: "InKangxi_Radicals",
      bmp: "\u2F00-\u2FDF",
    },
    {
      name: "InKannada",
      bmp: "\u0C80-\u0CFF",
    },
    {
      name: "InKatakana",
      bmp: "\u30A0-\u30FF",
    },
    {
      name: "InKatakana_Phonetic_Extensions",
      bmp: "\u31F0-\u31FF",
    },
    {
      name: "InKayah_Li",
      bmp: "\uA900-\uA92F",
    },
    {
      name: "InKharoshthi",
      astral: "\uD802[\uDE00-\uDE5F]",
    },
    {
      name: "InKhmer",
      bmp: "\u1780-\u17FF",
    },
    {
      name: "InKhmer_Symbols",
      bmp: "\u19E0-\u19FF",
    },
    {
      name: "InKhojki",
      astral: "\uD804[\uDE00-\uDE4F]",
    },
    {
      name: "InKhudawadi",
      astral: "\uD804[\uDEB0-\uDEFF]",
    },
    {
      name: "InLao",
      bmp: "\u0E80-\u0EFF",
    },
    {
      name: "InLatin_1_Supplement",
      bmp: "\x80-\xFF",
    },
    {
      name: "InLatin_Extended_A",
      bmp: "\u0100-\u017F",
    },
    {
      name: "InLatin_Extended_Additional",
      bmp: "\u1E00-\u1EFF",
    },
    {
      name: "InLatin_Extended_B",
      bmp: "\u0180-\u024F",
    },
    {
      name: "InLatin_Extended_C",
      bmp: "\u2C60-\u2C7F",
    },
    {
      name: "InLatin_Extended_D",
      bmp: "\uA720-\uA7FF",
    },
    {
      name: "InLatin_Extended_E",
      bmp: "\uAB30-\uAB6F",
    },
    {
      name: "InLepcha",
      bmp: "\u1C00-\u1C4F",
    },
    {
      name: "InLetterlike_Symbols",
      bmp: "\u2100-\u214F",
    },
    {
      name: "InLimbu",
      bmp: "\u1900-\u194F",
    },
    {
      name: "InLinear_A",
      astral: "\uD801[\uDE00-\uDF7F]",
    },
    {
      name: "InLinear_B_Ideograms",
      astral: "\uD800[\uDC80-\uDCFF]",
    },
    {
      name: "InLinear_B_Syllabary",
      astral: "\uD800[\uDC00-\uDC7F]",
    },
    {
      name: "InLisu",
      bmp: "\uA4D0-\uA4FF",
    },
    {
      name: "InLow_Surrogates",
      bmp: "\uDC00-\uDFFF",
    },
    {
      name: "InLycian",
      astral: "\uD800[\uDE80-\uDE9F]",
    },
    {
      name: "InLydian",
      astral: "\uD802[\uDD20-\uDD3F]",
    },
    {
      name: "InMahajani",
      astral: "\uD804[\uDD50-\uDD7F]",
    },
    {
      name: "InMahjong_Tiles",
      astral: "\uD83C[\uDC00-\uDC2F]",
    },
    {
      name: "InMakasar",
      astral: "\uD807[\uDEE0-\uDEFF]",
    },
    {
      name: "InMalayalam",
      bmp: "\u0D00-\u0D7F",
    },
    {
      name: "InMandaic",
      bmp: "\u0840-\u085F",
    },
    {
      name: "InManichaean",
      astral: "\uD802[\uDEC0-\uDEFF]",
    },
    {
      name: "InMarchen",
      astral: "\uD807[\uDC70-\uDCBF]",
    },
    {
      name: "InMasaram_Gondi",
      astral: "\uD807[\uDD00-\uDD5F]",
    },
    {
      name: "InMathematical_Alphanumeric_Symbols",
      astral: "\uD835[\uDC00-\uDFFF]",
    },
    {
      name: "InMathematical_Operators",
      bmp: "\u2200-\u22FF",
    },
    {
      name: "InMayan_Numerals",
      astral: "\uD834[\uDEE0-\uDEFF]",
    },
    {
      name: "InMedefaidrin",
      astral: "\uD81B[\uDE40-\uDE9F]",
    },
    {
      name: "InMeetei_Mayek",
      bmp: "\uABC0-\uABFF",
    },
    {
      name: "InMeetei_Mayek_Extensions",
      bmp: "\uAAE0-\uAAFF",
    },
    {
      name: "InMende_Kikakui",
      astral: "\uD83A[\uDC00-\uDCDF]",
    },
    {
      name: "InMeroitic_Cursive",
      astral: "\uD802[\uDDA0-\uDDFF]",
    },
    {
      name: "InMeroitic_Hieroglyphs",
      astral: "\uD802[\uDD80-\uDD9F]",
    },
    {
      name: "InMiao",
      astral: "\uD81B[\uDF00-\uDF9F]",
    },
    {
      name: "InMiscellaneous_Mathematical_Symbols_A",
      bmp: "\u27C0-\u27EF",
    },
    {
      name: "InMiscellaneous_Mathematical_Symbols_B",
      bmp: "\u2980-\u29FF",
    },
    {
      name: "InMiscellaneous_Symbols",
      bmp: "\u2600-\u26FF",
    },
    {
      name: "InMiscellaneous_Symbols_And_Arrows",
      bmp: "\u2B00-\u2BFF",
    },
    {
      name: "InMiscellaneous_Symbols_And_Pictographs",
      astral: "\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF]",
    },
    {
      name: "InMiscellaneous_Technical",
      bmp: "\u2300-\u23FF",
    },
    {
      name: "InModi",
      astral: "\uD805[\uDE00-\uDE5F]",
    },
    {
      name: "InModifier_Tone_Letters",
      bmp: "\uA700-\uA71F",
    },
    {
      name: "InMongolian",
      bmp: "\u1800-\u18AF",
    },
    {
      name: "InMongolian_Supplement",
      astral: "\uD805[\uDE60-\uDE7F]",
    },
    {
      name: "InMro",
      astral: "\uD81A[\uDE40-\uDE6F]",
    },
    {
      name: "InMultani",
      astral: "\uD804[\uDE80-\uDEAF]",
    },
    {
      name: "InMusical_Symbols",
      astral: "\uD834[\uDD00-\uDDFF]",
    },
    {
      name: "InMyanmar",
      bmp: "\u1000-\u109F",
    },
    {
      name: "InMyanmar_Extended_A",
      bmp: "\uAA60-\uAA7F",
    },
    {
      name: "InMyanmar_Extended_B",
      bmp: "\uA9E0-\uA9FF",
    },
    {
      name: "InNKo",
      bmp: "\u07C0-\u07FF",
    },
    {
      name: "InNabataean",
      astral: "\uD802[\uDC80-\uDCAF]",
    },
    {
      name: "InNew_Tai_Lue",
      bmp: "\u1980-\u19DF",
    },
    {
      name: "InNewa",
      astral: "\uD805[\uDC00-\uDC7F]",
    },
    {
      name: "InNumber_Forms",
      bmp: "\u2150-\u218F",
    },
    {
      name: "InNushu",
      astral: "\uD82C[\uDD70-\uDEFF]",
    },
    {
      name: "InOgham",
      bmp: "\u1680-\u169F",
    },
    {
      name: "InOl_Chiki",
      bmp: "\u1C50-\u1C7F",
    },
    {
      name: "InOld_Hungarian",
      astral: "\uD803[\uDC80-\uDCFF]",
    },
    {
      name: "InOld_Italic",
      astral: "\uD800[\uDF00-\uDF2F]",
    },
    {
      name: "InOld_North_Arabian",
      astral: "\uD802[\uDE80-\uDE9F]",
    },
    {
      name: "InOld_Permic",
      astral: "\uD800[\uDF50-\uDF7F]",
    },
    {
      name: "InOld_Persian",
      astral: "\uD800[\uDFA0-\uDFDF]",
    },
    {
      name: "InOld_Sogdian",
      astral: "\uD803[\uDF00-\uDF2F]",
    },
    {
      name: "InOld_South_Arabian",
      astral: "\uD802[\uDE60-\uDE7F]",
    },
    {
      name: "InOld_Turkic",
      astral: "\uD803[\uDC00-\uDC4F]",
    },
    {
      name: "InOptical_Character_Recognition",
      bmp: "\u2440-\u245F",
    },
    {
      name: "InOriya",
      bmp: "\u0B00-\u0B7F",
    },
    {
      name: "InOrnamental_Dingbats",
      astral: "\uD83D[\uDE50-\uDE7F]",
    },
    {
      name: "InOsage",
      astral: "\uD801[\uDCB0-\uDCFF]",
    },
    {
      name: "InOsmanya",
      astral: "\uD801[\uDC80-\uDCAF]",
    },
    {
      name: "InPahawh_Hmong",
      astral: "\uD81A[\uDF00-\uDF8F]",
    },
    {
      name: "InPalmyrene",
      astral: "\uD802[\uDC60-\uDC7F]",
    },
    {
      name: "InPau_Cin_Hau",
      astral: "\uD806[\uDEC0-\uDEFF]",
    },
    {
      name: "InPhags_Pa",
      bmp: "\uA840-\uA87F",
    },
    {
      name: "InPhaistos_Disc",
      astral: "\uD800[\uDDD0-\uDDFF]",
    },
    {
      name: "InPhoenician",
      astral: "\uD802[\uDD00-\uDD1F]",
    },
    {
      name: "InPhonetic_Extensions",
      bmp: "\u1D00-\u1D7F",
    },
    {
      name: "InPhonetic_Extensions_Supplement",
      bmp: "\u1D80-\u1DBF",
    },
    {
      name: "InPlaying_Cards",
      astral: "\uD83C[\uDCA0-\uDCFF]",
    },
    {
      name: "InPrivate_Use_Area",
      bmp: "\uE000-\uF8FF",
    },
    {
      name: "InPsalter_Pahlavi",
      astral: "\uD802[\uDF80-\uDFAF]",
    },
    {
      name: "InRejang",
      bmp: "\uA930-\uA95F",
    },
    {
      name: "InRumi_Numeral_Symbols",
      astral: "\uD803[\uDE60-\uDE7F]",
    },
    {
      name: "InRunic",
      bmp: "\u16A0-\u16FF",
    },
    {
      name: "InSamaritan",
      bmp: "\u0800-\u083F",
    },
    {
      name: "InSaurashtra",
      bmp: "\uA880-\uA8DF",
    },
    {
      name: "InSharada",
      astral: "\uD804[\uDD80-\uDDDF]",
    },
    {
      name: "InShavian",
      astral: "\uD801[\uDC50-\uDC7F]",
    },
    {
      name: "InShorthand_Format_Controls",
      astral: "\uD82F[\uDCA0-\uDCAF]",
    },
    {
      name: "InSiddham",
      astral: "\uD805[\uDD80-\uDDFF]",
    },
    {
      name: "InSinhala",
      bmp: "\u0D80-\u0DFF",
    },
    {
      name: "InSinhala_Archaic_Numbers",
      astral: "\uD804[\uDDE0-\uDDFF]",
    },
    {
      name: "InSmall_Form_Variants",
      bmp: "\uFE50-\uFE6F",
    },
    {
      name: "InSogdian",
      astral: "\uD803[\uDF30-\uDF6F]",
    },
    {
      name: "InSora_Sompeng",
      astral: "\uD804[\uDCD0-\uDCFF]",
    },
    {
      name: "InSoyombo",
      astral: "\uD806[\uDE50-\uDEAF]",
    },
    {
      name: "InSpacing_Modifier_Letters",
      bmp: "\u02B0-\u02FF",
    },
    {
      name: "InSpecials",
      bmp: "\uFFF0-\uFFFF",
    },
    {
      name: "InSundanese",
      bmp: "\u1B80-\u1BBF",
    },
    {
      name: "InSundanese_Supplement",
      bmp: "\u1CC0-\u1CCF",
    },
    {
      name: "InSuperscripts_And_Subscripts",
      bmp: "\u2070-\u209F",
    },
    {
      name: "InSupplemental_Arrows_A",
      bmp: "\u27F0-\u27FF",
    },
    {
      name: "InSupplemental_Arrows_B",
      bmp: "\u2900-\u297F",
    },
    {
      name: "InSupplemental_Arrows_C",
      astral: "\uD83E[\uDC00-\uDCFF]",
    },
    {
      name: "InSupplemental_Mathematical_Operators",
      bmp: "\u2A00-\u2AFF",
    },
    {
      name: "InSupplemental_Punctuation",
      bmp: "\u2E00-\u2E7F",
    },
    {
      name: "InSupplemental_Symbols_And_Pictographs",
      astral: "\uD83E[\uDD00-\uDDFF]",
    },
    {
      name: "InSupplementary_Private_Use_Area_A",
      astral: "[\uDB80-\uDBBF][\uDC00-\uDFFF]",
    },
    {
      name: "InSupplementary_Private_Use_Area_B",
      astral: "[\uDBC0-\uDBFF][\uDC00-\uDFFF]",
    },
    {
      name: "InSutton_SignWriting",
      astral: "\uD836[\uDC00-\uDEAF]",
    },
    {
      name: "InSyloti_Nagri",
      bmp: "\uA800-\uA82F",
    },
    {
      name: "InSyriac",
      bmp: "\u0700-\u074F",
    },
    {
      name: "InSyriac_Supplement",
      bmp: "\u0860-\u086F",
    },
    {
      name: "InTagalog",
      bmp: "\u1700-\u171F",
    },
    {
      name: "InTagbanwa",
      bmp: "\u1760-\u177F",
    },
    {
      name: "InTags",
      astral: "\uDB40[\uDC00-\uDC7F]",
    },
    {
      name: "InTai_Le",
      bmp: "\u1950-\u197F",
    },
    {
      name: "InTai_Tham",
      bmp: "\u1A20-\u1AAF",
    },
    {
      name: "InTai_Viet",
      bmp: "\uAA80-\uAADF",
    },
    {
      name: "InTai_Xuan_Jing_Symbols",
      astral: "\uD834[\uDF00-\uDF5F]",
    },
    {
      name: "InTakri",
      astral: "\uD805[\uDE80-\uDECF]",
    },
    {
      name: "InTamil",
      bmp: "\u0B80-\u0BFF",
    },
    {
      name: "InTangut",
      astral: "[\uD81C-\uD821][\uDC00-\uDFFF]",
    },
    {
      name: "InTangut_Components",
      astral: "\uD822[\uDC00-\uDEFF]",
    },
    {
      name: "InTelugu",
      bmp: "\u0C00-\u0C7F",
    },
    {
      name: "InThaana",
      bmp: "\u0780-\u07BF",
    },
    {
      name: "InThai",
      bmp: "\u0E00-\u0E7F",
    },
    {
      name: "InTibetan",
      bmp: "\u0F00-\u0FFF",
    },
    {
      name: "InTifinagh",
      bmp: "\u2D30-\u2D7F",
    },
    {
      name: "InTirhuta",
      astral: "\uD805[\uDC80-\uDCDF]",
    },
    {
      name: "InTransport_And_Map_Symbols",
      astral: "\uD83D[\uDE80-\uDEFF]",
    },
    {
      name: "InUgaritic",
      astral: "\uD800[\uDF80-\uDF9F]",
    },
    {
      name: "InUnified_Canadian_Aboriginal_Syllabics",
      bmp: "\u1400-\u167F",
    },
    {
      name: "InUnified_Canadian_Aboriginal_Syllabics_Extended",
      bmp: "\u18B0-\u18FF",
    },
    {
      name: "InVai",
      bmp: "\uA500-\uA63F",
    },
    {
      name: "InVariation_Selectors",
      bmp: "\uFE00-\uFE0F",
    },
    {
      name: "InVariation_Selectors_Supplement",
      astral: "\uDB40[\uDD00-\uDDEF]",
    },
    {
      name: "InVedic_Extensions",
      bmp: "\u1CD0-\u1CFF",
    },
    {
      name: "InVertical_Forms",
      bmp: "\uFE10-\uFE1F",
    },
    {
      name: "InWarang_Citi",
      astral: "\uD806[\uDCA0-\uDCFF]",
    },
    {
      name: "InYi_Radicals",
      bmp: "\uA490-\uA4CF",
    },
    {
      name: "InYi_Syllables",
      bmp: "\uA000-\uA48F",
    },
    {
      name: "InYijing_Hexagram_Symbols",
      bmp: "\u4DC0-\u4DFF",
    },
    {
      name: "InZanabazar_Square",
      astral: "\uD806[\uDE00-\uDE4F]",
    },
  ];

  var unicodeBlocks = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    var _blocks = _interopRequireDefault(blocks);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    /*!
     * XRegExp Unicode Blocks 4.2.0
     * <xregexp.com>
     * Steven Levithan (c) 2010-present MIT License
     * Unicode data by Mathias Bynens <mathiasbynens.be>
     */
    var _default = function _default(XRegExp) {
      /**
       * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,
       * `\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and
       * underscores are ignored.
       *
       * Uses Unicode 11.0.0.
       *
       * @requires XRegExp, Unicode Base
       */
      if (!XRegExp.addUnicodeData) {
        throw new ReferenceError(
          "Unicode Base must be loaded before Unicode Blocks"
        );
      }

      XRegExp.addUnicodeData(_blocks.default);
    };

    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(unicodeBlocks);

  var categories = [
    {
      name: "C",
      alias: "Other",
      isBmpLast: true,
      bmp: "\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08BE-\u08D2\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D04\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFA-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BC9\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E4F-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FF0-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7BA-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF",
      astral:
        "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD47-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5F-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD00-\uDDFF\uDE48-\uDE4F\uDE84\uDE85\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE2-\uDFFF]|\uD821[\uDFF2-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDD1F-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED5-\uDEDF\uDEED-\uDEEF\uDEFA-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD0F\uDD3F\uDD71\uDD72\uDD77-\uDD79\uDD7B\uDDA3-\uDDAF\uDDBA-\uDDBF\uDDC3-\uDDCF\uDE00-\uDE5F\uDE6E-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]",
    },
    {
      name: "Cc",
      alias: "Control",
      bmp: "\0-\x1F\x7F-\x9F",
    },
    {
      name: "Cf",
      alias: "Format",
      bmp: "\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB",
      astral:
        "\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]",
    },
    {
      name: "Cn",
      alias: "Unassigned",
      bmp: "\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08BE-\u08D2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D04\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFA-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BC9\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E4F-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FF0-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7BA-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF",
      astral:
        "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD47-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5F-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD00-\uDDFF\uDE48-\uDE4F\uDE84\uDE85\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE2-\uDFFF]|\uD821[\uDFF2-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDD1F-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED5-\uDEDF\uDEED-\uDEEF\uDEFA-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD0F\uDD3F\uDD71\uDD72\uDD77-\uDD79\uDD7B\uDDA3-\uDDAF\uDDBA-\uDDBF\uDDC3-\uDDCF\uDE00-\uDE5F\uDE6E-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]",
    },
    {
      name: "Co",
      alias: "Private_Use",
      bmp: "\uE000-\uF8FF",
      astral:
        "[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]",
    },
    {
      name: "Cs",
      alias: "Surrogate",
      bmp: "\uD800-\uDFFF",
    },
    {
      name: "L",
      alias: "Letter",
      bmp: "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7B9\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
      astral:
        "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]",
    },
    {
      name: "LC",
      alias: "Cased_Letter",
      bmp: "A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7B9\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A",
      astral:
        "\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDD00-\uDD43]",
    },
    {
      name: "Ll",
      alias: "Lowercase_Letter",
      bmp: "a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
      astral:
        "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]",
    },
    {
      name: "Lm",
      alias: "Modifier_Letter",
      bmp: "\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F",
      astral: "\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1]",
    },
    {
      name: "Lo",
      alias: "Other_Letter",
      bmp: "\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
      astral:
        "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]",
    },
    {
      name: "Lt",
      alias: "Titlecase_Letter",
      bmp: "\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC",
    },
    {
      name: "Lu",
      alias: "Uppercase_Letter",
      bmp: "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uFF21-\uFF3A",
      astral:
        "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]",
    },
    {
      name: "M",
      alias: "Mark",
      bmp: "\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
      astral:
        "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDF46-\uDF50]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]",
    },
    {
      name: "Mc",
      alias: "Spacing_Mark",
      bmp: "\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF2\u1CF3\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BD-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC",
      astral:
        "\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF7E]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]",
    },
    {
      name: "Me",
      alias: "Enclosing_Mark",
      bmp: "\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672",
    },
    {
      name: "Mn",
      alias: "Nonspacing_Mark",
      bmp: "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
      astral:
        "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]",
    },
    {
      name: "N",
      alias: "Number",
      bmp: "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
      astral:
        "\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4]|\uD83C[\uDD00-\uDD0C]",
    },
    {
      name: "Nd",
      alias: "Decimal_Number",
      bmp: "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
      astral:
        "\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]",
    },
    {
      name: "Nl",
      alias: "Letter_Number",
      bmp: "\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF",
      astral:
        "\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]",
    },
    {
      name: "No",
      alias: "Other_Number",
      bmp: "\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835",
      astral:
        "\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4]|\uD83C[\uDD00-\uDD0C]",
    },
    {
      name: "P",
      alias: "Punctuation",
      bmp: "!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65",
      astral:
        "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]",
    },
    {
      name: "Pc",
      alias: "Connector_Punctuation",
      bmp: "_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F",
    },
    {
      name: "Pd",
      alias: "Dash_Punctuation",
      bmp: "\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D",
    },
    {
      name: "Pe",
      alias: "Close_Punctuation",
      bmp: "\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63",
    },
    {
      name: "Pf",
      alias: "Final_Punctuation",
      bmp: "\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21",
    },
    {
      name: "Pi",
      alias: "Initial_Punctuation",
      bmp: "\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20",
    },
    {
      name: "Po",
      alias: "Other_Punctuation",
      bmp: "!-#%-'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166D\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4E\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65",
      astral:
        "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]",
    },
    {
      name: "Ps",
      alias: "Open_Punctuation",
      bmp: "\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62",
    },
    {
      name: "S",
      alias: "Symbol",
      bmp: "\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B98-\u2BC8\u2BCA-\u2BFE\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD",
      astral:
        "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83B[\uDCAC\uDCB0\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF9\uDF00-\uDF73\uDF80-\uDFD8]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF\uDE60-\uDE6D]",
    },
    {
      name: "Sc",
      alias: "Currency_Symbol",
      bmp: "\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BF\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6",
      astral: "\uD83B\uDCB0",
    },
    {
      name: "Sk",
      alias: "Modifier_Symbol",
      bmp: "\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3",
      astral: "\uD83C[\uDFFB-\uDFFF]",
    },
    {
      name: "Sm",
      alias: "Math_Symbol",
      bmp: "\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC",
      astral:
        "\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]",
    },
    {
      name: "So",
      alias: "Other_Symbol",
      bmp: "\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B98-\u2BC8\u2BCA-\u2BFE\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD",
      astral:
        "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83B\uDCAC|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF9\uDF00-\uDF73\uDF80-\uDFD8]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF\uDE60-\uDE6D]",
    },
    {
      name: "Z",
      alias: "Separator",
      bmp: " \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000",
    },
    {
      name: "Zl",
      alias: "Line_Separator",
      bmp: "\u2028",
    },
    {
      name: "Zp",
      alias: "Paragraph_Separator",
      bmp: "\u2029",
    },
    {
      name: "Zs",
      alias: "Space_Separator",
      bmp: " \xA0\u1680\u2000-\u200A\u202F\u205F\u3000",
    },
  ];

  var unicodeCategories = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    var _categories = _interopRequireDefault(categories);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    /*!
     * XRegExp Unicode Categories 4.2.0
     * <xregexp.com>
     * Steven Levithan (c) 2010-present MIT License
     * Unicode data by Mathias Bynens <mathiasbynens.be>
     */
    var _default = function _default(XRegExp) {
      /**
       * Adds support for Unicode's general categories. E.g., `\p{Lu}` or `\p{Uppercase Letter}`. See
       * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token
       * names are case insensitive, and any spaces, hyphens, and underscores are ignored.
       *
       * Uses Unicode 11.0.0.
       *
       * @requires XRegExp, Unicode Base
       */
      if (!XRegExp.addUnicodeData) {
        throw new ReferenceError(
          "Unicode Base must be loaded before Unicode Categories"
        );
      }

      XRegExp.addUnicodeData(_categories.default);
    };

    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(unicodeCategories);

  var properties = [
    {
      name: "ASCII",
      bmp: "\0-\x7F",
    },
    {
      name: "Alphabetic",
      bmp: "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u1062\u1065-\u1068\u106E-\u1086\u108E\u109C\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C35\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7B9\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A\uAA7E-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
      astral:
        "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDF00-\uDF1C\uDF27\uDF30-\uDF45]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD44-\uDD46\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDF00-\uDF1A\uDF1D-\uDF2A]|\uD806[\uDC00-\uDC38\uDCA0-\uDCDF\uDCFF\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE83\uDE86-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDEE0-\uDEF6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF36\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF44\uDF50-\uDF7E\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]",
    },
    {
      name: "Any",
      isBmpLast: true,
      bmp: "\0-\uFFFF",
      astral: "[\uD800-\uDBFF][\uDC00-\uDFFF]",
    },
    {
      name: "Default_Ignorable_Code_Point",
      bmp: "\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8",
      astral:
        "\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]",
    },
    {
      name: "Lowercase",
      bmp: "a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
      astral:
        "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]",
    },
    {
      name: "Noncharacter_Code_Point",
      bmp: "\uFDD0-\uFDEF\uFFFE\uFFFF",
      astral:
        "[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]",
    },
    {
      name: "Uppercase",
      bmp: "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uFF21-\uFF3A",
      astral:
        "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]",
    },
    {
      name: "White_Space",
      bmp: "\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000",
    },
  ];

  var unicodeProperties = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    var _properties = _interopRequireDefault(properties);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    /*!
     * XRegExp Unicode Properties 4.2.0
     * <xregexp.com>
     * Steven Levithan (c) 2012-present MIT License
     * Unicode data by Mathias Bynens <mathiasbynens.be>
     */
    var _default = function _default(XRegExp) {
      /**
       * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See
       * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from
       * UAX #44 <http://unicode.org/reports/tr44/>:
       *
       * - Alphabetic
       *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +
       *   Lo + Nl + Other_Alphabetic.
       *
       * - Default_Ignorable_Code_Point
       *   For programmatic determination of default ignorable code points. New characters that should
       *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,
       *   permitting programs to correctly handle the default rendering of such characters when not
       *   otherwise supported.
       *
       * - Lowercase
       *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.
       *
       * - Noncharacter_Code_Point
       *   Code points permanently reserved for internal use.
       *
       * - Uppercase
       *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.
       *
       * - White_Space
       *   Spaces, separator characters and other control characters which should be treated by
       *   programming languages as "white space" for the purpose of parsing elements.
       *
       * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS
       * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are
       * included in XRegExp's Unicode Categories and Unicode Scripts addons.
       *
       * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.
       *
       * Uses Unicode 11.0.0.
       *
       * @requires XRegExp, Unicode Base
       */
      if (!XRegExp.addUnicodeData) {
        throw new ReferenceError(
          "Unicode Base must be loaded before Unicode Properties"
        );
      }

      var unicodeData = _properties.default; // Add non-generated data

      unicodeData.push({
        name: "Assigned",
        // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode
        // Categories addon is required to use this property
        inverseOf: "Cn",
      });
      XRegExp.addUnicodeData(unicodeData);
    };

    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(unicodeProperties);

  var scripts = [
    {
      name: "Adlam",
      astral: "\uD83A[\uDD00-\uDD4A\uDD50-\uDD59\uDD5E\uDD5F]",
    },
    {
      name: "Ahom",
      astral: "\uD805[\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF3F]",
    },
    {
      name: "Anatolian_Hieroglyphs",
      astral: "\uD811[\uDC00-\uDE46]",
    },
    {
      name: "Arabic",
      bmp: "\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061C\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B4\u08B6-\u08BD\u08D3-\u08E1\u08E3-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC",
      astral:
        "\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]",
    },
    {
      name: "Armenian",
      bmp: "\u0531-\u0556\u0559-\u0588\u058A\u058D-\u058F\uFB13-\uFB17",
    },
    {
      name: "Avestan",
      astral: "\uD802[\uDF00-\uDF35\uDF39-\uDF3F]",
    },
    {
      name: "Balinese",
      bmp: "\u1B00-\u1B4B\u1B50-\u1B7C",
    },
    {
      name: "Bamum",
      bmp: "\uA6A0-\uA6F7",
      astral: "\uD81A[\uDC00-\uDE38]",
    },
    {
      name: "Bassa_Vah",
      astral: "\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]",
    },
    {
      name: "Batak",
      bmp: "\u1BC0-\u1BF3\u1BFC-\u1BFF",
    },
    {
      name: "Bengali",
      bmp: "\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE",
    },
    {
      name: "Bhaiksuki",
      astral: "\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]",
    },
    {
      name: "Bopomofo",
      bmp: "\u02EA\u02EB\u3105-\u312F\u31A0-\u31BA",
    },
    {
      name: "Brahmi",
      astral: "\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]",
    },
    {
      name: "Braille",
      bmp: "\u2800-\u28FF",
    },
    {
      name: "Buginese",
      bmp: "\u1A00-\u1A1B\u1A1E\u1A1F",
    },
    {
      name: "Buhid",
      bmp: "\u1740-\u1753",
    },
    {
      name: "Canadian_Aboriginal",
      bmp: "\u1400-\u167F\u18B0-\u18F5",
    },
    {
      name: "Carian",
      astral: "\uD800[\uDEA0-\uDED0]",
    },
    {
      name: "Caucasian_Albanian",
      astral: "\uD801[\uDD30-\uDD63\uDD6F]",
    },
    {
      name: "Chakma",
      astral: "\uD804[\uDD00-\uDD34\uDD36-\uDD46]",
    },
    {
      name: "Cham",
      bmp: "\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F",
    },
    {
      name: "Cherokee",
      bmp: "\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF",
    },
    {
      name: "Common",
      bmp: "\0-@\\[-`\\{-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0589\u0605\u060C\u061B\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BF\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BC8\u2BCA-\u2BFE\u2E00-\u2E4E\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD",
      astral:
        "\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9B\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDEE0-\uDEF3\uDF00-\uDF56\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83B[\uDC71-\uDCB4]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD10-\uDD6B\uDD70-\uDDAC\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF9\uDF00-\uDF73\uDF80-\uDFD8]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF\uDE60-\uDE6D]|\uDB40[\uDC01\uDC20-\uDC7F]",
    },
    {
      name: "Coptic",
      bmp: "\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF",
    },
    {
      name: "Cuneiform",
      astral:
        "\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]",
    },
    {
      name: "Cypriot",
      astral:
        "\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]",
    },
    {
      name: "Cyrillic",
      bmp: "\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F",
    },
    {
      name: "Deseret",
      astral: "\uD801[\uDC00-\uDC4F]",
    },
    {
      name: "Devanagari",
      bmp: "\u0900-\u0950\u0953-\u0963\u0966-\u097F\uA8E0-\uA8FF",
    },
    {
      name: "Dogra",
      astral: "\uD806[\uDC00-\uDC3B]",
    },
    {
      name: "Duployan",
      astral:
        "\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]",
    },
    {
      name: "Egyptian_Hieroglyphs",
      astral: "\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]",
    },
    {
      name: "Elbasan",
      astral: "\uD801[\uDD00-\uDD27]",
    },
    {
      name: "Ethiopic",
      bmp: "\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E",
    },
    {
      name: "Georgian",
      bmp: "\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u1C90-\u1CBA\u1CBD-\u1CBF\u2D00-\u2D25\u2D27\u2D2D",
    },
    {
      name: "Glagolitic",
      bmp: "\u2C00-\u2C2E\u2C30-\u2C5E",
      astral:
        "\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]",
    },
    {
      name: "Gothic",
      astral: "\uD800[\uDF30-\uDF4A]",
    },
    {
      name: "Grantha",
      astral:
        "\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]",
    },
    {
      name: "Greek",
      bmp: "\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65",
      astral: "\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]",
    },
    {
      name: "Gujarati",
      bmp: "\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF",
    },
    {
      name: "Gunjala_Gondi",
      astral:
        "\uD807[\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9]",
    },
    {
      name: "Gurmukhi",
      bmp: "\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76",
    },
    {
      name: "Han",
      bmp: "\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DB5\u4E00-\u9FEF\uF900-\uFA6D\uFA70-\uFAD9",
      astral:
        "[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]",
    },
    {
      name: "Hangul",
      bmp: "\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
    },
    {
      name: "Hanifi_Rohingya",
      astral: "\uD803[\uDD00-\uDD27\uDD30-\uDD39]",
    },
    {
      name: "Hanunoo",
      bmp: "\u1720-\u1734",
    },
    {
      name: "Hatran",
      astral: "\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]",
    },
    {
      name: "Hebrew",
      bmp: "\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F",
    },
    {
      name: "Hiragana",
      bmp: "\u3041-\u3096\u309D-\u309F",
      astral: "\uD82C[\uDC01-\uDD1E]|\uD83C\uDE00",
    },
    {
      name: "Imperial_Aramaic",
      astral: "\uD802[\uDC40-\uDC55\uDC57-\uDC5F]",
    },
    {
      name: "Inherited",
      bmp: "\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951\u0952\u1AB0-\u1ABE\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D",
      astral:
        "\uD800[\uDDFD\uDEE0]|\uD804\uDF3B|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]",
    },
    {
      name: "Inscriptional_Pahlavi",
      astral: "\uD802[\uDF60-\uDF72\uDF78-\uDF7F]",
    },
    {
      name: "Inscriptional_Parthian",
      astral: "\uD802[\uDF40-\uDF55\uDF58-\uDF5F]",
    },
    {
      name: "Javanese",
      bmp: "\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF",
    },
    {
      name: "Kaithi",
      astral: "\uD804[\uDC80-\uDCC1\uDCCD]",
    },
    {
      name: "Kannada",
      bmp: "\u0C80-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2",
    },
    {
      name: "Katakana",
      bmp: "\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D",
      astral: "\uD82C\uDC00",
    },
    {
      name: "Kayah_Li",
      bmp: "\uA900-\uA92D\uA92F",
    },
    {
      name: "Kharoshthi",
      astral:
        "\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F-\uDE48\uDE50-\uDE58]",
    },
    {
      name: "Khmer",
      bmp: "\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF",
    },
    {
      name: "Khojki",
      astral: "\uD804[\uDE00-\uDE11\uDE13-\uDE3E]",
    },
    {
      name: "Khudawadi",
      astral: "\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]",
    },
    {
      name: "Lao",
      bmp: "\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF",
    },
    {
      name: "Latin",
      bmp: "A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7B9\uA7F7-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A",
    },
    {
      name: "Lepcha",
      bmp: "\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F",
    },
    {
      name: "Limbu",
      bmp: "\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F",
    },
    {
      name: "Linear_A",
      astral: "\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]",
    },
    {
      name: "Linear_B",
      astral:
        "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]",
    },
    {
      name: "Lisu",
      bmp: "\uA4D0-\uA4FF",
    },
    {
      name: "Lycian",
      astral: "\uD800[\uDE80-\uDE9C]",
    },
    {
      name: "Lydian",
      astral: "\uD802[\uDD20-\uDD39\uDD3F]",
    },
    {
      name: "Mahajani",
      astral: "\uD804[\uDD50-\uDD76]",
    },
    {
      name: "Makasar",
      astral: "\uD807[\uDEE0-\uDEF8]",
    },
    {
      name: "Malayalam",
      bmp: "\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F",
    },
    {
      name: "Mandaic",
      bmp: "\u0840-\u085B\u085E",
    },
    {
      name: "Manichaean",
      astral: "\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]",
    },
    {
      name: "Marchen",
      astral: "\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]",
    },
    {
      name: "Masaram_Gondi",
      astral:
        "\uD807[\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]",
    },
    {
      name: "Medefaidrin",
      astral: "\uD81B[\uDE40-\uDE9A]",
    },
    {
      name: "Meetei_Mayek",
      bmp: "\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9",
    },
    {
      name: "Mende_Kikakui",
      astral: "\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]",
    },
    {
      name: "Meroitic_Cursive",
      astral: "\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]",
    },
    {
      name: "Meroitic_Hieroglyphs",
      astral: "\uD802[\uDD80-\uDD9F]",
    },
    {
      name: "Miao",
      astral: "\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]",
    },
    {
      name: "Modi",
      astral: "\uD805[\uDE00-\uDE44\uDE50-\uDE59]",
    },
    {
      name: "Mongolian",
      bmp: "\u1800\u1801\u1804\u1806-\u180E\u1810-\u1819\u1820-\u1878\u1880-\u18AA",
      astral: "\uD805[\uDE60-\uDE6C]",
    },
    {
      name: "Mro",
      astral: "\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]",
    },
    {
      name: "Multani",
      astral:
        "\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]",
    },
    {
      name: "Myanmar",
      bmp: "\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F",
    },
    {
      name: "Nabataean",
      astral: "\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]",
    },
    {
      name: "New_Tai_Lue",
      bmp: "\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF",
    },
    {
      name: "Newa",
      astral: "\uD805[\uDC00-\uDC59\uDC5B\uDC5D\uDC5E]",
    },
    {
      name: "Nko",
      bmp: "\u07C0-\u07FA\u07FD-\u07FF",
    },
    {
      name: "Nushu",
      astral: "\uD81B\uDFE1|\uD82C[\uDD70-\uDEFB]",
    },
    {
      name: "Ogham",
      bmp: "\u1680-\u169C",
    },
    {
      name: "Ol_Chiki",
      bmp: "\u1C50-\u1C7F",
    },
    {
      name: "Old_Hungarian",
      astral: "\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]",
    },
    {
      name: "Old_Italic",
      astral: "\uD800[\uDF00-\uDF23\uDF2D-\uDF2F]",
    },
    {
      name: "Old_North_Arabian",
      astral: "\uD802[\uDE80-\uDE9F]",
    },
    {
      name: "Old_Permic",
      astral: "\uD800[\uDF50-\uDF7A]",
    },
    {
      name: "Old_Persian",
      astral: "\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]",
    },
    {
      name: "Old_Sogdian",
      astral: "\uD803[\uDF00-\uDF27]",
    },
    {
      name: "Old_South_Arabian",
      astral: "\uD802[\uDE60-\uDE7F]",
    },
    {
      name: "Old_Turkic",
      astral: "\uD803[\uDC00-\uDC48]",
    },
    {
      name: "Oriya",
      bmp: "\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77",
    },
    {
      name: "Osage",
      astral: "\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]",
    },
    {
      name: "Osmanya",
      astral: "\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]",
    },
    {
      name: "Pahawh_Hmong",
      astral:
        "\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]",
    },
    {
      name: "Palmyrene",
      astral: "\uD802[\uDC60-\uDC7F]",
    },
    {
      name: "Pau_Cin_Hau",
      astral: "\uD806[\uDEC0-\uDEF8]",
    },
    {
      name: "Phags_Pa",
      bmp: "\uA840-\uA877",
    },
    {
      name: "Phoenician",
      astral: "\uD802[\uDD00-\uDD1B\uDD1F]",
    },
    {
      name: "Psalter_Pahlavi",
      astral: "\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]",
    },
    {
      name: "Rejang",
      bmp: "\uA930-\uA953\uA95F",
    },
    {
      name: "Runic",
      bmp: "\u16A0-\u16EA\u16EE-\u16F8",
    },
    {
      name: "Samaritan",
      bmp: "\u0800-\u082D\u0830-\u083E",
    },
    {
      name: "Saurashtra",
      bmp: "\uA880-\uA8C5\uA8CE-\uA8D9",
    },
    {
      name: "Sharada",
      astral: "\uD804[\uDD80-\uDDCD\uDDD0-\uDDDF]",
    },
    {
      name: "Shavian",
      astral: "\uD801[\uDC50-\uDC7F]",
    },
    {
      name: "Siddham",
      astral: "\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]",
    },
    {
      name: "SignWriting",
      astral: "\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]",
    },
    {
      name: "Sinhala",
      bmp: "\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4",
      astral: "\uD804[\uDDE1-\uDDF4]",
    },
    {
      name: "Sogdian",
      astral: "\uD803[\uDF30-\uDF59]",
    },
    {
      name: "Sora_Sompeng",
      astral: "\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]",
    },
    {
      name: "Soyombo",
      astral: "\uD806[\uDE50-\uDE83\uDE86-\uDEA2]",
    },
    {
      name: "Sundanese",
      bmp: "\u1B80-\u1BBF\u1CC0-\u1CC7",
    },
    {
      name: "Syloti_Nagri",
      bmp: "\uA800-\uA82B",
    },
    {
      name: "Syriac",
      bmp: "\u0700-\u070D\u070F-\u074A\u074D-\u074F\u0860-\u086A",
    },
    {
      name: "Tagalog",
      bmp: "\u1700-\u170C\u170E-\u1714",
    },
    {
      name: "Tagbanwa",
      bmp: "\u1760-\u176C\u176E-\u1770\u1772\u1773",
    },
    {
      name: "Tai_Le",
      bmp: "\u1950-\u196D\u1970-\u1974",
    },
    {
      name: "Tai_Tham",
      bmp: "\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD",
    },
    {
      name: "Tai_Viet",
      bmp: "\uAA80-\uAAC2\uAADB-\uAADF",
    },
    {
      name: "Takri",
      astral: "\uD805[\uDE80-\uDEB7\uDEC0-\uDEC9]",
    },
    {
      name: "Tamil",
      bmp: "\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA",
    },
    {
      name: "Tangut",
      astral:
        "\uD81B\uDFE0|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]",
    },
    {
      name: "Telugu",
      bmp: "\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7F",
    },
    {
      name: "Thaana",
      bmp: "\u0780-\u07B1",
    },
    {
      name: "Thai",
      bmp: "\u0E01-\u0E3A\u0E40-\u0E5B",
    },
    {
      name: "Tibetan",
      bmp: "\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA",
    },
    {
      name: "Tifinagh",
      bmp: "\u2D30-\u2D67\u2D6F\u2D70\u2D7F",
    },
    {
      name: "Tirhuta",
      astral: "\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]",
    },
    {
      name: "Ugaritic",
      astral: "\uD800[\uDF80-\uDF9D\uDF9F]",
    },
    {
      name: "Vai",
      bmp: "\uA500-\uA62B",
    },
    {
      name: "Warang_Citi",
      astral: "\uD806[\uDCA0-\uDCF2\uDCFF]",
    },
    {
      name: "Yi",
      bmp: "\uA000-\uA48C\uA490-\uA4C6",
    },
    {
      name: "Zanabazar_Square",
      astral: "\uD806[\uDE00-\uDE47]",
    },
  ];

  var unicodeScripts = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    var _scripts = _interopRequireDefault(scripts);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    /*!
     * XRegExp Unicode Scripts 4.2.0
     * <xregexp.com>
     * Steven Levithan (c) 2010-present MIT License
     * Unicode data by Mathias Bynens <mathiasbynens.be>
     */
    var _default = function _default(XRegExp) {
      /**
       * Adds support for all Unicode scripts. E.g., `\p{Latin}`. Token names are case insensitive,
       * and any spaces, hyphens, and underscores are ignored.
       *
       * Uses Unicode 11.0.0.
       *
       * @requires XRegExp, Unicode Base
       */
      if (!XRegExp.addUnicodeData) {
        throw new ReferenceError(
          "Unicode Base must be loaded before Unicode Scripts"
        );
      }

      XRegExp.addUnicodeData(_scripts.default);
    };

    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(unicodeScripts);

  var lib = createCommonjsModule(function (module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = void 0;

    var _xregexp = _interopRequireDefault(xregexp);

    var _build = _interopRequireDefault(build);

    var _matchrecursive = _interopRequireDefault(matchrecursive);

    var _unicodeBase = _interopRequireDefault(unicodeBase);

    var _unicodeBlocks = _interopRequireDefault(unicodeBlocks);

    var _unicodeCategories = _interopRequireDefault(unicodeCategories);

    var _unicodeProperties = _interopRequireDefault(unicodeProperties);

    var _unicodeScripts = _interopRequireDefault(unicodeScripts);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    _build.default(_xregexp.default);
    _matchrecursive.default(_xregexp.default);
    _unicodeBase.default(_xregexp.default);
    _unicodeBlocks.default(_xregexp.default);
    _unicodeCategories.default(_xregexp.default);
    _unicodeProperties.default(_xregexp.default);
    _unicodeScripts.default(_xregexp.default);
    var _default = _xregexp.default;
    exports.default = _default;
    module.exports = exports["default"];
  });

  unwrapExports(lib);

  var utilities = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class FormatUtility {
      static preProcess(query, toLower = true) {
        if (toLower) {
          query = query.toLowerCase();
        }
        return query
          .replace(/０/g, "0")
          .replace(/１/g, "1")
          .replace(/２/g, "2")
          .replace(/３/g, "3")
          .replace(/４/g, "4")
          .replace(/５/g, "5")
          .replace(/６/g, "6")
          .replace(/７/g, "7")
          .replace(/８/g, "8")
          .replace(/９/g, "9")
          .replace(/：/g, ":")
          .replace(/－/g, "-")
          .replace(/，/g, ",")
          .replace(/／/g, "/")
          .replace(/Ｇ/g, "G")
          .replace(/Ｍ/g, "M")
          .replace(/Ｔ/g, "T")
          .replace(/Ｋ/g, "K")
          .replace(/ｋ/g, "k")
          .replace(/．/g, ".")
          .replace(/（/g, "(")
          .replace(/）/g, ")");
      }
    }
    exports.FormatUtility = FormatUtility;
    class Match {
      constructor(index, length, value, groups) {
        this.index = index;
        this.length = length;
        this.value = value;
        this.innerGroups = groups;
      }
      groups(key) {
        return this.innerGroups[key]
          ? this.innerGroups[key]
          : { value: "", index: 0, length: 0, captures: [] };
      }
    }
    exports.Match = Match;
    class RegExpUtility {
      static getMatches(regex, source) {
        if (!regex) return [];
        let rawRegex = regex.xregexp.source;
        if (!rawRegex.includes("(?<nlb__")) {
          return this.getMatchesSimple(regex, source);
        }
        let realMatches = new Array();
        let negativeLookbehindRegexes = new Array();
        let flags = regex.flags;
        let closePos = 0;
        let startPos = rawRegex.indexOf("(?<nlb__", 0);
        while (startPos >= 0) {
          closePos = this.getClosePos(rawRegex, startPos);
          let nlbRegex = lib(rawRegex.substring(startPos, closePos + 1), flags);
          let nextRegex = RegExpUtility.getNextRegex(rawRegex, startPos);
          nlbRegex.nextRegex = nextRegex ? lib(nextRegex, flags) : null;
          negativeLookbehindRegexes.push(nlbRegex);
          rawRegex =
            rawRegex.substr(0, startPos) + rawRegex.substr(closePos + 1);
          startPos = rawRegex.indexOf("(?<nlb__", 0);
        }
        let tempRegex = lib(rawRegex, flags);
        let tempMatches = RegExpUtility.getMatchesSimple(tempRegex, source);
        tempMatches.forEach((match) => {
          let clean = true;
          negativeLookbehindRegexes.forEach((regex) => {
            let negativeLookbehindMatches = RegExpUtility.getMatchesSimple(
              regex,
              source
            );
            negativeLookbehindMatches.forEach((negativeLookbehindMatch) => {
              let negativeLookbehindEnd =
                negativeLookbehindMatch.index + negativeLookbehindMatch.length;
              let nextRegex = regex.nextRegex;
              if (match.index === negativeLookbehindEnd) {
                if (!nextRegex) {
                  clean = false;
                  return;
                } else {
                  let nextMatch = RegExpUtility.getFirstMatchIndex(
                    nextRegex,
                    source.substring(negativeLookbehindMatch.index)
                  );
                  if (
                    nextMatch.matched &&
                    (nextMatch.index === negativeLookbehindMatch.length ||
                      source.includes(nextMatch.value + match.value))
                  ) {
                    clean = false;
                    return;
                  }
                }
              }
              if (negativeLookbehindMatch.value.includes(match.value)) {
                let preMatches = RegExpUtility.getMatchesSimple(
                  regex,
                  source.substring(0, match.index)
                );
                preMatches.forEach((preMatch) => {
                  if (source.includes(preMatch.value + match.value)) {
                    clean = false;
                    return;
                  }
                });
              }
            });
            if (!clean) {
              return;
            }
          });
          if (clean) {
            realMatches.push(match);
          }
        });
        return realMatches;
      }
      static getMatchesSimple(regex, source) {
        // Word boundary (\b) in JS is not unicode-aware, so words starting/ending with accentuated characters will not match
        // use a normalized string to match, the return matches' values using the original one
        // http://blog.stevenlevithan.com/archives/javascript-regex-and-unicode
        // https://stackoverflow.com/questions/2881445/utf-8-word-boundary-regex-in-javascript
        let normalized =
          StringUtility.removeDiacriticsFromWordBoundaries(source);
        let matches = new Array();
        lib.forEach(normalized, regex, (match) => {
          let positiveLookbehinds = [];
          let groups = {};
          let lastGroup = "";
          Object.keys(match).forEach((key) => {
            if (!key.includes("__")) return;
            if (key.startsWith("plb") && match[key]) {
              if (
                match[0].indexOf(match[key]) !== 0 &&
                !StringUtility.isNullOrEmpty(lastGroup)
              ) {
                let index = match.index + match[0].indexOf(match[key]);
                let length = match[key].length;
                let value = source.substr(index, length);
                groups[lastGroup].value = groups[lastGroup].value + value;
              }
              positiveLookbehinds.push({ key: key, value: match[key] });
              return;
            }
            if (key.startsWith("nlb")) {
              return;
            }
            let groupKey = key.substr(0, key.lastIndexOf("__"));
            lastGroup = groupKey;
            if (!groups[groupKey])
              groups[groupKey] = {
                value: "",
                index: 0,
                length: 0,
                captures: [],
              };
            if (match[key]) {
              let index = match.index + match[0].indexOf(match[key]);
              let length = match[key].length;
              let value = source.substr(index, length);
              groups[groupKey].index = index;
              groups[groupKey].length = length;
              groups[groupKey].value = value;
              groups[groupKey].captures.push(value);
            }
          });
          let value = match[0];
          let index = match.index;
          let length = value.length;
          if (
            positiveLookbehinds &&
            positiveLookbehinds.length > 0 &&
            value.indexOf(positiveLookbehinds[0].value) === 0
          ) {
            value = source
              .substr(index, length)
              .substr(positiveLookbehinds[0].value.length);
            index += positiveLookbehinds[0].value.length;
            length -= positiveLookbehinds[0].value.length;
          } else {
            value = source.substr(index, length);
          }
          matches.push(new Match(index, length, value, groups));
        });
        return matches;
      }
      static getSafeRegExp(source, flags) {
        let sanitizedSource = this.sanitizeGroups(source);
        return lib(sanitizedSource, flags || "gis");
      }
      static getFirstMatchIndex(regex, source) {
        let matches = RegExpUtility.getMatches(regex, source);
        if (matches.length) {
          return {
            matched: true,
            index: matches[0].index,
            value: matches[0].value,
          };
        }
        return { matched: false, index: -1, value: null };
      }
      static split(regex, source) {
        return lib.split(source, regex);
      }
      static isMatch(regex, source) {
        return (
          !StringUtility.isNullOrEmpty(source) &&
          this.getMatches(regex, source).length > 0
        );
      }
      static sanitizeGroups(source) {
        let index = 0;
        let result = lib.replace(source, this.matchGroup, (match, name) =>
          match.replace(name, `${name}__${index++}`)
        );
        index = 0;
        result = lib.replace(
          result,
          this.matchPositiveLookbehind,
          () => `(?<plb__${index++}>`
        );
        index = 0;
        result = lib.replace(
          result,
          this.matchNegativeLookbehind,
          () => `(?<nlb__${index++}>`
        );
        return result;
      }
      static getNextRegex(source, startPos) {
        startPos = RegExpUtility.getClosePos(source, startPos) + 1;
        let closePos = RegExpUtility.getClosePos(source, startPos);
        if (source[startPos] !== "(") {
          closePos--;
        }
        let next =
          startPos === closePos
            ? null
            : source.substring(startPos, closePos + 1);
        return next;
      }
      static getClosePos(source, startPos) {
        let counter = 1;
        let closePos = startPos;
        while (counter > 0 && closePos < source.length) {
          let c = source[++closePos];
          if (c === "(") counter++;
          else if (c === ")") counter--;
        }
        return closePos;
      }
    }
    RegExpUtility.matchGroup = lib(String.raw`\?<(?<name>\w+)>`, "gis");
    RegExpUtility.matchPositiveLookbehind = lib(String.raw`\(\?<=`, "gis");
    RegExpUtility.matchNegativeLookbehind = lib(String.raw`\(\?<!`, "gis");
    exports.RegExpUtility = RegExpUtility;
    class StringUtility {
      static isNullOrWhitespace(input) {
        return !input || !input.trim();
      }
      static isNullOrEmpty(input) {
        return !input || input === "";
      }
      static isWhitespace(input) {
        return input && input !== "" && !input.trim();
      }
      static insertInto(input, value, index) {
        return input.substr(0, index) + value + input.substr(index);
      }
      static removeDiacriticsFromWordBoundaries(input) {
        return input
          .split(" ")
          .map((s) => {
            let length = s.length;
            if (length === 0) return s;
            let first = StringUtility.removeDiacritics(s.substring(0, 1));
            if (length === 1) return first;
            let last =
              length > 1
                ? StringUtility.removeDiacritics(s.substring(length - 1))
                : "";
            let mid = s.substring(1, length - 1);
            // console.log(first + mid + last)
            return first + mid + last;
          })
          .join(" ");
      }
      static removeDiacritics(c) {
        let clean = StringUtility.diacriticsRemovalMap[c];
        return !clean ? c : clean;
      }
    }
    StringUtility.diacriticsRemovalMap = {
      "Ⓐ": "A",
      Ａ: "A",
      À: "A",
      Á: "A",
      Â: "A",
      Ầ: "A",
      Ấ: "A",
      Ẫ: "A",
      Ẩ: "A",
      Ã: "A",
      Ā: "A",
      Ă: "A",
      Ằ: "A",
      Ắ: "A",
      Ẵ: "A",
      Ẳ: "A",
      Ȧ: "A",
      Ǡ: "A",
      Ä: "A",
      Ǟ: "A",
      Ả: "A",
      Å: "A",
      Ǻ: "A",
      Ǎ: "A",
      Ȁ: "A",
      Ȃ: "A",
      Ạ: "A",
      Ậ: "A",
      Ặ: "A",
      Ḁ: "A",
      Ą: "A",
      Ⱥ: "A",
      Ɐ: "A",
      "Ⓑ": "B",
      Ｂ: "B",
      Ḃ: "B",
      Ḅ: "B",
      Ḇ: "B",
      Ƀ: "B",
      Ƃ: "B",
      Ɓ: "B",
      "Ⓒ": "C",
      Ｃ: "C",
      Ć: "C",
      Ĉ: "C",
      Ċ: "C",
      Č: "C",
      Ç: "C",
      Ḉ: "C",
      Ƈ: "C",
      Ȼ: "C",
      Ꜿ: "C",
      "Ⓓ": "D",
      Ｄ: "D",
      Ḋ: "D",
      Ď: "D",
      Ḍ: "D",
      Ḑ: "D",
      Ḓ: "D",
      Ḏ: "D",
      Đ: "D",
      Ƌ: "D",
      Ɗ: "D",
      Ɖ: "D",
      Ꝺ: "D",
      "Ⓔ": "E",
      Ｅ: "E",
      È: "E",
      É: "E",
      Ê: "E",
      Ề: "E",
      Ế: "E",
      Ễ: "E",
      Ể: "E",
      Ẽ: "E",
      Ē: "E",
      Ḕ: "E",
      Ḗ: "E",
      Ĕ: "E",
      Ė: "E",
      Ë: "E",
      Ẻ: "E",
      Ě: "E",
      Ȅ: "E",
      Ȇ: "E",
      Ẹ: "E",
      Ệ: "E",
      Ȩ: "E",
      Ḝ: "E",
      Ę: "E",
      Ḙ: "E",
      Ḛ: "E",
      Ɛ: "E",
      Ǝ: "E",
      "Ⓕ": "F",
      Ｆ: "F",
      Ḟ: "F",
      Ƒ: "F",
      Ꝼ: "F",
      "Ⓖ": "G",
      Ｇ: "G",
      Ǵ: "G",
      Ĝ: "G",
      Ḡ: "G",
      Ğ: "G",
      Ġ: "G",
      Ǧ: "G",
      Ģ: "G",
      Ǥ: "G",
      Ɠ: "G",
      Ꞡ: "G",
      Ᵹ: "G",
      Ꝿ: "G",
      "Ⓗ": "H",
      Ｈ: "H",
      Ĥ: "H",
      Ḣ: "H",
      Ḧ: "H",
      Ȟ: "H",
      Ḥ: "H",
      Ḩ: "H",
      Ḫ: "H",
      Ħ: "H",
      Ⱨ: "H",
      Ⱶ: "H",
      Ɥ: "H",
      "Ⓘ": "I",
      Ｉ: "I",
      Ì: "I",
      Í: "I",
      Î: "I",
      Ĩ: "I",
      Ī: "I",
      Ĭ: "I",
      İ: "I",
      Ï: "I",
      Ḯ: "I",
      Ỉ: "I",
      Ǐ: "I",
      Ȉ: "I",
      Ȋ: "I",
      Ị: "I",
      Į: "I",
      Ḭ: "I",
      Ɨ: "I",
      "Ⓙ": "J",
      Ｊ: "J",
      Ĵ: "J",
      Ɉ: "J",
      "Ⓚ": "K",
      Ｋ: "K",
      Ḱ: "K",
      Ǩ: "K",
      Ḳ: "K",
      Ķ: "K",
      Ḵ: "K",
      Ƙ: "K",
      Ⱪ: "K",
      Ꝁ: "K",
      Ꝃ: "K",
      Ꝅ: "K",
      Ꞣ: "K",
      "Ⓛ": "L",
      Ｌ: "L",
      Ŀ: "L",
      Ĺ: "L",
      Ľ: "L",
      Ḷ: "L",
      Ḹ: "L",
      Ļ: "L",
      Ḽ: "L",
      Ḻ: "L",
      Ł: "L",
      Ƚ: "L",
      Ɫ: "L",
      Ⱡ: "L",
      Ꝉ: "L",
      Ꝇ: "L",
      Ꞁ: "L",
      "Ⓜ": "M",
      Ｍ: "M",
      Ḿ: "M",
      Ṁ: "M",
      Ṃ: "M",
      Ɱ: "M",
      Ɯ: "M",
      "Ⓝ": "N",
      Ｎ: "N",
      Ǹ: "N",
      Ń: "N",
      Ñ: "N",
      Ṅ: "N",
      Ň: "N",
      Ṇ: "N",
      Ņ: "N",
      Ṋ: "N",
      Ṉ: "N",
      Ƞ: "N",
      Ɲ: "N",
      Ꞑ: "N",
      Ꞥ: "N",
      "Ⓞ": "O",
      Ｏ: "O",
      Ò: "O",
      Ó: "O",
      Ô: "O",
      Ồ: "O",
      Ố: "O",
      Ỗ: "O",
      Ổ: "O",
      Õ: "O",
      Ṍ: "O",
      Ȭ: "O",
      Ṏ: "O",
      Ō: "O",
      Ṑ: "O",
      Ṓ: "O",
      Ŏ: "O",
      Ȯ: "O",
      Ȱ: "O",
      Ö: "O",
      Ȫ: "O",
      Ỏ: "O",
      Ő: "O",
      Ǒ: "O",
      Ȍ: "O",
      Ȏ: "O",
      Ơ: "O",
      Ờ: "O",
      Ớ: "O",
      Ỡ: "O",
      Ở: "O",
      Ợ: "O",
      Ọ: "O",
      Ộ: "O",
      Ǫ: "O",
      Ǭ: "O",
      Ø: "O",
      Ǿ: "O",
      Ɔ: "O",
      Ɵ: "O",
      Ꝋ: "O",
      Ꝍ: "O",
      "Ⓟ": "P",
      Ｐ: "P",
      Ṕ: "P",
      Ṗ: "P",
      Ƥ: "P",
      Ᵽ: "P",
      Ꝑ: "P",
      Ꝓ: "P",
      Ꝕ: "P",
      "Ⓠ": "Q",
      Ｑ: "Q",
      Ꝗ: "Q",
      Ꝙ: "Q",
      Ɋ: "Q",
      "Ⓡ": "R",
      Ｒ: "R",
      Ŕ: "R",
      Ṙ: "R",
      Ř: "R",
      Ȑ: "R",
      Ȓ: "R",
      Ṛ: "R",
      Ṝ: "R",
      Ŗ: "R",
      Ṟ: "R",
      Ɍ: "R",
      Ɽ: "R",
      Ꝛ: "R",
      Ꞧ: "R",
      Ꞃ: "R",
      "Ⓢ": "S",
      Ｓ: "S",
      ẞ: "S",
      Ś: "S",
      Ṥ: "S",
      Ŝ: "S",
      Ṡ: "S",
      Š: "S",
      Ṧ: "S",
      Ṣ: "S",
      Ṩ: "S",
      Ș: "S",
      Ş: "S",
      Ȿ: "S",
      Ꞩ: "S",
      Ꞅ: "S",
      "Ⓣ": "T",
      Ｔ: "T",
      Ṫ: "T",
      Ť: "T",
      Ṭ: "T",
      Ț: "T",
      Ţ: "T",
      Ṱ: "T",
      Ṯ: "T",
      Ŧ: "T",
      Ƭ: "T",
      Ʈ: "T",
      Ⱦ: "T",
      Ꞇ: "T",
      "Ⓤ": "U",
      Ｕ: "U",
      Ù: "U",
      Ú: "U",
      Û: "U",
      Ũ: "U",
      Ṹ: "U",
      Ū: "U",
      Ṻ: "U",
      Ŭ: "U",
      Ü: "U",
      Ǜ: "U",
      Ǘ: "U",
      Ǖ: "U",
      Ǚ: "U",
      Ủ: "U",
      Ů: "U",
      Ű: "U",
      Ǔ: "U",
      Ȕ: "U",
      Ȗ: "U",
      Ư: "U",
      Ừ: "U",
      Ứ: "U",
      Ữ: "U",
      Ử: "U",
      Ự: "U",
      Ụ: "U",
      Ṳ: "U",
      Ų: "U",
      Ṷ: "U",
      Ṵ: "U",
      Ʉ: "U",
      "Ⓥ": "V",
      Ｖ: "V",
      Ṽ: "V",
      Ṿ: "V",
      Ʋ: "V",
      Ꝟ: "V",
      Ʌ: "V",
      "Ⓦ": "W",
      Ｗ: "W",
      Ẁ: "W",
      Ẃ: "W",
      Ŵ: "W",
      Ẇ: "W",
      Ẅ: "W",
      Ẉ: "W",
      Ⱳ: "W",
      "Ⓧ": "X",
      Ｘ: "X",
      Ẋ: "X",
      Ẍ: "X",
      "Ⓨ": "Y",
      Ｙ: "Y",
      Ỳ: "Y",
      Ý: "Y",
      Ŷ: "Y",
      Ỹ: "Y",
      Ȳ: "Y",
      Ẏ: "Y",
      Ÿ: "Y",
      Ỷ: "Y",
      Ỵ: "Y",
      Ƴ: "Y",
      Ɏ: "Y",
      Ỿ: "Y",
      "Ⓩ": "Z",
      Ｚ: "Z",
      Ź: "Z",
      Ẑ: "Z",
      Ż: "Z",
      Ž: "Z",
      Ẓ: "Z",
      Ẕ: "Z",
      Ƶ: "Z",
      Ȥ: "Z",
      Ɀ: "Z",
      Ⱬ: "Z",
      Ꝣ: "Z",
      "ⓐ": "a",
      ａ: "a",
      ẚ: "a",
      à: "a",
      á: "a",
      â: "a",
      ầ: "a",
      ấ: "a",
      ẫ: "a",
      ẩ: "a",
      ã: "a",
      ā: "a",
      ă: "a",
      ằ: "a",
      ắ: "a",
      ẵ: "a",
      ẳ: "a",
      ȧ: "a",
      ǡ: "a",
      ä: "a",
      ǟ: "a",
      ả: "a",
      å: "a",
      ǻ: "a",
      ǎ: "a",
      ȁ: "a",
      ȃ: "a",
      ạ: "a",
      ậ: "a",
      ặ: "a",
      ḁ: "a",
      ą: "a",
      ⱥ: "a",
      ɐ: "a",
      "ⓑ": "b",
      ｂ: "b",
      ḃ: "b",
      ḅ: "b",
      ḇ: "b",
      ƀ: "b",
      ƃ: "b",
      ɓ: "b",
      "ⓒ": "c",
      ｃ: "c",
      ć: "c",
      ĉ: "c",
      ċ: "c",
      č: "c",
      ç: "c",
      ḉ: "c",
      ƈ: "c",
      ȼ: "c",
      ꜿ: "c",
      ↄ: "c",
      "ⓓ": "d",
      ｄ: "d",
      ḋ: "d",
      ď: "d",
      ḍ: "d",
      ḑ: "d",
      ḓ: "d",
      ḏ: "d",
      đ: "d",
      ƌ: "d",
      ɖ: "d",
      ɗ: "d",
      ꝺ: "d",
      "ⓔ": "e",
      ｅ: "e",
      è: "e",
      é: "e",
      ê: "e",
      ề: "e",
      ế: "e",
      ễ: "e",
      ể: "e",
      ẽ: "e",
      ē: "e",
      ḕ: "e",
      ḗ: "e",
      ĕ: "e",
      ė: "e",
      ë: "e",
      ẻ: "e",
      ě: "e",
      ȅ: "e",
      ȇ: "e",
      ẹ: "e",
      ệ: "e",
      ȩ: "e",
      ḝ: "e",
      ę: "e",
      ḙ: "e",
      ḛ: "e",
      ɇ: "e",
      ɛ: "e",
      ǝ: "e",
      "ⓕ": "f",
      ｆ: "f",
      ḟ: "f",
      ƒ: "f",
      ꝼ: "f",
      "ⓖ": "g",
      ｇ: "g",
      ǵ: "g",
      ĝ: "g",
      ḡ: "g",
      ğ: "g",
      ġ: "g",
      ǧ: "g",
      ģ: "g",
      ǥ: "g",
      ɠ: "g",
      ꞡ: "g",
      ᵹ: "g",
      ꝿ: "g",
      "ⓗ": "h",
      ｈ: "h",
      ĥ: "h",
      ḣ: "h",
      ḧ: "h",
      ȟ: "h",
      ḥ: "h",
      ḩ: "h",
      ḫ: "h",
      ẖ: "h",
      ħ: "h",
      ⱨ: "h",
      ⱶ: "h",
      ɥ: "h",
      "ⓘ": "i",
      ｉ: "i",
      ì: "i",
      í: "i",
      î: "i",
      ĩ: "i",
      ī: "i",
      ĭ: "i",
      ï: "i",
      ḯ: "i",
      ỉ: "i",
      ǐ: "i",
      ȉ: "i",
      ȋ: "i",
      ị: "i",
      į: "i",
      ḭ: "i",
      ɨ: "i",
      ı: "i",
      "ⓙ": "j",
      ｊ: "j",
      ĵ: "j",
      ǰ: "j",
      ɉ: "j",
      "ⓚ": "k",
      ｋ: "k",
      ḱ: "k",
      ǩ: "k",
      ḳ: "k",
      ķ: "k",
      ḵ: "k",
      ƙ: "k",
      ⱪ: "k",
      ꝁ: "k",
      ꝃ: "k",
      ꝅ: "k",
      ꞣ: "k",
      "ⓛ": "l",
      ｌ: "l",
      ŀ: "l",
      ĺ: "l",
      ľ: "l",
      ḷ: "l",
      ḹ: "l",
      ļ: "l",
      ḽ: "l",
      ḻ: "l",
      ſ: "l",
      ł: "l",
      ƚ: "l",
      ɫ: "l",
      ⱡ: "l",
      ꝉ: "l",
      ꞁ: "l",
      ꝇ: "l",
      "ⓜ": "m",
      ｍ: "m",
      ḿ: "m",
      ṁ: "m",
      ṃ: "m",
      ɱ: "m",
      ɯ: "m",
      "ⓝ": "n",
      ｎ: "n",
      ǹ: "n",
      ń: "n",
      ñ: "n",
      ṅ: "n",
      ň: "n",
      ṇ: "n",
      ņ: "n",
      ṋ: "n",
      ṉ: "n",
      ƞ: "n",
      ɲ: "n",
      ŉ: "n",
      ꞑ: "n",
      ꞥ: "n",
      "ⓞ": "o",
      ｏ: "o",
      ò: "o",
      ó: "o",
      ô: "o",
      ồ: "o",
      ố: "o",
      ỗ: "o",
      ổ: "o",
      õ: "o",
      ṍ: "o",
      ȭ: "o",
      ṏ: "o",
      ō: "o",
      ṑ: "o",
      ṓ: "o",
      ŏ: "o",
      ȯ: "o",
      ȱ: "o",
      ö: "o",
      ȫ: "o",
      ỏ: "o",
      ő: "o",
      ǒ: "o",
      ȍ: "o",
      ȏ: "o",
      ơ: "o",
      ờ: "o",
      ớ: "o",
      ỡ: "o",
      ở: "o",
      ợ: "o",
      ọ: "o",
      ộ: "o",
      ǫ: "o",
      ǭ: "o",
      ø: "o",
      ǿ: "o",
      ɔ: "o",
      ꝋ: "o",
      ꝍ: "o",
      ɵ: "o",
      "ⓟ": "p",
      ｐ: "p",
      ṕ: "p",
      ṗ: "p",
      ƥ: "p",
      ᵽ: "p",
      ꝑ: "p",
      ꝓ: "p",
      ꝕ: "p",
      "ⓠ": "q",
      ｑ: "q",
      ɋ: "q",
      ꝗ: "q",
      ꝙ: "q",
      "ⓡ": "r",
      ｒ: "r",
      ŕ: "r",
      ṙ: "r",
      ř: "r",
      ȑ: "r",
      ȓ: "r",
      ṛ: "r",
      ṝ: "r",
      ŗ: "r",
      ṟ: "r",
      ɍ: "r",
      ɽ: "r",
      ꝛ: "r",
      ꞧ: "r",
      ꞃ: "r",
      "ⓢ": "s",
      ｓ: "s",
      ß: "s",
      ś: "s",
      ṥ: "s",
      ŝ: "s",
      ṡ: "s",
      š: "s",
      ṧ: "s",
      ṣ: "s",
      ṩ: "s",
      ș: "s",
      ş: "s",
      ȿ: "s",
      ꞩ: "s",
      ꞅ: "s",
      ẛ: "s",
      "ⓣ": "t",
      ｔ: "t",
      ṫ: "t",
      ẗ: "t",
      ť: "t",
      ṭ: "t",
      ț: "t",
      ţ: "t",
      ṱ: "t",
      ṯ: "t",
      ŧ: "t",
      ƭ: "t",
      ʈ: "t",
      ⱦ: "t",
      ꞇ: "t",
      "ⓤ": "u",
      ｕ: "u",
      ù: "u",
      ú: "u",
      û: "u",
      ũ: "u",
      ṹ: "u",
      ū: "u",
      ṻ: "u",
      ŭ: "u",
      ü: "u",
      ǜ: "u",
      ǘ: "u",
      ǖ: "u",
      ǚ: "u",
      ủ: "u",
      ů: "u",
      ű: "u",
      ǔ: "u",
      ȕ: "u",
      ȗ: "u",
      ư: "u",
      ừ: "u",
      ứ: "u",
      ữ: "u",
      ử: "u",
      ự: "u",
      ụ: "u",
      ṳ: "u",
      ų: "u",
      ṷ: "u",
      ṵ: "u",
      ʉ: "u",
      "ⓥ": "v",
      ｖ: "v",
      ṽ: "v",
      ṿ: "v",
      ʋ: "v",
      ꝟ: "v",
      ʌ: "v",
      "ⓦ": "w",
      ｗ: "w",
      ẁ: "w",
      ẃ: "w",
      ŵ: "w",
      ẇ: "w",
      ẅ: "w",
      ẘ: "w",
      ẉ: "w",
      ⱳ: "w",
      "ⓧ": "x",
      ｘ: "x",
      ẋ: "x",
      ẍ: "x",
      "ⓨ": "y",
      ｙ: "y",
      ỳ: "y",
      ý: "y",
      ŷ: "y",
      ỹ: "y",
      ȳ: "y",
      ẏ: "y",
      ÿ: "y",
      ỷ: "y",
      ẙ: "y",
      ỵ: "y",
      ƴ: "y",
      ɏ: "y",
      ỿ: "y",
      "ⓩ": "z",
      ｚ: "z",
      ź: "z",
      ẑ: "z",
      ż: "z",
      ž: "z",
      ẓ: "z",
      ẕ: "z",
      ƶ: "z",
      ȥ: "z",
      ɀ: "z",
      ⱬ: "z",
      ꝣ: "z",
    };
    exports.StringUtility = StringUtility;
  });

  unwrapExports(utilities);

  var models = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class ModelResult {}
    exports.ModelResult = ModelResult;
    class ExtendedModelResult extends ModelResult {
      constructor(source = null) {
        super();
        if (source) {
          this.text = source.text;
          this.start = source.start;
          this.end = source.end;
          this.typeName = source.typeName;
          this.resolution = source.resolution;
        }
      }
    }
    exports.ExtendedModelResult = ExtendedModelResult;
    class ModelFactoryKey {
      constructor(culture$$1, modelType, options = null) {
        this.culture = culture$$1 ? culture$$1.toLowerCase() : null;
        this.modelType = modelType;
        this.options = options;
      }
      toString() {
        return JSON.stringify(this);
      }
      static fromString(key) {
        return JSON.parse(key);
      }
    }
    class ModelFactory {
      constructor() {
        this.modelFactories = new Map();
      }
      getModel(modelTypeName, culture$$1, fallbackToDefaultCulture, options) {
        let result = this.tryGetModel(modelTypeName, culture$$1, options);
        if (!result.containsModel && fallbackToDefaultCulture) {
          result = this.tryGetModel(
            modelTypeName,
            ModelFactory.fallbackCulture,
            options
          );
        }
        if (result.containsModel) {
          return result.model;
        }
        throw new Error(
          `Could not find Model with the specified configuration: ${culture$$1},${modelTypeName}`
        );
      }
      tryGetModel(modelTypeName, culture$$1, options) {
        culture$$1 = culture.Culture.mapToNearestLanguage(culture$$1);
        let cacheResult = this.getModelFromCache(
          modelTypeName,
          culture$$1,
          options
        );
        if (cacheResult) return { containsModel: true, model: cacheResult };
        let key = this.generateKey(modelTypeName, culture$$1);
        if (this.modelFactories.has(key)) {
          let model = this.modelFactories.get(key)(options);
          this.registerModelInCache(modelTypeName, culture$$1, options, model);
          return { containsModel: true, model: model };
        }
        return { containsModel: false };
      }
      registerModel(modelTypeName, culture$$1, modelCreator) {
        let key = this.generateKey(modelTypeName, culture$$1);
        if (this.modelFactories.has(key)) {
          throw new Error(
            `${culture$$1}-${modelTypeName} has already been registered.`
          );
        }
        this.modelFactories.set(key, modelCreator);
      }
      initializeModels(targetCulture, options) {
        this.modelFactories.forEach((value, key) => {
          let modelFactoryKey = ModelFactoryKey.fromString(key);
          if (
            utilities.StringUtility.isNullOrEmpty(targetCulture) ||
            modelFactoryKey.culture === targetCulture
          ) {
            this.tryGetModel(
              modelFactoryKey.modelType,
              modelFactoryKey.culture,
              modelFactoryKey.options
            );
          }
        });
      }
      generateKey(modelTypeName, culture$$1) {
        return new ModelFactoryKey(culture$$1, modelTypeName).toString();
      }
      getModelFromCache(modelTypeName, culture$$1, options) {
        let key = this.generateCacheKey(modelTypeName, culture$$1, options);
        return ModelFactory.cache.get(key);
      }
      registerModelInCache(modelTypeName, culture$$1, options, model) {
        let key = this.generateCacheKey(modelTypeName, culture$$1, options);
        ModelFactory.cache.set(key, model);
      }
      generateCacheKey(modelTypeName, culture$$1, options) {
        return new ModelFactoryKey(
          culture$$1,
          modelTypeName,
          options
        ).toString();
      }
    }
    ModelFactory.fallbackCulture = culture.Culture.English;
    ModelFactory.cache = new Map();
    exports.ModelFactory = ModelFactory;
  });

  unwrapExports(models);

  var recognizer = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class Recognizer {
      constructor(targetCulture, options, lazyInitialization) {
        this.modelFactory = new models.ModelFactory();
        if (!this.IsValidOptions(options))
          throw new Error(`${options} is not a valid options value.`);
        this.TargetCulture = targetCulture;
        this.Options = options;
        this.InitializeConfiguration();
        if (!lazyInitialization) {
          this.initializeModels(targetCulture, options);
        }
      }
      getModel(modelTypeName, culture, fallbackToDefaultCulture) {
        return this.modelFactory.getModel(
          modelTypeName,
          culture || this.TargetCulture,
          fallbackToDefaultCulture,
          this.Options
        );
      }
      registerModel(modelTypeName, culture, modelCreator) {
        this.modelFactory.registerModel(modelTypeName, culture, modelCreator);
      }
      initializeModels(targetCulture, options) {
        this.modelFactory.initializeModels(targetCulture, options);
      }
    }
    exports.Recognizer = Recognizer;
  });

  unwrapExports(recognizer);

  var extractors = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class ExtractResult {
      static isOverlap(erA, erB) {
        return (
          !(erA.start >= erB.start + erB.length) &&
          !(erB.start >= erA.start + erA.length)
        );
      }
      static isCover(er1, er2) {
        return (
          (er2.start < er1.start &&
            er2.start + er2.length >= er1.start + er1.length) ||
          (er2.start <= er1.start &&
            er2.start + er2.length > er1.start + er1.length)
        );
      }
      static getFromText(source) {
        return {
          start: 0,
          length: source.length,
          text: source,
          type: "custom",
        };
      }
    }
    exports.ExtractResult = ExtractResult;
  });

  unwrapExports(extractors);

  var parsers = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class ParseResult extends extractors.ExtractResult {
      constructor(er) {
        super();
        if (er) {
          this.length = er.length;
          this.start = er.start;
          this.data = er.data;
          this.text = er.text;
          this.type = er.type;
        }
        this.resolutionStr = "";
      }
    }
    exports.ParseResult = ParseResult;
  });

  unwrapExports(parsers);

  var recognizersText = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    exports.Culture = culture.Culture;
    exports.CultureInfo = culture.CultureInfo;

    exports.ModelResult = models.ModelResult;
    exports.ModelFactory = models.ModelFactory;

    exports.Recognizer = recognizer.Recognizer;

    exports.ExtractResult = extractors.ExtractResult;

    exports.ParseResult = parsers.ParseResult;

    exports.FormatUtility = utilities.FormatUtility;
    exports.StringUtility = utilities.StringUtility;
    exports.Match = utilities.Match;
    exports.RegExpUtility = utilities.RegExpUtility;
  });

  unwrapExports(recognizersText);

  var models$2 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class ChoiceModel {
      constructor(parser, extractor) {
        this.extractor = extractor;
        this.parser = parser;
      }
      parse(source) {
        let extractResults = this.extractor.extract(source);
        let parseResults = extractResults.map((r) => this.parser.parse(r));
        return parseResults
          .map((o) => o)
          .map((o) => ({
            start: o.start,
            end: o.start + o.length - 1,
            resolution: this.getResolution(o),
            text: o.text,
            typeName: this.modelTypeName,
          }));
      }
    }
    exports.ChoiceModel = ChoiceModel;
    class BooleanModel extends ChoiceModel {
      constructor() {
        super(...arguments);
        this.modelTypeName = "boolean";
      }
      getResolution(sources) {
        let results = {
          value: sources.value,
          score: sources.data.score,
        };
        if (sources.data.otherMatches) {
          results.otherResults = sources.data.otherMatches.map((o) => ({
            text: o.text,
            value: o.value,
            score: o.data.score,
          }));
        }
        return results;
      }
    }
    exports.BooleanModel = BooleanModel;
  });

  unwrapExports(models$2);

  var constants = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Constants {}
    Constants.SYS_BOOLEAN = "boolean";
    Constants.SYS_BOOLEAN_TRUE = "boolean-true";
    Constants.SYS_BOOLEAN_FALSE = "boolean-false";
    exports.Constants = Constants;
  });

  unwrapExports(constants);

  /*
Breaks a Javascript string into individual user-perceived "characters" 
called extended grapheme clusters by implementing the Unicode UAX-29 standard, version 10.0.0

Usage:
var splitter = new GraphemeSplitter();
//returns an array of strings, one string for each grapheme cluster
var graphemes = splitter.splitGraphemes(string); 

*/
  function GraphemeSplitter() {
    var CR = 0,
      LF = 1,
      Control = 2,
      Extend = 3,
      Regional_Indicator = 4,
      SpacingMark = 5,
      L = 6,
      V = 7,
      T = 8,
      LV = 9,
      LVT = 10,
      Other = 11,
      Prepend = 12,
      E_Base = 13,
      E_Modifier = 14,
      ZWJ = 15,
      Glue_After_Zwj = 16,
      E_Base_GAZ = 17;

    // BreakTypes
    var NotBreak = 0,
      BreakStart = 1,
      Break = 2,
      BreakLastRegional = 3,
      BreakPenultimateRegional = 4;

    function isSurrogate(str, pos) {
      return (
        0xd800 <= str.charCodeAt(pos) &&
        str.charCodeAt(pos) <= 0xdbff &&
        0xdc00 <= str.charCodeAt(pos + 1) &&
        str.charCodeAt(pos + 1) <= 0xdfff
      );
    }

    // Private function, gets a Unicode code point from a JavaScript UTF-16 string
    // handling surrogate pairs appropriately
    function codePointAt(str, idx) {
      if (idx === undefined) {
        idx = 0;
      }
      var code = str.charCodeAt(idx);

      // if a high surrogate
      if (0xd800 <= code && code <= 0xdbff && idx < str.length - 1) {
        var hi = code;
        var low = str.charCodeAt(idx + 1);
        if (0xdc00 <= low && low <= 0xdfff) {
          return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
        }
        return hi;
      }

      // if a low surrogate
      if (0xdc00 <= code && code <= 0xdfff && idx >= 1) {
        var hi = str.charCodeAt(idx - 1);
        var low = code;
        if (0xd800 <= hi && hi <= 0xdbff) {
          return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
        }
        return low;
      }

      //just return the char if an unmatched surrogate half or a
      //single-char codepoint
      return code;
    }

    // Private function, returns whether a break is allowed between the
    // two given grapheme breaking classes
    function shouldBreak(start, mid, end) {
      var all = [start].concat(mid).concat([end]);
      var previous = all[all.length - 2];
      var next = end;

      // Lookahead termintor for:
      // GB10. (E_Base | EBG) Extend* ?	E_Modifier
      var eModifierIndex = all.lastIndexOf(E_Modifier);
      if (
        eModifierIndex > 1 &&
        all.slice(1, eModifierIndex).every(function (c) {
          return c == Extend;
        }) &&
        [Extend, E_Base, E_Base_GAZ].indexOf(start) == -1
      ) {
        return Break;
      }

      // Lookahead termintor for:
      // GB12. ^ (RI RI)* RI	?	RI
      // GB13. [^RI] (RI RI)* RI	?	RI
      var rIIndex = all.lastIndexOf(Regional_Indicator);
      if (
        rIIndex > 0 &&
        all.slice(1, rIIndex).every(function (c) {
          return c == Regional_Indicator;
        }) &&
        [Prepend, Regional_Indicator].indexOf(previous) == -1
      ) {
        if (
          all.filter(function (c) {
            return c == Regional_Indicator;
          }).length %
            2 ==
          1
        ) {
          return BreakLastRegional;
        } else {
          return BreakPenultimateRegional;
        }
      }

      // GB3. CR X LF
      if (previous == CR && next == LF) {
        return NotBreak;
      }
      // GB4. (Control|CR|LF) ÷
      else if (previous == Control || previous == CR || previous == LF) {
        if (
          next == E_Modifier &&
          mid.every(function (c) {
            return c == Extend;
          })
        ) {
          return Break;
        } else {
          return BreakStart;
        }
      }
      // GB5. ÷ (Control|CR|LF)
      else if (next == Control || next == CR || next == LF) {
        return BreakStart;
      }
      // GB6. L X (L|V|LV|LVT)
      else if (
        previous == L &&
        (next == L || next == V || next == LV || next == LVT)
      ) {
        return NotBreak;
      }
      // GB7. (LV|V) X (V|T)
      else if ((previous == LV || previous == V) && (next == V || next == T)) {
        return NotBreak;
      }
      // GB8. (LVT|T) X (T)
      else if ((previous == LVT || previous == T) && next == T) {
        return NotBreak;
      }
      // GB9. X (Extend|ZWJ)
      else if (next == Extend || next == ZWJ) {
        return NotBreak;
      }
      // GB9a. X SpacingMark
      else if (next == SpacingMark) {
        return NotBreak;
      }
      // GB9b. Prepend X
      else if (previous == Prepend) {
        return NotBreak;
      }

      // GB10. (E_Base | EBG) Extend* ?	E_Modifier
      var previousNonExtendIndex =
        all.indexOf(Extend) != -1
          ? all.lastIndexOf(Extend) - 1
          : all.length - 2;
      if (
        [E_Base, E_Base_GAZ].indexOf(all[previousNonExtendIndex]) != -1 &&
        all.slice(previousNonExtendIndex + 1, -1).every(function (c) {
          return c == Extend;
        }) &&
        next == E_Modifier
      ) {
        return NotBreak;
      }

      // GB11. ZWJ ? (Glue_After_Zwj | EBG)
      if (previous == ZWJ && [Glue_After_Zwj, E_Base_GAZ].indexOf(next) != -1) {
        return NotBreak;
      }

      // GB12. ^ (RI RI)* RI ? RI
      // GB13. [^RI] (RI RI)* RI ? RI
      if (mid.indexOf(Regional_Indicator) != -1) {
        return Break;
      }
      if (previous == Regional_Indicator && next == Regional_Indicator) {
        return NotBreak;
      }

      // GB999. Any ? Any
      return BreakStart;
    }

    // Returns the next grapheme break in the string after the given index
    this.nextBreak = function (string, index) {
      if (index === undefined) {
        index = 0;
      }
      if (index < 0) {
        return 0;
      }
      if (index >= string.length - 1) {
        return string.length;
      }
      var prev = getGraphemeBreakProperty(codePointAt(string, index));
      var mid = [];
      for (var i = index + 1; i < string.length; i++) {
        // check for already processed low surrogates
        if (isSurrogate(string, i - 1)) {
          continue;
        }

        var next = getGraphemeBreakProperty(codePointAt(string, i));
        if (shouldBreak(prev, mid, next)) {
          return i;
        }

        mid.push(next);
      }
      return string.length;
    };

    // Breaks the given string into an array of grapheme cluster strings
    this.splitGraphemes = function (str) {
      var res = [];
      var index = 0;
      var brk;
      while ((brk = this.nextBreak(str, index)) < str.length) {
        res.push(str.slice(index, brk));
        index = brk;
      }
      if (index < str.length) {
        res.push(str.slice(index));
      }
      return res;
    };

    // Returns the number of grapheme clusters there are in the given string
    this.countGraphemes = function (str) {
      var count = 0;
      var index = 0;
      var brk;
      while ((brk = this.nextBreak(str, index)) < str.length) {
        index = brk;
        count++;
      }
      if (index < str.length) {
        count++;
      }
      return count;
    };

    //given a Unicode code point, determines this symbol's grapheme break property
    function getGraphemeBreakProperty(code) {
      //grapheme break property for Unicode 10.0.0,
      //taken from http://www.unicode.org/Public/10.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
      //and adapted to JavaScript rules

      if (
        (0x0600 <= code && code <= 0x0605) || // Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
        0x06dd == code || // Cf       ARABIC END OF AYAH
        0x070f == code || // Cf       SYRIAC ABBREVIATION MARK
        0x08e2 == code || // Cf       ARABIC DISPUTED END OF AYAH
        0x0d4e == code || // Lo       MALAYALAM LETTER DOT REPH
        0x110bd == code || // Cf       KAITHI NUMBER SIGN
        (0x111c2 <= code && code <= 0x111c3) || // Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA
        0x11a3a == code || // Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA
        (0x11a86 <= code && code <= 0x11a89) || // Lo   [4] SOYOMBO CLUSTER-INITIAL LETTER RA..SOYOMBO CLUSTER-INITIAL LETTER SA
        0x11d46 == code // Lo       MASARAM GONDI REPHA
      ) {
        return Prepend;
      }
      if (
        0x000d == code // Cc       <control-000D>
      ) {
        return CR;
      }

      if (
        0x000a == code // Cc       <control-000A>
      ) {
        return LF;
      }

      if (
        (0x0000 <= code && code <= 0x0009) || // Cc  [10] <control-0000>..<control-0009>
        (0x000b <= code && code <= 0x000c) || // Cc   [2] <control-000B>..<control-000C>
        (0x000e <= code && code <= 0x001f) || // Cc  [18] <control-000E>..<control-001F>
        (0x007f <= code && code <= 0x009f) || // Cc  [33] <control-007F>..<control-009F>
        0x00ad == code || // Cf       SOFT HYPHEN
        0x061c == code || // Cf       ARABIC LETTER MARK
        0x180e == code || // Cf       MONGOLIAN VOWEL SEPARATOR
        0x200b == code || // Cf       ZERO WIDTH SPACE
        (0x200e <= code && code <= 0x200f) || // Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
        0x2028 == code || // Zl       LINE SEPARATOR
        0x2029 == code || // Zp       PARAGRAPH SEPARATOR
        (0x202a <= code && code <= 0x202e) || // Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
        (0x2060 <= code && code <= 0x2064) || // Cf   [5] WORD JOINER..INVISIBLE PLUS
        0x2065 == code || // Cn       <reserved-2065>
        (0x2066 <= code && code <= 0x206f) || // Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
        (0xd800 <= code && code <= 0xdfff) || // Cs [2048] <surrogate-D800>..<surrogate-DFFF>
        0xfeff == code || // Cf       ZERO WIDTH NO-BREAK SPACE
        (0xfff0 <= code && code <= 0xfff8) || // Cn   [9] <reserved-FFF0>..<reserved-FFF8>
        (0xfff9 <= code && code <= 0xfffb) || // Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
        (0x1bca0 <= code && code <= 0x1bca3) || // Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
        (0x1d173 <= code && code <= 0x1d17a) || // Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
        0xe0000 == code || // Cn       <reserved-E0000>
        0xe0001 == code || // Cf       LANGUAGE TAG
        (0xe0002 <= code && code <= 0xe001f) || // Cn  [30] <reserved-E0002>..<reserved-E001F>
        (0xe0080 <= code && code <= 0xe00ff) || // Cn [128] <reserved-E0080>..<reserved-E00FF>
        (0xe01f0 <= code && code <= 0xe0fff) // Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
      ) {
        return Control;
      }

      if (
        (0x0300 <= code && code <= 0x036f) || // Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
        (0x0483 <= code && code <= 0x0487) || // Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
        (0x0488 <= code && code <= 0x0489) || // Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
        (0x0591 <= code && code <= 0x05bd) || // Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG
        0x05bf == code || // Mn       HEBREW POINT RAFE
        (0x05c1 <= code && code <= 0x05c2) || // Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT
        (0x05c4 <= code && code <= 0x05c5) || // Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT
        0x05c7 == code || // Mn       HEBREW POINT QAMATS QATAN
        (0x0610 <= code && code <= 0x061a) || // Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
        (0x064b <= code && code <= 0x065f) || // Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW
        0x0670 == code || // Mn       ARABIC LETTER SUPERSCRIPT ALEF
        (0x06d6 <= code && code <= 0x06dc) || // Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN
        (0x06df <= code && code <= 0x06e4) || // Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA
        (0x06e7 <= code && code <= 0x06e8) || // Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON
        (0x06ea <= code && code <= 0x06ed) || // Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM
        0x0711 == code || // Mn       SYRIAC LETTER SUPERSCRIPT ALAPH
        (0x0730 <= code && code <= 0x074a) || // Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH
        (0x07a6 <= code && code <= 0x07b0) || // Mn  [11] THAANA ABAFILI..THAANA SUKUN
        (0x07eb <= code && code <= 0x07f3) || // Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE
        (0x0816 <= code && code <= 0x0819) || // Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH
        (0x081b <= code && code <= 0x0823) || // Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A
        (0x0825 <= code && code <= 0x0827) || // Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U
        (0x0829 <= code && code <= 0x082d) || // Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA
        (0x0859 <= code && code <= 0x085b) || // Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK
        (0x08d4 <= code && code <= 0x08e1) || // Mn  [14] ARABIC SMALL HIGH WORD AR-RUB..ARABIC SMALL HIGH SIGN SAFHA
        (0x08e3 <= code && code <= 0x0902) || // Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA
        0x093a == code || // Mn       DEVANAGARI VOWEL SIGN OE
        0x093c == code || // Mn       DEVANAGARI SIGN NUKTA
        (0x0941 <= code && code <= 0x0948) || // Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI
        0x094d == code || // Mn       DEVANAGARI SIGN VIRAMA
        (0x0951 <= code && code <= 0x0957) || // Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE
        (0x0962 <= code && code <= 0x0963) || // Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL
        0x0981 == code || // Mn       BENGALI SIGN CANDRABINDU
        0x09bc == code || // Mn       BENGALI SIGN NUKTA
        0x09be == code || // Mc       BENGALI VOWEL SIGN AA
        (0x09c1 <= code && code <= 0x09c4) || // Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR
        0x09cd == code || // Mn       BENGALI SIGN VIRAMA
        0x09d7 == code || // Mc       BENGALI AU LENGTH MARK
        (0x09e2 <= code && code <= 0x09e3) || // Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL
        (0x0a01 <= code && code <= 0x0a02) || // Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
        0x0a3c == code || // Mn       GURMUKHI SIGN NUKTA
        (0x0a41 <= code && code <= 0x0a42) || // Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU
        (0x0a47 <= code && code <= 0x0a48) || // Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
        (0x0a4b <= code && code <= 0x0a4d) || // Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
        0x0a51 == code || // Mn       GURMUKHI SIGN UDAAT
        (0x0a70 <= code && code <= 0x0a71) || // Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK
        0x0a75 == code || // Mn       GURMUKHI SIGN YAKASH
        (0x0a81 <= code && code <= 0x0a82) || // Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
        0x0abc == code || // Mn       GUJARATI SIGN NUKTA
        (0x0ac1 <= code && code <= 0x0ac5) || // Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E
        (0x0ac7 <= code && code <= 0x0ac8) || // Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI
        0x0acd == code || // Mn       GUJARATI SIGN VIRAMA
        (0x0ae2 <= code && code <= 0x0ae3) || // Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL
        (0x0afa <= code && code <= 0x0aff) || // Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE
        0x0b01 == code || // Mn       ORIYA SIGN CANDRABINDU
        0x0b3c == code || // Mn       ORIYA SIGN NUKTA
        0x0b3e == code || // Mc       ORIYA VOWEL SIGN AA
        0x0b3f == code || // Mn       ORIYA VOWEL SIGN I
        (0x0b41 <= code && code <= 0x0b44) || // Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR
        0x0b4d == code || // Mn       ORIYA SIGN VIRAMA
        0x0b56 == code || // Mn       ORIYA AI LENGTH MARK
        0x0b57 == code || // Mc       ORIYA AU LENGTH MARK
        (0x0b62 <= code && code <= 0x0b63) || // Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL
        0x0b82 == code || // Mn       TAMIL SIGN ANUSVARA
        0x0bbe == code || // Mc       TAMIL VOWEL SIGN AA
        0x0bc0 == code || // Mn       TAMIL VOWEL SIGN II
        0x0bcd == code || // Mn       TAMIL SIGN VIRAMA
        0x0bd7 == code || // Mc       TAMIL AU LENGTH MARK
        0x0c00 == code || // Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE
        (0x0c3e <= code && code <= 0x0c40) || // Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II
        (0x0c46 <= code && code <= 0x0c48) || // Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI
        (0x0c4a <= code && code <= 0x0c4d) || // Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA
        (0x0c55 <= code && code <= 0x0c56) || // Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK
        (0x0c62 <= code && code <= 0x0c63) || // Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL
        0x0c81 == code || // Mn       KANNADA SIGN CANDRABINDU
        0x0cbc == code || // Mn       KANNADA SIGN NUKTA
        0x0cbf == code || // Mn       KANNADA VOWEL SIGN I
        0x0cc2 == code || // Mc       KANNADA VOWEL SIGN UU
        0x0cc6 == code || // Mn       KANNADA VOWEL SIGN E
        (0x0ccc <= code && code <= 0x0ccd) || // Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA
        (0x0cd5 <= code && code <= 0x0cd6) || // Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK
        (0x0ce2 <= code && code <= 0x0ce3) || // Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL
        (0x0d00 <= code && code <= 0x0d01) || // Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU
        (0x0d3b <= code && code <= 0x0d3c) || // Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA
        0x0d3e == code || // Mc       MALAYALAM VOWEL SIGN AA
        (0x0d41 <= code && code <= 0x0d44) || // Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR
        0x0d4d == code || // Mn       MALAYALAM SIGN VIRAMA
        0x0d57 == code || // Mc       MALAYALAM AU LENGTH MARK
        (0x0d62 <= code && code <= 0x0d63) || // Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL
        0x0dca == code || // Mn       SINHALA SIGN AL-LAKUNA
        0x0dcf == code || // Mc       SINHALA VOWEL SIGN AELA-PILLA
        (0x0dd2 <= code && code <= 0x0dd4) || // Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA
        0x0dd6 == code || // Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA
        0x0ddf == code || // Mc       SINHALA VOWEL SIGN GAYANUKITTA
        0x0e31 == code || // Mn       THAI CHARACTER MAI HAN-AKAT
        (0x0e34 <= code && code <= 0x0e3a) || // Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
        (0x0e47 <= code && code <= 0x0e4e) || // Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
        0x0eb1 == code || // Mn       LAO VOWEL SIGN MAI KAN
        (0x0eb4 <= code && code <= 0x0eb9) || // Mn   [6] LAO VOWEL SIGN I..LAO VOWEL SIGN UU
        (0x0ebb <= code && code <= 0x0ebc) || // Mn   [2] LAO VOWEL SIGN MAI KON..LAO SEMIVOWEL SIGN LO
        (0x0ec8 <= code && code <= 0x0ecd) || // Mn   [6] LAO TONE MAI EK..LAO NIGGAHITA
        (0x0f18 <= code && code <= 0x0f19) || // Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
        0x0f35 == code || // Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
        0x0f37 == code || // Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
        0x0f39 == code || // Mn       TIBETAN MARK TSA -PHRU
        (0x0f71 <= code && code <= 0x0f7e) || // Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
        (0x0f80 <= code && code <= 0x0f84) || // Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
        (0x0f86 <= code && code <= 0x0f87) || // Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
        (0x0f8d <= code && code <= 0x0f97) || // Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
        (0x0f99 <= code && code <= 0x0fbc) || // Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
        0x0fc6 == code || // Mn       TIBETAN SYMBOL PADMA GDAN
        (0x102d <= code && code <= 0x1030) || // Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
        (0x1032 <= code && code <= 0x1037) || // Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
        (0x1039 <= code && code <= 0x103a) || // Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
        (0x103d <= code && code <= 0x103e) || // Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
        (0x1058 <= code && code <= 0x1059) || // Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
        (0x105e <= code && code <= 0x1060) || // Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
        (0x1071 <= code && code <= 0x1074) || // Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
        0x1082 == code || // Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
        (0x1085 <= code && code <= 0x1086) || // Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
        0x108d == code || // Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
        0x109d == code || // Mn       MYANMAR VOWEL SIGN AITON AI
        (0x135d <= code && code <= 0x135f) || // Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
        (0x1712 <= code && code <= 0x1714) || // Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
        (0x1732 <= code && code <= 0x1734) || // Mn   [3] HANUNOO VOWEL SIGN I..HANUNOO SIGN PAMUDPOD
        (0x1752 <= code && code <= 0x1753) || // Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
        (0x1772 <= code && code <= 0x1773) || // Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
        (0x17b4 <= code && code <= 0x17b5) || // Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
        (0x17b7 <= code && code <= 0x17bd) || // Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
        0x17c6 == code || // Mn       KHMER SIGN NIKAHIT
        (0x17c9 <= code && code <= 0x17d3) || // Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
        0x17dd == code || // Mn       KHMER SIGN ATTHACAN
        (0x180b <= code && code <= 0x180d) || // Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
        (0x1885 <= code && code <= 0x1886) || // Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA
        0x18a9 == code || // Mn       MONGOLIAN LETTER ALI GALI DAGALGA
        (0x1920 <= code && code <= 0x1922) || // Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
        (0x1927 <= code && code <= 0x1928) || // Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
        0x1932 == code || // Mn       LIMBU SMALL LETTER ANUSVARA
        (0x1939 <= code && code <= 0x193b) || // Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
        (0x1a17 <= code && code <= 0x1a18) || // Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
        0x1a1b == code || // Mn       BUGINESE VOWEL SIGN AE
        0x1a56 == code || // Mn       TAI THAM CONSONANT SIGN MEDIAL LA
        (0x1a58 <= code && code <= 0x1a5e) || // Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
        0x1a60 == code || // Mn       TAI THAM SIGN SAKOT
        0x1a62 == code || // Mn       TAI THAM VOWEL SIGN MAI SAT
        (0x1a65 <= code && code <= 0x1a6c) || // Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
        (0x1a73 <= code && code <= 0x1a7c) || // Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
        0x1a7f == code || // Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
        (0x1ab0 <= code && code <= 0x1abd) || // Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
        0x1abe == code || // Me       COMBINING PARENTHESES OVERLAY
        (0x1b00 <= code && code <= 0x1b03) || // Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
        0x1b34 == code || // Mn       BALINESE SIGN REREKAN
        (0x1b36 <= code && code <= 0x1b3a) || // Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
        0x1b3c == code || // Mn       BALINESE VOWEL SIGN LA LENGA
        0x1b42 == code || // Mn       BALINESE VOWEL SIGN PEPET
        (0x1b6b <= code && code <= 0x1b73) || // Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
        (0x1b80 <= code && code <= 0x1b81) || // Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
        (0x1ba2 <= code && code <= 0x1ba5) || // Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
        (0x1ba8 <= code && code <= 0x1ba9) || // Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
        (0x1bab <= code && code <= 0x1bad) || // Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
        0x1be6 == code || // Mn       BATAK SIGN TOMPI
        (0x1be8 <= code && code <= 0x1be9) || // Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
        0x1bed == code || // Mn       BATAK VOWEL SIGN KARO O
        (0x1bef <= code && code <= 0x1bf1) || // Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
        (0x1c2c <= code && code <= 0x1c33) || // Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
        (0x1c36 <= code && code <= 0x1c37) || // Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
        (0x1cd0 <= code && code <= 0x1cd2) || // Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
        (0x1cd4 <= code && code <= 0x1ce0) || // Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
        (0x1ce2 <= code && code <= 0x1ce8) || // Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
        0x1ced == code || // Mn       VEDIC SIGN TIRYAK
        0x1cf4 == code || // Mn       VEDIC TONE CANDRA ABOVE
        (0x1cf8 <= code && code <= 0x1cf9) || // Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
        (0x1dc0 <= code && code <= 0x1df9) || // Mn  [58] COMBINING DOTTED GRAVE ACCENT..COMBINING WIDE INVERTED BRIDGE BELOW
        (0x1dfb <= code && code <= 0x1dff) || // Mn   [5] COMBINING DELETION MARK..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
        0x200c == code || // Cf       ZERO WIDTH NON-JOINER
        (0x20d0 <= code && code <= 0x20dc) || // Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
        (0x20dd <= code && code <= 0x20e0) || // Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
        0x20e1 == code || // Mn       COMBINING LEFT RIGHT ARROW ABOVE
        (0x20e2 <= code && code <= 0x20e4) || // Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
        (0x20e5 <= code && code <= 0x20f0) || // Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
        (0x2cef <= code && code <= 0x2cf1) || // Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS
        0x2d7f == code || // Mn       TIFINAGH CONSONANT JOINER
        (0x2de0 <= code && code <= 0x2dff) || // Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS
        (0x302a <= code && code <= 0x302d) || // Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
        (0x302e <= code && code <= 0x302f) || // Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK
        (0x3099 <= code && code <= 0x309a) || // Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
        0xa66f == code || // Mn       COMBINING CYRILLIC VZMET
        (0xa670 <= code && code <= 0xa672) || // Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN
        (0xa674 <= code && code <= 0xa67d) || // Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK
        (0xa69e <= code && code <= 0xa69f) || // Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E
        (0xa6f0 <= code && code <= 0xa6f1) || // Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS
        0xa802 == code || // Mn       SYLOTI NAGRI SIGN DVISVARA
        0xa806 == code || // Mn       SYLOTI NAGRI SIGN HASANTA
        0xa80b == code || // Mn       SYLOTI NAGRI SIGN ANUSVARA
        (0xa825 <= code && code <= 0xa826) || // Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E
        (0xa8c4 <= code && code <= 0xa8c5) || // Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU
        (0xa8e0 <= code && code <= 0xa8f1) || // Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA
        (0xa926 <= code && code <= 0xa92d) || // Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU
        (0xa947 <= code && code <= 0xa951) || // Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R
        (0xa980 <= code && code <= 0xa982) || // Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR
        0xa9b3 == code || // Mn       JAVANESE SIGN CECAK TELU
        (0xa9b6 <= code && code <= 0xa9b9) || // Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT
        0xa9bc == code || // Mn       JAVANESE VOWEL SIGN PEPET
        0xa9e5 == code || // Mn       MYANMAR SIGN SHAN SAW
        (0xaa29 <= code && code <= 0xaa2e) || // Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE
        (0xaa31 <= code && code <= 0xaa32) || // Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE
        (0xaa35 <= code && code <= 0xaa36) || // Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA
        0xaa43 == code || // Mn       CHAM CONSONANT SIGN FINAL NG
        0xaa4c == code || // Mn       CHAM CONSONANT SIGN FINAL M
        0xaa7c == code || // Mn       MYANMAR SIGN TAI LAING TONE-2
        0xaab0 == code || // Mn       TAI VIET MAI KANG
        (0xaab2 <= code && code <= 0xaab4) || // Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U
        (0xaab7 <= code && code <= 0xaab8) || // Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
        (0xaabe <= code && code <= 0xaabf) || // Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
        0xaac1 == code || // Mn       TAI VIET TONE MAI THO
        (0xaaec <= code && code <= 0xaaed) || // Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
        0xaaf6 == code || // Mn       MEETEI MAYEK VIRAMA
        0xabe5 == code || // Mn       MEETEI MAYEK VOWEL SIGN ANAP
        0xabe8 == code || // Mn       MEETEI MAYEK VOWEL SIGN UNAP
        0xabed == code || // Mn       MEETEI MAYEK APUN IYEK
        0xfb1e == code || // Mn       HEBREW POINT JUDEO-SPANISH VARIKA
        (0xfe00 <= code && code <= 0xfe0f) || // Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
        (0xfe20 <= code && code <= 0xfe2f) || // Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
        (0xff9e <= code && code <= 0xff9f) || // Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
        0x101fd == code || // Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
        0x102e0 == code || // Mn       COPTIC EPACT THOUSANDS MARK
        (0x10376 <= code && code <= 0x1037a) || // Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
        (0x10a01 <= code && code <= 0x10a03) || // Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
        (0x10a05 <= code && code <= 0x10a06) || // Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
        (0x10a0c <= code && code <= 0x10a0f) || // Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
        (0x10a38 <= code && code <= 0x10a3a) || // Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
        0x10a3f == code || // Mn       KHAROSHTHI VIRAMA
        (0x10ae5 <= code && code <= 0x10ae6) || // Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
        0x11001 == code || // Mn       BRAHMI SIGN ANUSVARA
        (0x11038 <= code && code <= 0x11046) || // Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
        (0x1107f <= code && code <= 0x11081) || // Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
        (0x110b3 <= code && code <= 0x110b6) || // Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
        (0x110b9 <= code && code <= 0x110ba) || // Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
        (0x11100 <= code && code <= 0x11102) || // Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
        (0x11127 <= code && code <= 0x1112b) || // Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
        (0x1112d <= code && code <= 0x11134) || // Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
        0x11173 == code || // Mn       MAHAJANI SIGN NUKTA
        (0x11180 <= code && code <= 0x11181) || // Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
        (0x111b6 <= code && code <= 0x111be) || // Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
        (0x111ca <= code && code <= 0x111cc) || // Mn   [3] SHARADA SIGN NUKTA..SHARADA EXTRA SHORT VOWEL MARK
        (0x1122f <= code && code <= 0x11231) || // Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
        0x11234 == code || // Mn       KHOJKI SIGN ANUSVARA
        (0x11236 <= code && code <= 0x11237) || // Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
        0x1123e == code || // Mn       KHOJKI SIGN SUKUN
        0x112df == code || // Mn       KHUDAWADI SIGN ANUSVARA
        (0x112e3 <= code && code <= 0x112ea) || // Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
        (0x11300 <= code && code <= 0x11301) || // Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
        0x1133c == code || // Mn       GRANTHA SIGN NUKTA
        0x1133e == code || // Mc       GRANTHA VOWEL SIGN AA
        0x11340 == code || // Mn       GRANTHA VOWEL SIGN II
        0x11357 == code || // Mc       GRANTHA AU LENGTH MARK
        (0x11366 <= code && code <= 0x1136c) || // Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
        (0x11370 <= code && code <= 0x11374) || // Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
        (0x11438 <= code && code <= 0x1143f) || // Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI
        (0x11442 <= code && code <= 0x11444) || // Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA
        0x11446 == code || // Mn       NEWA SIGN NUKTA
        0x114b0 == code || // Mc       TIRHUTA VOWEL SIGN AA
        (0x114b3 <= code && code <= 0x114b8) || // Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
        0x114ba == code || // Mn       TIRHUTA VOWEL SIGN SHORT E
        0x114bd == code || // Mc       TIRHUTA VOWEL SIGN SHORT O
        (0x114bf <= code && code <= 0x114c0) || // Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
        (0x114c2 <= code && code <= 0x114c3) || // Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
        0x115af == code || // Mc       SIDDHAM VOWEL SIGN AA
        (0x115b2 <= code && code <= 0x115b5) || // Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
        (0x115bc <= code && code <= 0x115bd) || // Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
        (0x115bf <= code && code <= 0x115c0) || // Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
        (0x115dc <= code && code <= 0x115dd) || // Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
        (0x11633 <= code && code <= 0x1163a) || // Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
        0x1163d == code || // Mn       MODI SIGN ANUSVARA
        (0x1163f <= code && code <= 0x11640) || // Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
        0x116ab == code || // Mn       TAKRI SIGN ANUSVARA
        0x116ad == code || // Mn       TAKRI VOWEL SIGN AA
        (0x116b0 <= code && code <= 0x116b5) || // Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
        0x116b7 == code || // Mn       TAKRI SIGN NUKTA
        (0x1171d <= code && code <= 0x1171f) || // Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
        (0x11722 <= code && code <= 0x11725) || // Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
        (0x11727 <= code && code <= 0x1172b) || // Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
        (0x11a01 <= code && code <= 0x11a06) || // Mn   [6] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL SIGN O
        (0x11a09 <= code && code <= 0x11a0a) || // Mn   [2] ZANABAZAR SQUARE VOWEL SIGN REVERSED I..ZANABAZAR SQUARE VOWEL LENGTH MARK
        (0x11a33 <= code && code <= 0x11a38) || // Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA
        (0x11a3b <= code && code <= 0x11a3e) || // Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA
        0x11a47 == code || // Mn       ZANABAZAR SQUARE SUBJOINER
        (0x11a51 <= code && code <= 0x11a56) || // Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE
        (0x11a59 <= code && code <= 0x11a5b) || // Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK
        (0x11a8a <= code && code <= 0x11a96) || // Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA
        (0x11a98 <= code && code <= 0x11a99) || // Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER
        (0x11c30 <= code && code <= 0x11c36) || // Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L
        (0x11c38 <= code && code <= 0x11c3d) || // Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA
        0x11c3f == code || // Mn       BHAIKSUKI SIGN VIRAMA
        (0x11c92 <= code && code <= 0x11ca7) || // Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA
        (0x11caa <= code && code <= 0x11cb0) || // Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA
        (0x11cb2 <= code && code <= 0x11cb3) || // Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E
        (0x11cb5 <= code && code <= 0x11cb6) || // Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU
        (0x11d31 <= code && code <= 0x11d36) || // Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R
        0x11d3a == code || // Mn       MASARAM GONDI VOWEL SIGN E
        (0x11d3c <= code && code <= 0x11d3d) || // Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O
        (0x11d3f <= code && code <= 0x11d45) || // Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA
        0x11d47 == code || // Mn       MASARAM GONDI RA-KARA
        (0x16af0 <= code && code <= 0x16af4) || // Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
        (0x16b30 <= code && code <= 0x16b36) || // Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
        (0x16f8f <= code && code <= 0x16f92) || // Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
        (0x1bc9d <= code && code <= 0x1bc9e) || // Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
        0x1d165 == code || // Mc       MUSICAL SYMBOL COMBINING STEM
        (0x1d167 <= code && code <= 0x1d169) || // Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
        (0x1d16e <= code && code <= 0x1d172) || // Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
        (0x1d17b <= code && code <= 0x1d182) || // Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
        (0x1d185 <= code && code <= 0x1d18b) || // Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
        (0x1d1aa <= code && code <= 0x1d1ad) || // Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
        (0x1d242 <= code && code <= 0x1d244) || // Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
        (0x1da00 <= code && code <= 0x1da36) || // Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
        (0x1da3b <= code && code <= 0x1da6c) || // Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
        0x1da75 == code || // Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
        0x1da84 == code || // Mn       SIGNWRITING LOCATION HEAD NECK
        (0x1da9b <= code && code <= 0x1da9f) || // Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
        (0x1daa1 <= code && code <= 0x1daaf) || // Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
        (0x1e000 <= code && code <= 0x1e006) || // Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE
        (0x1e008 <= code && code <= 0x1e018) || // Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU
        (0x1e01b <= code && code <= 0x1e021) || // Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI
        (0x1e023 <= code && code <= 0x1e024) || // Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS
        (0x1e026 <= code && code <= 0x1e02a) || // Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA
        (0x1e8d0 <= code && code <= 0x1e8d6) || // Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
        (0x1e944 <= code && code <= 0x1e94a) || // Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
        (0xe0020 <= code && code <= 0xe007f) || // Cf  [96] TAG SPACE..CANCEL TAG
        (0xe0100 <= code && code <= 0xe01ef) // Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
      ) {
        return Extend;
      }

      if (
        0x1f1e6 <= code &&
        code <= 0x1f1ff // So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
      ) {
        return Regional_Indicator;
      }

      if (
        0x0903 == code || // Mc       DEVANAGARI SIGN VISARGA
        0x093b == code || // Mc       DEVANAGARI VOWEL SIGN OOE
        (0x093e <= code && code <= 0x0940) || // Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II
        (0x0949 <= code && code <= 0x094c) || // Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU
        (0x094e <= code && code <= 0x094f) || // Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW
        (0x0982 <= code && code <= 0x0983) || // Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA
        (0x09bf <= code && code <= 0x09c0) || // Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II
        (0x09c7 <= code && code <= 0x09c8) || // Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI
        (0x09cb <= code && code <= 0x09cc) || // Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU
        0x0a03 == code || // Mc       GURMUKHI SIGN VISARGA
        (0x0a3e <= code && code <= 0x0a40) || // Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II
        0x0a83 == code || // Mc       GUJARATI SIGN VISARGA
        (0x0abe <= code && code <= 0x0ac0) || // Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II
        0x0ac9 == code || // Mc       GUJARATI VOWEL SIGN CANDRA O
        (0x0acb <= code && code <= 0x0acc) || // Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU
        (0x0b02 <= code && code <= 0x0b03) || // Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA
        0x0b40 == code || // Mc       ORIYA VOWEL SIGN II
        (0x0b47 <= code && code <= 0x0b48) || // Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI
        (0x0b4b <= code && code <= 0x0b4c) || // Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU
        0x0bbf == code || // Mc       TAMIL VOWEL SIGN I
        (0x0bc1 <= code && code <= 0x0bc2) || // Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU
        (0x0bc6 <= code && code <= 0x0bc8) || // Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI
        (0x0bca <= code && code <= 0x0bcc) || // Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU
        (0x0c01 <= code && code <= 0x0c03) || // Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA
        (0x0c41 <= code && code <= 0x0c44) || // Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR
        (0x0c82 <= code && code <= 0x0c83) || // Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA
        0x0cbe == code || // Mc       KANNADA VOWEL SIGN AA
        (0x0cc0 <= code && code <= 0x0cc1) || // Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U
        (0x0cc3 <= code && code <= 0x0cc4) || // Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR
        (0x0cc7 <= code && code <= 0x0cc8) || // Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI
        (0x0cca <= code && code <= 0x0ccb) || // Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO
        (0x0d02 <= code && code <= 0x0d03) || // Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA
        (0x0d3f <= code && code <= 0x0d40) || // Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II
        (0x0d46 <= code && code <= 0x0d48) || // Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI
        (0x0d4a <= code && code <= 0x0d4c) || // Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU
        (0x0d82 <= code && code <= 0x0d83) || // Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
        (0x0dd0 <= code && code <= 0x0dd1) || // Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA
        (0x0dd8 <= code && code <= 0x0dde) || // Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA
        (0x0df2 <= code && code <= 0x0df3) || // Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA
        0x0e33 == code || // Lo       THAI CHARACTER SARA AM
        0x0eb3 == code || // Lo       LAO VOWEL SIGN AM
        (0x0f3e <= code && code <= 0x0f3f) || // Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
        0x0f7f == code || // Mc       TIBETAN SIGN RNAM BCAD
        0x1031 == code || // Mc       MYANMAR VOWEL SIGN E
        (0x103b <= code && code <= 0x103c) || // Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
        (0x1056 <= code && code <= 0x1057) || // Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
        0x1084 == code || // Mc       MYANMAR VOWEL SIGN SHAN E
        0x17b6 == code || // Mc       KHMER VOWEL SIGN AA
        (0x17be <= code && code <= 0x17c5) || // Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
        (0x17c7 <= code && code <= 0x17c8) || // Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
        (0x1923 <= code && code <= 0x1926) || // Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
        (0x1929 <= code && code <= 0x192b) || // Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
        (0x1930 <= code && code <= 0x1931) || // Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
        (0x1933 <= code && code <= 0x1938) || // Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
        (0x1a19 <= code && code <= 0x1a1a) || // Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
        0x1a55 == code || // Mc       TAI THAM CONSONANT SIGN MEDIAL RA
        0x1a57 == code || // Mc       TAI THAM CONSONANT SIGN LA TANG LAI
        (0x1a6d <= code && code <= 0x1a72) || // Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
        0x1b04 == code || // Mc       BALINESE SIGN BISAH
        0x1b35 == code || // Mc       BALINESE VOWEL SIGN TEDUNG
        0x1b3b == code || // Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
        (0x1b3d <= code && code <= 0x1b41) || // Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
        (0x1b43 <= code && code <= 0x1b44) || // Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
        0x1b82 == code || // Mc       SUNDANESE SIGN PANGWISAD
        0x1ba1 == code || // Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
        (0x1ba6 <= code && code <= 0x1ba7) || // Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
        0x1baa == code || // Mc       SUNDANESE SIGN PAMAAEH
        0x1be7 == code || // Mc       BATAK VOWEL SIGN E
        (0x1bea <= code && code <= 0x1bec) || // Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
        0x1bee == code || // Mc       BATAK VOWEL SIGN U
        (0x1bf2 <= code && code <= 0x1bf3) || // Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
        (0x1c24 <= code && code <= 0x1c2b) || // Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
        (0x1c34 <= code && code <= 0x1c35) || // Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
        0x1ce1 == code || // Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
        (0x1cf2 <= code && code <= 0x1cf3) || // Mc   [2] VEDIC SIGN ARDHAVISARGA..VEDIC SIGN ROTATED ARDHAVISARGA
        0x1cf7 == code || // Mc       VEDIC SIGN ATIKRAMA
        (0xa823 <= code && code <= 0xa824) || // Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I
        0xa827 == code || // Mc       SYLOTI NAGRI VOWEL SIGN OO
        (0xa880 <= code && code <= 0xa881) || // Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA
        (0xa8b4 <= code && code <= 0xa8c3) || // Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU
        (0xa952 <= code && code <= 0xa953) || // Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA
        0xa983 == code || // Mc       JAVANESE SIGN WIGNYAN
        (0xa9b4 <= code && code <= 0xa9b5) || // Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG
        (0xa9ba <= code && code <= 0xa9bb) || // Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE
        (0xa9bd <= code && code <= 0xa9c0) || // Mc   [4] JAVANESE CONSONANT SIGN KERET..JAVANESE PANGKON
        (0xaa2f <= code && code <= 0xaa30) || // Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI
        (0xaa33 <= code && code <= 0xaa34) || // Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA
        0xaa4d == code || // Mc       CHAM CONSONANT SIGN FINAL H
        0xaaeb == code || // Mc       MEETEI MAYEK VOWEL SIGN II
        (0xaaee <= code && code <= 0xaaef) || // Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
        0xaaf5 == code || // Mc       MEETEI MAYEK VOWEL SIGN VISARGA
        (0xabe3 <= code && code <= 0xabe4) || // Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
        (0xabe6 <= code && code <= 0xabe7) || // Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
        (0xabe9 <= code && code <= 0xabea) || // Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
        0xabec == code || // Mc       MEETEI MAYEK LUM IYEK
        0x11000 == code || // Mc       BRAHMI SIGN CANDRABINDU
        0x11002 == code || // Mc       BRAHMI SIGN VISARGA
        0x11082 == code || // Mc       KAITHI SIGN VISARGA
        (0x110b0 <= code && code <= 0x110b2) || // Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
        (0x110b7 <= code && code <= 0x110b8) || // Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
        0x1112c == code || // Mc       CHAKMA VOWEL SIGN E
        0x11182 == code || // Mc       SHARADA SIGN VISARGA
        (0x111b3 <= code && code <= 0x111b5) || // Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
        (0x111bf <= code && code <= 0x111c0) || // Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
        (0x1122c <= code && code <= 0x1122e) || // Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
        (0x11232 <= code && code <= 0x11233) || // Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
        0x11235 == code || // Mc       KHOJKI SIGN VIRAMA
        (0x112e0 <= code && code <= 0x112e2) || // Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
        (0x11302 <= code && code <= 0x11303) || // Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
        0x1133f == code || // Mc       GRANTHA VOWEL SIGN I
        (0x11341 <= code && code <= 0x11344) || // Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
        (0x11347 <= code && code <= 0x11348) || // Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
        (0x1134b <= code && code <= 0x1134d) || // Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
        (0x11362 <= code && code <= 0x11363) || // Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
        (0x11435 <= code && code <= 0x11437) || // Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II
        (0x11440 <= code && code <= 0x11441) || // Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU
        0x11445 == code || // Mc       NEWA SIGN VISARGA
        (0x114b1 <= code && code <= 0x114b2) || // Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
        0x114b9 == code || // Mc       TIRHUTA VOWEL SIGN E
        (0x114bb <= code && code <= 0x114bc) || // Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
        0x114be == code || // Mc       TIRHUTA VOWEL SIGN AU
        0x114c1 == code || // Mc       TIRHUTA SIGN VISARGA
        (0x115b0 <= code && code <= 0x115b1) || // Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
        (0x115b8 <= code && code <= 0x115bb) || // Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
        0x115be == code || // Mc       SIDDHAM SIGN VISARGA
        (0x11630 <= code && code <= 0x11632) || // Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
        (0x1163b <= code && code <= 0x1163c) || // Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
        0x1163e == code || // Mc       MODI SIGN VISARGA
        0x116ac == code || // Mc       TAKRI SIGN VISARGA
        (0x116ae <= code && code <= 0x116af) || // Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
        0x116b6 == code || // Mc       TAKRI SIGN VIRAMA
        (0x11720 <= code && code <= 0x11721) || // Mc   [2] AHOM VOWEL SIGN A..AHOM VOWEL SIGN AA
        0x11726 == code || // Mc       AHOM VOWEL SIGN E
        (0x11a07 <= code && code <= 0x11a08) || // Mc   [2] ZANABAZAR SQUARE VOWEL SIGN AI..ZANABAZAR SQUARE VOWEL SIGN AU
        0x11a39 == code || // Mc       ZANABAZAR SQUARE SIGN VISARGA
        (0x11a57 <= code && code <= 0x11a58) || // Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU
        0x11a97 == code || // Mc       SOYOMBO SIGN VISARGA
        0x11c2f == code || // Mc       BHAIKSUKI VOWEL SIGN AA
        0x11c3e == code || // Mc       BHAIKSUKI SIGN VISARGA
        0x11ca9 == code || // Mc       MARCHEN SUBJOINED LETTER YA
        0x11cb1 == code || // Mc       MARCHEN VOWEL SIGN I
        0x11cb4 == code || // Mc       MARCHEN VOWEL SIGN O
        (0x16f51 <= code && code <= 0x16f7e) || // Mc  [46] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN NG
        0x1d166 == code || // Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
        0x1d16d == code // Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
      ) {
        return SpacingMark;
      }

      if (
        (0x1100 <= code && code <= 0x115f) || // Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
        (0xa960 <= code && code <= 0xa97c) // Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH
      ) {
        return L;
      }

      if (
        (0x1160 <= code && code <= 0x11a7) || // Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
        (0xd7b0 <= code && code <= 0xd7c6) // Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
      ) {
        return V;
      }

      if (
        (0x11a8 <= code && code <= 0x11ff) || // Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
        (0xd7cb <= code && code <= 0xd7fb) // Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
      ) {
        return T;
      }

      if (
        0xac00 == code || // Lo       HANGUL SYLLABLE GA
        0xac1c == code || // Lo       HANGUL SYLLABLE GAE
        0xac38 == code || // Lo       HANGUL SYLLABLE GYA
        0xac54 == code || // Lo       HANGUL SYLLABLE GYAE
        0xac70 == code || // Lo       HANGUL SYLLABLE GEO
        0xac8c == code || // Lo       HANGUL SYLLABLE GE
        0xaca8 == code || // Lo       HANGUL SYLLABLE GYEO
        0xacc4 == code || // Lo       HANGUL SYLLABLE GYE
        0xace0 == code || // Lo       HANGUL SYLLABLE GO
        0xacfc == code || // Lo       HANGUL SYLLABLE GWA
        0xad18 == code || // Lo       HANGUL SYLLABLE GWAE
        0xad34 == code || // Lo       HANGUL SYLLABLE GOE
        0xad50 == code || // Lo       HANGUL SYLLABLE GYO
        0xad6c == code || // Lo       HANGUL SYLLABLE GU
        0xad88 == code || // Lo       HANGUL SYLLABLE GWEO
        0xada4 == code || // Lo       HANGUL SYLLABLE GWE
        0xadc0 == code || // Lo       HANGUL SYLLABLE GWI
        0xaddc == code || // Lo       HANGUL SYLLABLE GYU
        0xadf8 == code || // Lo       HANGUL SYLLABLE GEU
        0xae14 == code || // Lo       HANGUL SYLLABLE GYI
        0xae30 == code || // Lo       HANGUL SYLLABLE GI
        0xae4c == code || // Lo       HANGUL SYLLABLE GGA
        0xae68 == code || // Lo       HANGUL SYLLABLE GGAE
        0xae84 == code || // Lo       HANGUL SYLLABLE GGYA
        0xaea0 == code || // Lo       HANGUL SYLLABLE GGYAE
        0xaebc == code || // Lo       HANGUL SYLLABLE GGEO
        0xaed8 == code || // Lo       HANGUL SYLLABLE GGE
        0xaef4 == code || // Lo       HANGUL SYLLABLE GGYEO
        0xaf10 == code || // Lo       HANGUL SYLLABLE GGYE
        0xaf2c == code || // Lo       HANGUL SYLLABLE GGO
        0xaf48 == code || // Lo       HANGUL SYLLABLE GGWA
        0xaf64 == code || // Lo       HANGUL SYLLABLE GGWAE
        0xaf80 == code || // Lo       HANGUL SYLLABLE GGOE
        0xaf9c == code || // Lo       HANGUL SYLLABLE GGYO
        0xafb8 == code || // Lo       HANGUL SYLLABLE GGU
        0xafd4 == code || // Lo       HANGUL SYLLABLE GGWEO
        0xaff0 == code || // Lo       HANGUL SYLLABLE GGWE
        0xb00c == code || // Lo       HANGUL SYLLABLE GGWI
        0xb028 == code || // Lo       HANGUL SYLLABLE GGYU
        0xb044 == code || // Lo       HANGUL SYLLABLE GGEU
        0xb060 == code || // Lo       HANGUL SYLLABLE GGYI
        0xb07c == code || // Lo       HANGUL SYLLABLE GGI
        0xb098 == code || // Lo       HANGUL SYLLABLE NA
        0xb0b4 == code || // Lo       HANGUL SYLLABLE NAE
        0xb0d0 == code || // Lo       HANGUL SYLLABLE NYA
        0xb0ec == code || // Lo       HANGUL SYLLABLE NYAE
        0xb108 == code || // Lo       HANGUL SYLLABLE NEO
        0xb124 == code || // Lo       HANGUL SYLLABLE NE
        0xb140 == code || // Lo       HANGUL SYLLABLE NYEO
        0xb15c == code || // Lo       HANGUL SYLLABLE NYE
        0xb178 == code || // Lo       HANGUL SYLLABLE NO
        0xb194 == code || // Lo       HANGUL SYLLABLE NWA
        0xb1b0 == code || // Lo       HANGUL SYLLABLE NWAE
        0xb1cc == code || // Lo       HANGUL SYLLABLE NOE
        0xb1e8 == code || // Lo       HANGUL SYLLABLE NYO
        0xb204 == code || // Lo       HANGUL SYLLABLE NU
        0xb220 == code || // Lo       HANGUL SYLLABLE NWEO
        0xb23c == code || // Lo       HANGUL SYLLABLE NWE
        0xb258 == code || // Lo       HANGUL SYLLABLE NWI
        0xb274 == code || // Lo       HANGUL SYLLABLE NYU
        0xb290 == code || // Lo       HANGUL SYLLABLE NEU
        0xb2ac == code || // Lo       HANGUL SYLLABLE NYI
        0xb2c8 == code || // Lo       HANGUL SYLLABLE NI
        0xb2e4 == code || // Lo       HANGUL SYLLABLE DA
        0xb300 == code || // Lo       HANGUL SYLLABLE DAE
        0xb31c == code || // Lo       HANGUL SYLLABLE DYA
        0xb338 == code || // Lo       HANGUL SYLLABLE DYAE
        0xb354 == code || // Lo       HANGUL SYLLABLE DEO
        0xb370 == code || // Lo       HANGUL SYLLABLE DE
        0xb38c == code || // Lo       HANGUL SYLLABLE DYEO
        0xb3a8 == code || // Lo       HANGUL SYLLABLE DYE
        0xb3c4 == code || // Lo       HANGUL SYLLABLE DO
        0xb3e0 == code || // Lo       HANGUL SYLLABLE DWA
        0xb3fc == code || // Lo       HANGUL SYLLABLE DWAE
        0xb418 == code || // Lo       HANGUL SYLLABLE DOE
        0xb434 == code || // Lo       HANGUL SYLLABLE DYO
        0xb450 == code || // Lo       HANGUL SYLLABLE DU
        0xb46c == code || // Lo       HANGUL SYLLABLE DWEO
        0xb488 == code || // Lo       HANGUL SYLLABLE DWE
        0xb4a4 == code || // Lo       HANGUL SYLLABLE DWI
        0xb4c0 == code || // Lo       HANGUL SYLLABLE DYU
        0xb4dc == code || // Lo       HANGUL SYLLABLE DEU
        0xb4f8 == code || // Lo       HANGUL SYLLABLE DYI
        0xb514 == code || // Lo       HANGUL SYLLABLE DI
        0xb530 == code || // Lo       HANGUL SYLLABLE DDA
        0xb54c == code || // Lo       HANGUL SYLLABLE DDAE
        0xb568 == code || // Lo       HANGUL SYLLABLE DDYA
        0xb584 == code || // Lo       HANGUL SYLLABLE DDYAE
        0xb5a0 == code || // Lo       HANGUL SYLLABLE DDEO
        0xb5bc == code || // Lo       HANGUL SYLLABLE DDE
        0xb5d8 == code || // Lo       HANGUL SYLLABLE DDYEO
        0xb5f4 == code || // Lo       HANGUL SYLLABLE DDYE
        0xb610 == code || // Lo       HANGUL SYLLABLE DDO
        0xb62c == code || // Lo       HANGUL SYLLABLE DDWA
        0xb648 == code || // Lo       HANGUL SYLLABLE DDWAE
        0xb664 == code || // Lo       HANGUL SYLLABLE DDOE
        0xb680 == code || // Lo       HANGUL SYLLABLE DDYO
        0xb69c == code || // Lo       HANGUL SYLLABLE DDU
        0xb6b8 == code || // Lo       HANGUL SYLLABLE DDWEO
        0xb6d4 == code || // Lo       HANGUL SYLLABLE DDWE
        0xb6f0 == code || // Lo       HANGUL SYLLABLE DDWI
        0xb70c == code || // Lo       HANGUL SYLLABLE DDYU
        0xb728 == code || // Lo       HANGUL SYLLABLE DDEU
        0xb744 == code || // Lo       HANGUL SYLLABLE DDYI
        0xb760 == code || // Lo       HANGUL SYLLABLE DDI
        0xb77c == code || // Lo       HANGUL SYLLABLE RA
        0xb798 == code || // Lo       HANGUL SYLLABLE RAE
        0xb7b4 == code || // Lo       HANGUL SYLLABLE RYA
        0xb7d0 == code || // Lo       HANGUL SYLLABLE RYAE
        0xb7ec == code || // Lo       HANGUL SYLLABLE REO
        0xb808 == code || // Lo       HANGUL SYLLABLE RE
        0xb824 == code || // Lo       HANGUL SYLLABLE RYEO
        0xb840 == code || // Lo       HANGUL SYLLABLE RYE
        0xb85c == code || // Lo       HANGUL SYLLABLE RO
        0xb878 == code || // Lo       HANGUL SYLLABLE RWA
        0xb894 == code || // Lo       HANGUL SYLLABLE RWAE
        0xb8b0 == code || // Lo       HANGUL SYLLABLE ROE
        0xb8cc == code || // Lo       HANGUL SYLLABLE RYO
        0xb8e8 == code || // Lo       HANGUL SYLLABLE RU
        0xb904 == code || // Lo       HANGUL SYLLABLE RWEO
        0xb920 == code || // Lo       HANGUL SYLLABLE RWE
        0xb93c == code || // Lo       HANGUL SYLLABLE RWI
        0xb958 == code || // Lo       HANGUL SYLLABLE RYU
        0xb974 == code || // Lo       HANGUL SYLLABLE REU
        0xb990 == code || // Lo       HANGUL SYLLABLE RYI
        0xb9ac == code || // Lo       HANGUL SYLLABLE RI
        0xb9c8 == code || // Lo       HANGUL SYLLABLE MA
        0xb9e4 == code || // Lo       HANGUL SYLLABLE MAE
        0xba00 == code || // Lo       HANGUL SYLLABLE MYA
        0xba1c == code || // Lo       HANGUL SYLLABLE MYAE
        0xba38 == code || // Lo       HANGUL SYLLABLE MEO
        0xba54 == code || // Lo       HANGUL SYLLABLE ME
        0xba70 == code || // Lo       HANGUL SYLLABLE MYEO
        0xba8c == code || // Lo       HANGUL SYLLABLE MYE
        0xbaa8 == code || // Lo       HANGUL SYLLABLE MO
        0xbac4 == code || // Lo       HANGUL SYLLABLE MWA
        0xbae0 == code || // Lo       HANGUL SYLLABLE MWAE
        0xbafc == code || // Lo       HANGUL SYLLABLE MOE
        0xbb18 == code || // Lo       HANGUL SYLLABLE MYO
        0xbb34 == code || // Lo       HANGUL SYLLABLE MU
        0xbb50 == code || // Lo       HANGUL SYLLABLE MWEO
        0xbb6c == code || // Lo       HANGUL SYLLABLE MWE
        0xbb88 == code || // Lo       HANGUL SYLLABLE MWI
        0xbba4 == code || // Lo       HANGUL SYLLABLE MYU
        0xbbc0 == code || // Lo       HANGUL SYLLABLE MEU
        0xbbdc == code || // Lo       HANGUL SYLLABLE MYI
        0xbbf8 == code || // Lo       HANGUL SYLLABLE MI
        0xbc14 == code || // Lo       HANGUL SYLLABLE BA
        0xbc30 == code || // Lo       HANGUL SYLLABLE BAE
        0xbc4c == code || // Lo       HANGUL SYLLABLE BYA
        0xbc68 == code || // Lo       HANGUL SYLLABLE BYAE
        0xbc84 == code || // Lo       HANGUL SYLLABLE BEO
        0xbca0 == code || // Lo       HANGUL SYLLABLE BE
        0xbcbc == code || // Lo       HANGUL SYLLABLE BYEO
        0xbcd8 == code || // Lo       HANGUL SYLLABLE BYE
        0xbcf4 == code || // Lo       HANGUL SYLLABLE BO
        0xbd10 == code || // Lo       HANGUL SYLLABLE BWA
        0xbd2c == code || // Lo       HANGUL SYLLABLE BWAE
        0xbd48 == code || // Lo       HANGUL SYLLABLE BOE
        0xbd64 == code || // Lo       HANGUL SYLLABLE BYO
        0xbd80 == code || // Lo       HANGUL SYLLABLE BU
        0xbd9c == code || // Lo       HANGUL SYLLABLE BWEO
        0xbdb8 == code || // Lo       HANGUL SYLLABLE BWE
        0xbdd4 == code || // Lo       HANGUL SYLLABLE BWI
        0xbdf0 == code || // Lo       HANGUL SYLLABLE BYU
        0xbe0c == code || // Lo       HANGUL SYLLABLE BEU
        0xbe28 == code || // Lo       HANGUL SYLLABLE BYI
        0xbe44 == code || // Lo       HANGUL SYLLABLE BI
        0xbe60 == code || // Lo       HANGUL SYLLABLE BBA
        0xbe7c == code || // Lo       HANGUL SYLLABLE BBAE
        0xbe98 == code || // Lo       HANGUL SYLLABLE BBYA
        0xbeb4 == code || // Lo       HANGUL SYLLABLE BBYAE
        0xbed0 == code || // Lo       HANGUL SYLLABLE BBEO
        0xbeec == code || // Lo       HANGUL SYLLABLE BBE
        0xbf08 == code || // Lo       HANGUL SYLLABLE BBYEO
        0xbf24 == code || // Lo       HANGUL SYLLABLE BBYE
        0xbf40 == code || // Lo       HANGUL SYLLABLE BBO
        0xbf5c == code || // Lo       HANGUL SYLLABLE BBWA
        0xbf78 == code || // Lo       HANGUL SYLLABLE BBWAE
        0xbf94 == code || // Lo       HANGUL SYLLABLE BBOE
        0xbfb0 == code || // Lo       HANGUL SYLLABLE BBYO
        0xbfcc == code || // Lo       HANGUL SYLLABLE BBU
        0xbfe8 == code || // Lo       HANGUL SYLLABLE BBWEO
        0xc004 == code || // Lo       HANGUL SYLLABLE BBWE
        0xc020 == code || // Lo       HANGUL SYLLABLE BBWI
        0xc03c == code || // Lo       HANGUL SYLLABLE BBYU
        0xc058 == code || // Lo       HANGUL SYLLABLE BBEU
        0xc074 == code || // Lo       HANGUL SYLLABLE BBYI
        0xc090 == code || // Lo       HANGUL SYLLABLE BBI
        0xc0ac == code || // Lo       HANGUL SYLLABLE SA
        0xc0c8 == code || // Lo       HANGUL SYLLABLE SAE
        0xc0e4 == code || // Lo       HANGUL SYLLABLE SYA
        0xc100 == code || // Lo       HANGUL SYLLABLE SYAE
        0xc11c == code || // Lo       HANGUL SYLLABLE SEO
        0xc138 == code || // Lo       HANGUL SYLLABLE SE
        0xc154 == code || // Lo       HANGUL SYLLABLE SYEO
        0xc170 == code || // Lo       HANGUL SYLLABLE SYE
        0xc18c == code || // Lo       HANGUL SYLLABLE SO
        0xc1a8 == code || // Lo       HANGUL SYLLABLE SWA
        0xc1c4 == code || // Lo       HANGUL SYLLABLE SWAE
        0xc1e0 == code || // Lo       HANGUL SYLLABLE SOE
        0xc1fc == code || // Lo       HANGUL SYLLABLE SYO
        0xc218 == code || // Lo       HANGUL SYLLABLE SU
        0xc234 == code || // Lo       HANGUL SYLLABLE SWEO
        0xc250 == code || // Lo       HANGUL SYLLABLE SWE
        0xc26c == code || // Lo       HANGUL SYLLABLE SWI
        0xc288 == code || // Lo       HANGUL SYLLABLE SYU
        0xc2a4 == code || // Lo       HANGUL SYLLABLE SEU
        0xc2c0 == code || // Lo       HANGUL SYLLABLE SYI
        0xc2dc == code || // Lo       HANGUL SYLLABLE SI
        0xc2f8 == code || // Lo       HANGUL SYLLABLE SSA
        0xc314 == code || // Lo       HANGUL SYLLABLE SSAE
        0xc330 == code || // Lo       HANGUL SYLLABLE SSYA
        0xc34c == code || // Lo       HANGUL SYLLABLE SSYAE
        0xc368 == code || // Lo       HANGUL SYLLABLE SSEO
        0xc384 == code || // Lo       HANGUL SYLLABLE SSE
        0xc3a0 == code || // Lo       HANGUL SYLLABLE SSYEO
        0xc3bc == code || // Lo       HANGUL SYLLABLE SSYE
        0xc3d8 == code || // Lo       HANGUL SYLLABLE SSO
        0xc3f4 == code || // Lo       HANGUL SYLLABLE SSWA
        0xc410 == code || // Lo       HANGUL SYLLABLE SSWAE
        0xc42c == code || // Lo       HANGUL SYLLABLE SSOE
        0xc448 == code || // Lo       HANGUL SYLLABLE SSYO
        0xc464 == code || // Lo       HANGUL SYLLABLE SSU
        0xc480 == code || // Lo       HANGUL SYLLABLE SSWEO
        0xc49c == code || // Lo       HANGUL SYLLABLE SSWE
        0xc4b8 == code || // Lo       HANGUL SYLLABLE SSWI
        0xc4d4 == code || // Lo       HANGUL SYLLABLE SSYU
        0xc4f0 == code || // Lo       HANGUL SYLLABLE SSEU
        0xc50c == code || // Lo       HANGUL SYLLABLE SSYI
        0xc528 == code || // Lo       HANGUL SYLLABLE SSI
        0xc544 == code || // Lo       HANGUL SYLLABLE A
        0xc560 == code || // Lo       HANGUL SYLLABLE AE
        0xc57c == code || // Lo       HANGUL SYLLABLE YA
        0xc598 == code || // Lo       HANGUL SYLLABLE YAE
        0xc5b4 == code || // Lo       HANGUL SYLLABLE EO
        0xc5d0 == code || // Lo       HANGUL SYLLABLE E
        0xc5ec == code || // Lo       HANGUL SYLLABLE YEO
        0xc608 == code || // Lo       HANGUL SYLLABLE YE
        0xc624 == code || // Lo       HANGUL SYLLABLE O
        0xc640 == code || // Lo       HANGUL SYLLABLE WA
        0xc65c == code || // Lo       HANGUL SYLLABLE WAE
        0xc678 == code || // Lo       HANGUL SYLLABLE OE
        0xc694 == code || // Lo       HANGUL SYLLABLE YO
        0xc6b0 == code || // Lo       HANGUL SYLLABLE U
        0xc6cc == code || // Lo       HANGUL SYLLABLE WEO
        0xc6e8 == code || // Lo       HANGUL SYLLABLE WE
        0xc704 == code || // Lo       HANGUL SYLLABLE WI
        0xc720 == code || // Lo       HANGUL SYLLABLE YU
        0xc73c == code || // Lo       HANGUL SYLLABLE EU
        0xc758 == code || // Lo       HANGUL SYLLABLE YI
        0xc774 == code || // Lo       HANGUL SYLLABLE I
        0xc790 == code || // Lo       HANGUL SYLLABLE JA
        0xc7ac == code || // Lo       HANGUL SYLLABLE JAE
        0xc7c8 == code || // Lo       HANGUL SYLLABLE JYA
        0xc7e4 == code || // Lo       HANGUL SYLLABLE JYAE
        0xc800 == code || // Lo       HANGUL SYLLABLE JEO
        0xc81c == code || // Lo       HANGUL SYLLABLE JE
        0xc838 == code || // Lo       HANGUL SYLLABLE JYEO
        0xc854 == code || // Lo       HANGUL SYLLABLE JYE
        0xc870 == code || // Lo       HANGUL SYLLABLE JO
        0xc88c == code || // Lo       HANGUL SYLLABLE JWA
        0xc8a8 == code || // Lo       HANGUL SYLLABLE JWAE
        0xc8c4 == code || // Lo       HANGUL SYLLABLE JOE
        0xc8e0 == code || // Lo       HANGUL SYLLABLE JYO
        0xc8fc == code || // Lo       HANGUL SYLLABLE JU
        0xc918 == code || // Lo       HANGUL SYLLABLE JWEO
        0xc934 == code || // Lo       HANGUL SYLLABLE JWE
        0xc950 == code || // Lo       HANGUL SYLLABLE JWI
        0xc96c == code || // Lo       HANGUL SYLLABLE JYU
        0xc988 == code || // Lo       HANGUL SYLLABLE JEU
        0xc9a4 == code || // Lo       HANGUL SYLLABLE JYI
        0xc9c0 == code || // Lo       HANGUL SYLLABLE JI
        0xc9dc == code || // Lo       HANGUL SYLLABLE JJA
        0xc9f8 == code || // Lo       HANGUL SYLLABLE JJAE
        0xca14 == code || // Lo       HANGUL SYLLABLE JJYA
        0xca30 == code || // Lo       HANGUL SYLLABLE JJYAE
        0xca4c == code || // Lo       HANGUL SYLLABLE JJEO
        0xca68 == code || // Lo       HANGUL SYLLABLE JJE
        0xca84 == code || // Lo       HANGUL SYLLABLE JJYEO
        0xcaa0 == code || // Lo       HANGUL SYLLABLE JJYE
        0xcabc == code || // Lo       HANGUL SYLLABLE JJO
        0xcad8 == code || // Lo       HANGUL SYLLABLE JJWA
        0xcaf4 == code || // Lo       HANGUL SYLLABLE JJWAE
        0xcb10 == code || // Lo       HANGUL SYLLABLE JJOE
        0xcb2c == code || // Lo       HANGUL SYLLABLE JJYO
        0xcb48 == code || // Lo       HANGUL SYLLABLE JJU
        0xcb64 == code || // Lo       HANGUL SYLLABLE JJWEO
        0xcb80 == code || // Lo       HANGUL SYLLABLE JJWE
        0xcb9c == code || // Lo       HANGUL SYLLABLE JJWI
        0xcbb8 == code || // Lo       HANGUL SYLLABLE JJYU
        0xcbd4 == code || // Lo       HANGUL SYLLABLE JJEU
        0xcbf0 == code || // Lo       HANGUL SYLLABLE JJYI
        0xcc0c == code || // Lo       HANGUL SYLLABLE JJI
        0xcc28 == code || // Lo       HANGUL SYLLABLE CA
        0xcc44 == code || // Lo       HANGUL SYLLABLE CAE
        0xcc60 == code || // Lo       HANGUL SYLLABLE CYA
        0xcc7c == code || // Lo       HANGUL SYLLABLE CYAE
        0xcc98 == code || // Lo       HANGUL SYLLABLE CEO
        0xccb4 == code || // Lo       HANGUL SYLLABLE CE
        0xccd0 == code || // Lo       HANGUL SYLLABLE CYEO
        0xccec == code || // Lo       HANGUL SYLLABLE CYE
        0xcd08 == code || // Lo       HANGUL SYLLABLE CO
        0xcd24 == code || // Lo       HANGUL SYLLABLE CWA
        0xcd40 == code || // Lo       HANGUL SYLLABLE CWAE
        0xcd5c == code || // Lo       HANGUL SYLLABLE COE
        0xcd78 == code || // Lo       HANGUL SYLLABLE CYO
        0xcd94 == code || // Lo       HANGUL SYLLABLE CU
        0xcdb0 == code || // Lo       HANGUL SYLLABLE CWEO
        0xcdcc == code || // Lo       HANGUL SYLLABLE CWE
        0xcde8 == code || // Lo       HANGUL SYLLABLE CWI
        0xce04 == code || // Lo       HANGUL SYLLABLE CYU
        0xce20 == code || // Lo       HANGUL SYLLABLE CEU
        0xce3c == code || // Lo       HANGUL SYLLABLE CYI
        0xce58 == code || // Lo       HANGUL SYLLABLE CI
        0xce74 == code || // Lo       HANGUL SYLLABLE KA
        0xce90 == code || // Lo       HANGUL SYLLABLE KAE
        0xceac == code || // Lo       HANGUL SYLLABLE KYA
        0xcec8 == code || // Lo       HANGUL SYLLABLE KYAE
        0xcee4 == code || // Lo       HANGUL SYLLABLE KEO
        0xcf00 == code || // Lo       HANGUL SYLLABLE KE
        0xcf1c == code || // Lo       HANGUL SYLLABLE KYEO
        0xcf38 == code || // Lo       HANGUL SYLLABLE KYE
        0xcf54 == code || // Lo       HANGUL SYLLABLE KO
        0xcf70 == code || // Lo       HANGUL SYLLABLE KWA
        0xcf8c == code || // Lo       HANGUL SYLLABLE KWAE
        0xcfa8 == code || // Lo       HANGUL SYLLABLE KOE
        0xcfc4 == code || // Lo       HANGUL SYLLABLE KYO
        0xcfe0 == code || // Lo       HANGUL SYLLABLE KU
        0xcffc == code || // Lo       HANGUL SYLLABLE KWEO
        0xd018 == code || // Lo       HANGUL SYLLABLE KWE
        0xd034 == code || // Lo       HANGUL SYLLABLE KWI
        0xd050 == code || // Lo       HANGUL SYLLABLE KYU
        0xd06c == code || // Lo       HANGUL SYLLABLE KEU
        0xd088 == code || // Lo       HANGUL SYLLABLE KYI
        0xd0a4 == code || // Lo       HANGUL SYLLABLE KI
        0xd0c0 == code || // Lo       HANGUL SYLLABLE TA
        0xd0dc == code || // Lo       HANGUL SYLLABLE TAE
        0xd0f8 == code || // Lo       HANGUL SYLLABLE TYA
        0xd114 == code || // Lo       HANGUL SYLLABLE TYAE
        0xd130 == code || // Lo       HANGUL SYLLABLE TEO
        0xd14c == code || // Lo       HANGUL SYLLABLE TE
        0xd168 == code || // Lo       HANGUL SYLLABLE TYEO
        0xd184 == code || // Lo       HANGUL SYLLABLE TYE
        0xd1a0 == code || // Lo       HANGUL SYLLABLE TO
        0xd1bc == code || // Lo       HANGUL SYLLABLE TWA
        0xd1d8 == code || // Lo       HANGUL SYLLABLE TWAE
        0xd1f4 == code || // Lo       HANGUL SYLLABLE TOE
        0xd210 == code || // Lo       HANGUL SYLLABLE TYO
        0xd22c == code || // Lo       HANGUL SYLLABLE TU
        0xd248 == code || // Lo       HANGUL SYLLABLE TWEO
        0xd264 == code || // Lo       HANGUL SYLLABLE TWE
        0xd280 == code || // Lo       HANGUL SYLLABLE TWI
        0xd29c == code || // Lo       HANGUL SYLLABLE TYU
        0xd2b8 == code || // Lo       HANGUL SYLLABLE TEU
        0xd2d4 == code || // Lo       HANGUL SYLLABLE TYI
        0xd2f0 == code || // Lo       HANGUL SYLLABLE TI
        0xd30c == code || // Lo       HANGUL SYLLABLE PA
        0xd328 == code || // Lo       HANGUL SYLLABLE PAE
        0xd344 == code || // Lo       HANGUL SYLLABLE PYA
        0xd360 == code || // Lo       HANGUL SYLLABLE PYAE
        0xd37c == code || // Lo       HANGUL SYLLABLE PEO
        0xd398 == code || // Lo       HANGUL SYLLABLE PE
        0xd3b4 == code || // Lo       HANGUL SYLLABLE PYEO
        0xd3d0 == code || // Lo       HANGUL SYLLABLE PYE
        0xd3ec == code || // Lo       HANGUL SYLLABLE PO
        0xd408 == code || // Lo       HANGUL SYLLABLE PWA
        0xd424 == code || // Lo       HANGUL SYLLABLE PWAE
        0xd440 == code || // Lo       HANGUL SYLLABLE POE
        0xd45c == code || // Lo       HANGUL SYLLABLE PYO
        0xd478 == code || // Lo       HANGUL SYLLABLE PU
        0xd494 == code || // Lo       HANGUL SYLLABLE PWEO
        0xd4b0 == code || // Lo       HANGUL SYLLABLE PWE
        0xd4cc == code || // Lo       HANGUL SYLLABLE PWI
        0xd4e8 == code || // Lo       HANGUL SYLLABLE PYU
        0xd504 == code || // Lo       HANGUL SYLLABLE PEU
        0xd520 == code || // Lo       HANGUL SYLLABLE PYI
        0xd53c == code || // Lo       HANGUL SYLLABLE PI
        0xd558 == code || // Lo       HANGUL SYLLABLE HA
        0xd574 == code || // Lo       HANGUL SYLLABLE HAE
        0xd590 == code || // Lo       HANGUL SYLLABLE HYA
        0xd5ac == code || // Lo       HANGUL SYLLABLE HYAE
        0xd5c8 == code || // Lo       HANGUL SYLLABLE HEO
        0xd5e4 == code || // Lo       HANGUL SYLLABLE HE
        0xd600 == code || // Lo       HANGUL SYLLABLE HYEO
        0xd61c == code || // Lo       HANGUL SYLLABLE HYE
        0xd638 == code || // Lo       HANGUL SYLLABLE HO
        0xd654 == code || // Lo       HANGUL SYLLABLE HWA
        0xd670 == code || // Lo       HANGUL SYLLABLE HWAE
        0xd68c == code || // Lo       HANGUL SYLLABLE HOE
        0xd6a8 == code || // Lo       HANGUL SYLLABLE HYO
        0xd6c4 == code || // Lo       HANGUL SYLLABLE HU
        0xd6e0 == code || // Lo       HANGUL SYLLABLE HWEO
        0xd6fc == code || // Lo       HANGUL SYLLABLE HWE
        0xd718 == code || // Lo       HANGUL SYLLABLE HWI
        0xd734 == code || // Lo       HANGUL SYLLABLE HYU
        0xd750 == code || // Lo       HANGUL SYLLABLE HEU
        0xd76c == code || // Lo       HANGUL SYLLABLE HYI
        0xd788 == code // Lo       HANGUL SYLLABLE HI
      ) {
        return LV;
      }

      if (
        (0xac01 <= code && code <= 0xac1b) || // Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
        (0xac1d <= code && code <= 0xac37) || // Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
        (0xac39 <= code && code <= 0xac53) || // Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
        (0xac55 <= code && code <= 0xac6f) || // Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
        (0xac71 <= code && code <= 0xac8b) || // Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
        (0xac8d <= code && code <= 0xaca7) || // Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
        (0xaca9 <= code && code <= 0xacc3) || // Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
        (0xacc5 <= code && code <= 0xacdf) || // Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
        (0xace1 <= code && code <= 0xacfb) || // Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
        (0xacfd <= code && code <= 0xad17) || // Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
        (0xad19 <= code && code <= 0xad33) || // Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
        (0xad35 <= code && code <= 0xad4f) || // Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
        (0xad51 <= code && code <= 0xad6b) || // Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
        (0xad6d <= code && code <= 0xad87) || // Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
        (0xad89 <= code && code <= 0xada3) || // Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
        (0xada5 <= code && code <= 0xadbf) || // Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
        (0xadc1 <= code && code <= 0xaddb) || // Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
        (0xaddd <= code && code <= 0xadf7) || // Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
        (0xadf9 <= code && code <= 0xae13) || // Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
        (0xae15 <= code && code <= 0xae2f) || // Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
        (0xae31 <= code && code <= 0xae4b) || // Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
        (0xae4d <= code && code <= 0xae67) || // Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
        (0xae69 <= code && code <= 0xae83) || // Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
        (0xae85 <= code && code <= 0xae9f) || // Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
        (0xaea1 <= code && code <= 0xaebb) || // Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
        (0xaebd <= code && code <= 0xaed7) || // Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
        (0xaed9 <= code && code <= 0xaef3) || // Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
        (0xaef5 <= code && code <= 0xaf0f) || // Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
        (0xaf11 <= code && code <= 0xaf2b) || // Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
        (0xaf2d <= code && code <= 0xaf47) || // Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
        (0xaf49 <= code && code <= 0xaf63) || // Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
        (0xaf65 <= code && code <= 0xaf7f) || // Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
        (0xaf81 <= code && code <= 0xaf9b) || // Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
        (0xaf9d <= code && code <= 0xafb7) || // Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
        (0xafb9 <= code && code <= 0xafd3) || // Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
        (0xafd5 <= code && code <= 0xafef) || // Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
        (0xaff1 <= code && code <= 0xb00b) || // Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
        (0xb00d <= code && code <= 0xb027) || // Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
        (0xb029 <= code && code <= 0xb043) || // Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
        (0xb045 <= code && code <= 0xb05f) || // Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
        (0xb061 <= code && code <= 0xb07b) || // Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
        (0xb07d <= code && code <= 0xb097) || // Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
        (0xb099 <= code && code <= 0xb0b3) || // Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
        (0xb0b5 <= code && code <= 0xb0cf) || // Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
        (0xb0d1 <= code && code <= 0xb0eb) || // Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
        (0xb0ed <= code && code <= 0xb107) || // Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
        (0xb109 <= code && code <= 0xb123) || // Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
        (0xb125 <= code && code <= 0xb13f) || // Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
        (0xb141 <= code && code <= 0xb15b) || // Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
        (0xb15d <= code && code <= 0xb177) || // Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
        (0xb179 <= code && code <= 0xb193) || // Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
        (0xb195 <= code && code <= 0xb1af) || // Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
        (0xb1b1 <= code && code <= 0xb1cb) || // Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
        (0xb1cd <= code && code <= 0xb1e7) || // Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
        (0xb1e9 <= code && code <= 0xb203) || // Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
        (0xb205 <= code && code <= 0xb21f) || // Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
        (0xb221 <= code && code <= 0xb23b) || // Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
        (0xb23d <= code && code <= 0xb257) || // Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
        (0xb259 <= code && code <= 0xb273) || // Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
        (0xb275 <= code && code <= 0xb28f) || // Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
        (0xb291 <= code && code <= 0xb2ab) || // Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
        (0xb2ad <= code && code <= 0xb2c7) || // Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
        (0xb2c9 <= code && code <= 0xb2e3) || // Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
        (0xb2e5 <= code && code <= 0xb2ff) || // Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
        (0xb301 <= code && code <= 0xb31b) || // Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
        (0xb31d <= code && code <= 0xb337) || // Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
        (0xb339 <= code && code <= 0xb353) || // Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
        (0xb355 <= code && code <= 0xb36f) || // Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
        (0xb371 <= code && code <= 0xb38b) || // Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
        (0xb38d <= code && code <= 0xb3a7) || // Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
        (0xb3a9 <= code && code <= 0xb3c3) || // Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
        (0xb3c5 <= code && code <= 0xb3df) || // Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
        (0xb3e1 <= code && code <= 0xb3fb) || // Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
        (0xb3fd <= code && code <= 0xb417) || // Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
        (0xb419 <= code && code <= 0xb433) || // Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
        (0xb435 <= code && code <= 0xb44f) || // Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
        (0xb451 <= code && code <= 0xb46b) || // Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
        (0xb46d <= code && code <= 0xb487) || // Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
        (0xb489 <= code && code <= 0xb4a3) || // Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
        (0xb4a5 <= code && code <= 0xb4bf) || // Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
        (0xb4c1 <= code && code <= 0xb4db) || // Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
        (0xb4dd <= code && code <= 0xb4f7) || // Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
        (0xb4f9 <= code && code <= 0xb513) || // Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
        (0xb515 <= code && code <= 0xb52f) || // Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
        (0xb531 <= code && code <= 0xb54b) || // Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
        (0xb54d <= code && code <= 0xb567) || // Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
        (0xb569 <= code && code <= 0xb583) || // Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
        (0xb585 <= code && code <= 0xb59f) || // Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
        (0xb5a1 <= code && code <= 0xb5bb) || // Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
        (0xb5bd <= code && code <= 0xb5d7) || // Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
        (0xb5d9 <= code && code <= 0xb5f3) || // Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
        (0xb5f5 <= code && code <= 0xb60f) || // Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
        (0xb611 <= code && code <= 0xb62b) || // Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
        (0xb62d <= code && code <= 0xb647) || // Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
        (0xb649 <= code && code <= 0xb663) || // Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
        (0xb665 <= code && code <= 0xb67f) || // Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
        (0xb681 <= code && code <= 0xb69b) || // Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
        (0xb69d <= code && code <= 0xb6b7) || // Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
        (0xb6b9 <= code && code <= 0xb6d3) || // Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
        (0xb6d5 <= code && code <= 0xb6ef) || // Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
        (0xb6f1 <= code && code <= 0xb70b) || // Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
        (0xb70d <= code && code <= 0xb727) || // Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
        (0xb729 <= code && code <= 0xb743) || // Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
        (0xb745 <= code && code <= 0xb75f) || // Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
        (0xb761 <= code && code <= 0xb77b) || // Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
        (0xb77d <= code && code <= 0xb797) || // Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
        (0xb799 <= code && code <= 0xb7b3) || // Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
        (0xb7b5 <= code && code <= 0xb7cf) || // Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
        (0xb7d1 <= code && code <= 0xb7eb) || // Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
        (0xb7ed <= code && code <= 0xb807) || // Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
        (0xb809 <= code && code <= 0xb823) || // Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
        (0xb825 <= code && code <= 0xb83f) || // Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
        (0xb841 <= code && code <= 0xb85b) || // Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
        (0xb85d <= code && code <= 0xb877) || // Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
        (0xb879 <= code && code <= 0xb893) || // Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
        (0xb895 <= code && code <= 0xb8af) || // Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
        (0xb8b1 <= code && code <= 0xb8cb) || // Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
        (0xb8cd <= code && code <= 0xb8e7) || // Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
        (0xb8e9 <= code && code <= 0xb903) || // Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
        (0xb905 <= code && code <= 0xb91f) || // Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
        (0xb921 <= code && code <= 0xb93b) || // Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
        (0xb93d <= code && code <= 0xb957) || // Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
        (0xb959 <= code && code <= 0xb973) || // Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
        (0xb975 <= code && code <= 0xb98f) || // Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
        (0xb991 <= code && code <= 0xb9ab) || // Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
        (0xb9ad <= code && code <= 0xb9c7) || // Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
        (0xb9c9 <= code && code <= 0xb9e3) || // Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
        (0xb9e5 <= code && code <= 0xb9ff) || // Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
        (0xba01 <= code && code <= 0xba1b) || // Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
        (0xba1d <= code && code <= 0xba37) || // Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
        (0xba39 <= code && code <= 0xba53) || // Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
        (0xba55 <= code && code <= 0xba6f) || // Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
        (0xba71 <= code && code <= 0xba8b) || // Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
        (0xba8d <= code && code <= 0xbaa7) || // Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
        (0xbaa9 <= code && code <= 0xbac3) || // Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
        (0xbac5 <= code && code <= 0xbadf) || // Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
        (0xbae1 <= code && code <= 0xbafb) || // Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
        (0xbafd <= code && code <= 0xbb17) || // Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
        (0xbb19 <= code && code <= 0xbb33) || // Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
        (0xbb35 <= code && code <= 0xbb4f) || // Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
        (0xbb51 <= code && code <= 0xbb6b) || // Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
        (0xbb6d <= code && code <= 0xbb87) || // Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
        (0xbb89 <= code && code <= 0xbba3) || // Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
        (0xbba5 <= code && code <= 0xbbbf) || // Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
        (0xbbc1 <= code && code <= 0xbbdb) || // Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
        (0xbbdd <= code && code <= 0xbbf7) || // Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
        (0xbbf9 <= code && code <= 0xbc13) || // Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
        (0xbc15 <= code && code <= 0xbc2f) || // Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
        (0xbc31 <= code && code <= 0xbc4b) || // Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
        (0xbc4d <= code && code <= 0xbc67) || // Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
        (0xbc69 <= code && code <= 0xbc83) || // Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
        (0xbc85 <= code && code <= 0xbc9f) || // Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
        (0xbca1 <= code && code <= 0xbcbb) || // Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
        (0xbcbd <= code && code <= 0xbcd7) || // Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
        (0xbcd9 <= code && code <= 0xbcf3) || // Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
        (0xbcf5 <= code && code <= 0xbd0f) || // Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
        (0xbd11 <= code && code <= 0xbd2b) || // Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
        (0xbd2d <= code && code <= 0xbd47) || // Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
        (0xbd49 <= code && code <= 0xbd63) || // Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
        (0xbd65 <= code && code <= 0xbd7f) || // Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
        (0xbd81 <= code && code <= 0xbd9b) || // Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
        (0xbd9d <= code && code <= 0xbdb7) || // Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
        (0xbdb9 <= code && code <= 0xbdd3) || // Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
        (0xbdd5 <= code && code <= 0xbdef) || // Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
        (0xbdf1 <= code && code <= 0xbe0b) || // Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
        (0xbe0d <= code && code <= 0xbe27) || // Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
        (0xbe29 <= code && code <= 0xbe43) || // Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
        (0xbe45 <= code && code <= 0xbe5f) || // Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
        (0xbe61 <= code && code <= 0xbe7b) || // Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
        (0xbe7d <= code && code <= 0xbe97) || // Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
        (0xbe99 <= code && code <= 0xbeb3) || // Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
        (0xbeb5 <= code && code <= 0xbecf) || // Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
        (0xbed1 <= code && code <= 0xbeeb) || // Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
        (0xbeed <= code && code <= 0xbf07) || // Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
        (0xbf09 <= code && code <= 0xbf23) || // Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
        (0xbf25 <= code && code <= 0xbf3f) || // Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
        (0xbf41 <= code && code <= 0xbf5b) || // Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
        (0xbf5d <= code && code <= 0xbf77) || // Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
        (0xbf79 <= code && code <= 0xbf93) || // Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
        (0xbf95 <= code && code <= 0xbfaf) || // Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
        (0xbfb1 <= code && code <= 0xbfcb) || // Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
        (0xbfcd <= code && code <= 0xbfe7) || // Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
        (0xbfe9 <= code && code <= 0xc003) || // Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
        (0xc005 <= code && code <= 0xc01f) || // Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
        (0xc021 <= code && code <= 0xc03b) || // Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
        (0xc03d <= code && code <= 0xc057) || // Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
        (0xc059 <= code && code <= 0xc073) || // Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
        (0xc075 <= code && code <= 0xc08f) || // Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
        (0xc091 <= code && code <= 0xc0ab) || // Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
        (0xc0ad <= code && code <= 0xc0c7) || // Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
        (0xc0c9 <= code && code <= 0xc0e3) || // Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
        (0xc0e5 <= code && code <= 0xc0ff) || // Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
        (0xc101 <= code && code <= 0xc11b) || // Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
        (0xc11d <= code && code <= 0xc137) || // Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
        (0xc139 <= code && code <= 0xc153) || // Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
        (0xc155 <= code && code <= 0xc16f) || // Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
        (0xc171 <= code && code <= 0xc18b) || // Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
        (0xc18d <= code && code <= 0xc1a7) || // Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
        (0xc1a9 <= code && code <= 0xc1c3) || // Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
        (0xc1c5 <= code && code <= 0xc1df) || // Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
        (0xc1e1 <= code && code <= 0xc1fb) || // Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
        (0xc1fd <= code && code <= 0xc217) || // Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
        (0xc219 <= code && code <= 0xc233) || // Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
        (0xc235 <= code && code <= 0xc24f) || // Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
        (0xc251 <= code && code <= 0xc26b) || // Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
        (0xc26d <= code && code <= 0xc287) || // Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
        (0xc289 <= code && code <= 0xc2a3) || // Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
        (0xc2a5 <= code && code <= 0xc2bf) || // Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
        (0xc2c1 <= code && code <= 0xc2db) || // Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
        (0xc2dd <= code && code <= 0xc2f7) || // Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
        (0xc2f9 <= code && code <= 0xc313) || // Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
        (0xc315 <= code && code <= 0xc32f) || // Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
        (0xc331 <= code && code <= 0xc34b) || // Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
        (0xc34d <= code && code <= 0xc367) || // Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
        (0xc369 <= code && code <= 0xc383) || // Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
        (0xc385 <= code && code <= 0xc39f) || // Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
        (0xc3a1 <= code && code <= 0xc3bb) || // Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
        (0xc3bd <= code && code <= 0xc3d7) || // Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
        (0xc3d9 <= code && code <= 0xc3f3) || // Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
        (0xc3f5 <= code && code <= 0xc40f) || // Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
        (0xc411 <= code && code <= 0xc42b) || // Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
        (0xc42d <= code && code <= 0xc447) || // Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
        (0xc449 <= code && code <= 0xc463) || // Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
        (0xc465 <= code && code <= 0xc47f) || // Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
        (0xc481 <= code && code <= 0xc49b) || // Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
        (0xc49d <= code && code <= 0xc4b7) || // Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
        (0xc4b9 <= code && code <= 0xc4d3) || // Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
        (0xc4d5 <= code && code <= 0xc4ef) || // Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
        (0xc4f1 <= code && code <= 0xc50b) || // Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
        (0xc50d <= code && code <= 0xc527) || // Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
        (0xc529 <= code && code <= 0xc543) || // Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
        (0xc545 <= code && code <= 0xc55f) || // Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
        (0xc561 <= code && code <= 0xc57b) || // Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
        (0xc57d <= code && code <= 0xc597) || // Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
        (0xc599 <= code && code <= 0xc5b3) || // Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
        (0xc5b5 <= code && code <= 0xc5cf) || // Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
        (0xc5d1 <= code && code <= 0xc5eb) || // Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
        (0xc5ed <= code && code <= 0xc607) || // Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
        (0xc609 <= code && code <= 0xc623) || // Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
        (0xc625 <= code && code <= 0xc63f) || // Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
        (0xc641 <= code && code <= 0xc65b) || // Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
        (0xc65d <= code && code <= 0xc677) || // Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
        (0xc679 <= code && code <= 0xc693) || // Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
        (0xc695 <= code && code <= 0xc6af) || // Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
        (0xc6b1 <= code && code <= 0xc6cb) || // Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
        (0xc6cd <= code && code <= 0xc6e7) || // Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
        (0xc6e9 <= code && code <= 0xc703) || // Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
        (0xc705 <= code && code <= 0xc71f) || // Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
        (0xc721 <= code && code <= 0xc73b) || // Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
        (0xc73d <= code && code <= 0xc757) || // Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
        (0xc759 <= code && code <= 0xc773) || // Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
        (0xc775 <= code && code <= 0xc78f) || // Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
        (0xc791 <= code && code <= 0xc7ab) || // Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
        (0xc7ad <= code && code <= 0xc7c7) || // Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
        (0xc7c9 <= code && code <= 0xc7e3) || // Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
        (0xc7e5 <= code && code <= 0xc7ff) || // Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
        (0xc801 <= code && code <= 0xc81b) || // Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
        (0xc81d <= code && code <= 0xc837) || // Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
        (0xc839 <= code && code <= 0xc853) || // Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
        (0xc855 <= code && code <= 0xc86f) || // Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
        (0xc871 <= code && code <= 0xc88b) || // Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
        (0xc88d <= code && code <= 0xc8a7) || // Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
        (0xc8a9 <= code && code <= 0xc8c3) || // Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
        (0xc8c5 <= code && code <= 0xc8df) || // Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
        (0xc8e1 <= code && code <= 0xc8fb) || // Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
        (0xc8fd <= code && code <= 0xc917) || // Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
        (0xc919 <= code && code <= 0xc933) || // Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
        (0xc935 <= code && code <= 0xc94f) || // Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
        (0xc951 <= code && code <= 0xc96b) || // Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
        (0xc96d <= code && code <= 0xc987) || // Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
        (0xc989 <= code && code <= 0xc9a3) || // Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
        (0xc9a5 <= code && code <= 0xc9bf) || // Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
        (0xc9c1 <= code && code <= 0xc9db) || // Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
        (0xc9dd <= code && code <= 0xc9f7) || // Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
        (0xc9f9 <= code && code <= 0xca13) || // Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
        (0xca15 <= code && code <= 0xca2f) || // Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
        (0xca31 <= code && code <= 0xca4b) || // Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
        (0xca4d <= code && code <= 0xca67) || // Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
        (0xca69 <= code && code <= 0xca83) || // Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
        (0xca85 <= code && code <= 0xca9f) || // Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
        (0xcaa1 <= code && code <= 0xcabb) || // Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
        (0xcabd <= code && code <= 0xcad7) || // Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
        (0xcad9 <= code && code <= 0xcaf3) || // Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
        (0xcaf5 <= code && code <= 0xcb0f) || // Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
        (0xcb11 <= code && code <= 0xcb2b) || // Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
        (0xcb2d <= code && code <= 0xcb47) || // Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
        (0xcb49 <= code && code <= 0xcb63) || // Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
        (0xcb65 <= code && code <= 0xcb7f) || // Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
        (0xcb81 <= code && code <= 0xcb9b) || // Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
        (0xcb9d <= code && code <= 0xcbb7) || // Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
        (0xcbb9 <= code && code <= 0xcbd3) || // Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
        (0xcbd5 <= code && code <= 0xcbef) || // Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
        (0xcbf1 <= code && code <= 0xcc0b) || // Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
        (0xcc0d <= code && code <= 0xcc27) || // Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
        (0xcc29 <= code && code <= 0xcc43) || // Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
        (0xcc45 <= code && code <= 0xcc5f) || // Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
        (0xcc61 <= code && code <= 0xcc7b) || // Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
        (0xcc7d <= code && code <= 0xcc97) || // Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
        (0xcc99 <= code && code <= 0xccb3) || // Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
        (0xccb5 <= code && code <= 0xcccf) || // Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
        (0xccd1 <= code && code <= 0xcceb) || // Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
        (0xcced <= code && code <= 0xcd07) || // Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
        (0xcd09 <= code && code <= 0xcd23) || // Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
        (0xcd25 <= code && code <= 0xcd3f) || // Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
        (0xcd41 <= code && code <= 0xcd5b) || // Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
        (0xcd5d <= code && code <= 0xcd77) || // Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
        (0xcd79 <= code && code <= 0xcd93) || // Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
        (0xcd95 <= code && code <= 0xcdaf) || // Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
        (0xcdb1 <= code && code <= 0xcdcb) || // Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
        (0xcdcd <= code && code <= 0xcde7) || // Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
        (0xcde9 <= code && code <= 0xce03) || // Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
        (0xce05 <= code && code <= 0xce1f) || // Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
        (0xce21 <= code && code <= 0xce3b) || // Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
        (0xce3d <= code && code <= 0xce57) || // Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
        (0xce59 <= code && code <= 0xce73) || // Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
        (0xce75 <= code && code <= 0xce8f) || // Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
        (0xce91 <= code && code <= 0xceab) || // Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
        (0xcead <= code && code <= 0xcec7) || // Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
        (0xcec9 <= code && code <= 0xcee3) || // Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
        (0xcee5 <= code && code <= 0xceff) || // Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
        (0xcf01 <= code && code <= 0xcf1b) || // Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
        (0xcf1d <= code && code <= 0xcf37) || // Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
        (0xcf39 <= code && code <= 0xcf53) || // Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
        (0xcf55 <= code && code <= 0xcf6f) || // Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
        (0xcf71 <= code && code <= 0xcf8b) || // Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
        (0xcf8d <= code && code <= 0xcfa7) || // Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
        (0xcfa9 <= code && code <= 0xcfc3) || // Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
        (0xcfc5 <= code && code <= 0xcfdf) || // Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
        (0xcfe1 <= code && code <= 0xcffb) || // Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
        (0xcffd <= code && code <= 0xd017) || // Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
        (0xd019 <= code && code <= 0xd033) || // Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
        (0xd035 <= code && code <= 0xd04f) || // Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
        (0xd051 <= code && code <= 0xd06b) || // Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
        (0xd06d <= code && code <= 0xd087) || // Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
        (0xd089 <= code && code <= 0xd0a3) || // Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
        (0xd0a5 <= code && code <= 0xd0bf) || // Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
        (0xd0c1 <= code && code <= 0xd0db) || // Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
        (0xd0dd <= code && code <= 0xd0f7) || // Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
        (0xd0f9 <= code && code <= 0xd113) || // Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
        (0xd115 <= code && code <= 0xd12f) || // Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
        (0xd131 <= code && code <= 0xd14b) || // Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
        (0xd14d <= code && code <= 0xd167) || // Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
        (0xd169 <= code && code <= 0xd183) || // Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
        (0xd185 <= code && code <= 0xd19f) || // Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
        (0xd1a1 <= code && code <= 0xd1bb) || // Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
        (0xd1bd <= code && code <= 0xd1d7) || // Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
        (0xd1d9 <= code && code <= 0xd1f3) || // Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
        (0xd1f5 <= code && code <= 0xd20f) || // Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
        (0xd211 <= code && code <= 0xd22b) || // Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
        (0xd22d <= code && code <= 0xd247) || // Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
        (0xd249 <= code && code <= 0xd263) || // Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
        (0xd265 <= code && code <= 0xd27f) || // Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
        (0xd281 <= code && code <= 0xd29b) || // Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
        (0xd29d <= code && code <= 0xd2b7) || // Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
        (0xd2b9 <= code && code <= 0xd2d3) || // Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
        (0xd2d5 <= code && code <= 0xd2ef) || // Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
        (0xd2f1 <= code && code <= 0xd30b) || // Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
        (0xd30d <= code && code <= 0xd327) || // Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
        (0xd329 <= code && code <= 0xd343) || // Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
        (0xd345 <= code && code <= 0xd35f) || // Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
        (0xd361 <= code && code <= 0xd37b) || // Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
        (0xd37d <= code && code <= 0xd397) || // Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
        (0xd399 <= code && code <= 0xd3b3) || // Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
        (0xd3b5 <= code && code <= 0xd3cf) || // Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
        (0xd3d1 <= code && code <= 0xd3eb) || // Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
        (0xd3ed <= code && code <= 0xd407) || // Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
        (0xd409 <= code && code <= 0xd423) || // Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
        (0xd425 <= code && code <= 0xd43f) || // Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
        (0xd441 <= code && code <= 0xd45b) || // Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
        (0xd45d <= code && code <= 0xd477) || // Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
        (0xd479 <= code && code <= 0xd493) || // Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
        (0xd495 <= code && code <= 0xd4af) || // Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
        (0xd4b1 <= code && code <= 0xd4cb) || // Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
        (0xd4cd <= code && code <= 0xd4e7) || // Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
        (0xd4e9 <= code && code <= 0xd503) || // Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
        (0xd505 <= code && code <= 0xd51f) || // Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
        (0xd521 <= code && code <= 0xd53b) || // Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
        (0xd53d <= code && code <= 0xd557) || // Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
        (0xd559 <= code && code <= 0xd573) || // Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
        (0xd575 <= code && code <= 0xd58f) || // Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
        (0xd591 <= code && code <= 0xd5ab) || // Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
        (0xd5ad <= code && code <= 0xd5c7) || // Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
        (0xd5c9 <= code && code <= 0xd5e3) || // Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
        (0xd5e5 <= code && code <= 0xd5ff) || // Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
        (0xd601 <= code && code <= 0xd61b) || // Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
        (0xd61d <= code && code <= 0xd637) || // Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
        (0xd639 <= code && code <= 0xd653) || // Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
        (0xd655 <= code && code <= 0xd66f) || // Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
        (0xd671 <= code && code <= 0xd68b) || // Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
        (0xd68d <= code && code <= 0xd6a7) || // Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
        (0xd6a9 <= code && code <= 0xd6c3) || // Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
        (0xd6c5 <= code && code <= 0xd6df) || // Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
        (0xd6e1 <= code && code <= 0xd6fb) || // Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
        (0xd6fd <= code && code <= 0xd717) || // Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
        (0xd719 <= code && code <= 0xd733) || // Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
        (0xd735 <= code && code <= 0xd74f) || // Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
        (0xd751 <= code && code <= 0xd76b) || // Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
        (0xd76d <= code && code <= 0xd787) || // Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
        (0xd789 <= code && code <= 0xd7a3) // Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
      ) {
        return LVT;
      }

      if (
        0x261d == code || // So       WHITE UP POINTING INDEX
        0x26f9 == code || // So       PERSON WITH BALL
        (0x270a <= code && code <= 0x270d) || // So   [4] RAISED FIST..WRITING HAND
        0x1f385 == code || // So       FATHER CHRISTMAS
        (0x1f3c2 <= code && code <= 0x1f3c4) || // So   [3] SNOWBOARDER..SURFER
        0x1f3c7 == code || // So       HORSE RACING
        (0x1f3ca <= code && code <= 0x1f3cc) || // So   [3] SWIMMER..GOLFER
        (0x1f442 <= code && code <= 0x1f443) || // So   [2] EAR..NOSE
        (0x1f446 <= code && code <= 0x1f450) || // So  [11] WHITE UP POINTING BACKHAND INDEX..OPEN HANDS SIGN
        0x1f46e == code || // So       POLICE OFFICER
        (0x1f470 <= code && code <= 0x1f478) || // So   [9] BRIDE WITH VEIL..PRINCESS
        0x1f47c == code || // So       BABY ANGEL
        (0x1f481 <= code && code <= 0x1f483) || // So   [3] INFORMATION DESK PERSON..DANCER
        (0x1f485 <= code && code <= 0x1f487) || // So   [3] NAIL POLISH..HAIRCUT
        0x1f4aa == code || // So       FLEXED BICEPS
        (0x1f574 <= code && code <= 0x1f575) || // So   [2] MAN IN BUSINESS SUIT LEVITATING..SLEUTH OR SPY
        0x1f57a == code || // So       MAN DANCING
        0x1f590 == code || // So       RAISED HAND WITH FINGERS SPLAYED
        (0x1f595 <= code && code <= 0x1f596) || // So   [2] REVERSED HAND WITH MIDDLE FINGER EXTENDED..RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS
        (0x1f645 <= code && code <= 0x1f647) || // So   [3] FACE WITH NO GOOD GESTURE..PERSON BOWING DEEPLY
        (0x1f64b <= code && code <= 0x1f64f) || // So   [5] HAPPY PERSON RAISING ONE HAND..PERSON WITH FOLDED HANDS
        0x1f6a3 == code || // So       ROWBOAT
        (0x1f6b4 <= code && code <= 0x1f6b6) || // So   [3] BICYCLIST..PEDESTRIAN
        0x1f6c0 == code || // So       BATH
        0x1f6cc == code || // So       SLEEPING ACCOMMODATION
        (0x1f918 <= code && code <= 0x1f91c) || // So   [5] SIGN OF THE HORNS..RIGHT-FACING FIST
        (0x1f91e <= code && code <= 0x1f91f) || // So   [2] HAND WITH INDEX AND MIDDLE FINGERS CROSSED..I LOVE YOU HAND SIGN
        0x1f926 == code || // So       FACE PALM
        (0x1f930 <= code && code <= 0x1f939) || // So  [10] PREGNANT WOMAN..JUGGLING
        (0x1f93d <= code && code <= 0x1f93e) || // So   [2] WATER POLO..HANDBALL
        (0x1f9d1 <= code && code <= 0x1f9dd) // So  [13] ADULT..ELF
      ) {
        return E_Base;
      }

      if (
        0x1f3fb <= code &&
        code <= 0x1f3ff // Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6
      ) {
        return E_Modifier;
      }

      if (
        0x200d == code // Cf       ZERO WIDTH JOINER
      ) {
        return ZWJ;
      }

      if (
        0x2640 == code || // So       FEMALE SIGN
        0x2642 == code || // So       MALE SIGN
        (0x2695 <= code && code <= 0x2696) || // So   [2] STAFF OF AESCULAPIUS..SCALES
        0x2708 == code || // So       AIRPLANE
        0x2764 == code || // So       HEAVY BLACK HEART
        0x1f308 == code || // So       RAINBOW
        0x1f33e == code || // So       EAR OF RICE
        0x1f373 == code || // So       COOKING
        0x1f393 == code || // So       GRADUATION CAP
        0x1f3a4 == code || // So       MICROPHONE
        0x1f3a8 == code || // So       ARTIST PALETTE
        0x1f3eb == code || // So       SCHOOL
        0x1f3ed == code || // So       FACTORY
        0x1f48b == code || // So       KISS MARK
        (0x1f4bb <= code && code <= 0x1f4bc) || // So   [2] PERSONAL COMPUTER..BRIEFCASE
        0x1f527 == code || // So       WRENCH
        0x1f52c == code || // So       MICROSCOPE
        0x1f5e8 == code || // So       LEFT SPEECH BUBBLE
        0x1f680 == code || // So       ROCKET
        0x1f692 == code // So       FIRE ENGINE
      ) {
        return Glue_After_Zwj;
      }

      if (
        0x1f466 <= code &&
        code <= 0x1f469 // So   [4] BOY..WOMAN
      ) {
        return E_Base_GAZ;
      }

      //all unlisted characters have a grapheme break property of "Other"
      return Other;
    }
    return this;
  }

  var graphemeSplitter = GraphemeSplitter;

  var extractors$2 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    const splitter = new graphemeSplitter();
    class ChoiceExtractor {
      constructor(config) {
        this.config = config;
      }
      extract(source) {
        let results = new Array();
        let trimmedSource = source.toLowerCase();
        if (recognizersText.StringUtility.isNullOrWhitespace(source)) {
          return results;
        }
        let partialResults = new Array();
        let sourceTokens = this.tokenize(trimmedSource);
        this.config.regexesMap.forEach((typeExtracted, regex) => {
          recognizersText.RegExpUtility.getMatches(
            regex,
            trimmedSource
          ).forEach((match) => {
            let matchTokens = this.tokenize(match.value);
            let topScore = sourceTokens
              .map((sToken, index) =>
                this.matchValue(sourceTokens, matchTokens, index)
              )
              .reduce((top, value) => (top = Math.max(top, value)), 0.0);
            if (topScore > 0.0) {
              let start = match.index;
              let length = match.length;
              let text = source.substr(start, length).trim();
              partialResults.push({
                start: start,
                length: length,
                text: text,
                type: typeExtracted,
                data: {
                  source: source,
                  score: topScore,
                },
              });
            }
          });
        });
        if (partialResults.length === 0) {
          return results;
        }
        partialResults = partialResults.sort((a, b) => a.start - b.start);
        if (this.config.onlyTopMatch) {
          let topResult = partialResults.reduce(
            (top, value) =>
              (top = top.data.score < value.data.score ? value : top),
            partialResults[0]
          );
          topResult.data.otherMatches = partialResults.filter(
            (r) => r !== topResult
          );
          results.push(topResult);
        } else {
          results = partialResults;
        }
        return results;
      }
      matchValue(source, match, startPos) {
        let matched = 0;
        let totalDeviation = 0;
        match.forEach((matchToken) => {
          let pos = source.indexOf(matchToken, startPos);
          if (pos >= 0) {
            let distance = matched > 0 ? pos - startPos : 0;
            if (distance <= this.config.maxDistance) {
              matched++;
              totalDeviation += distance;
              startPos = pos + 1;
            }
          }
        });
        let score = 0.0;
        if (
          matched > 0 &&
          (matched === match.length || this.config.allowPartialMatch)
        ) {
          let completeness = matched / match.length;
          let accuracy = completeness * (matched / (matched + totalDeviation));
          let initialScore = accuracy * (matched / source.length);
          score = 0.4 + 0.6 * initialScore;
        }
        return score;
      }
      tokenize(source) {
        let tokens = [];
        let chars = splitter.splitGraphemes(source);
        let token = "";
        chars.forEach((c) => {
          let codePoint = c.codePointAt(0) || c.charAt(0);
          if (codePoint > 0xffff) {
            // Character is in a Supplementary Unicode Plane. This is where emoji live so
            // we're going to just break each character in this range out as its own token.
            tokens.push(c);
            if (!recognizersText.StringUtility.isNullOrWhitespace(token)) {
              tokens.push(token);
              token = "";
            }
          } else if (
            !(
              this.config.tokenRegex.test(c) ||
              recognizersText.StringUtility.isWhitespace(c)
            )
          ) {
            token = token.concat(c);
          } else if (!recognizersText.StringUtility.isNullOrWhitespace(token)) {
            tokens.push(token);
            token = "";
          }
        });
        if (!recognizersText.StringUtility.isNullOrWhitespace(token)) {
          tokens.push(token);
          token = "";
        }
        return tokens;
      }
    }
    exports.ChoiceExtractor = ChoiceExtractor;
    class BooleanExtractor extends ChoiceExtractor {
      constructor(config) {
        let regexesMap = new Map()
          .set(config.regexTrue, constants.Constants.SYS_BOOLEAN_TRUE)
          .set(config.regexFalse, constants.Constants.SYS_BOOLEAN_FALSE);
        let optionsConfig = {
          regexesMap: regexesMap,
          tokenRegex: config.tokenRegex,
          allowPartialMatch: false,
          maxDistance: 2,
          onlyTopMatch: config.onlyTopMatch,
        };
        super(optionsConfig);
        this.extractType = constants.Constants.SYS_BOOLEAN;
      }
    }
    BooleanExtractor.booleanTrue = constants.Constants.SYS_BOOLEAN_TRUE;
    BooleanExtractor.booleanFalse = constants.Constants.SYS_BOOLEAN_FALSE;
    exports.BooleanExtractor = BooleanExtractor;
  });

  unwrapExports(extractors$2);

  var parsers$2 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class ChoiceParser {
      constructor(config) {
        this.config = config;
      }
      parse(extResult) {
        let result = new recognizersText.ParseResult(extResult);
        result.value = this.config.resolutions.get(result.type);
        if (result.data.otherMatches) {
          result.data.otherMatches = result.data.otherMatches.map((m) => {
            let r = new recognizersText.ParseResult(m);
            r.value = this.config.resolutions.get(r.type);
            return r;
          });
        }
        return result;
      }
    }
    exports.ChoiceParser = ChoiceParser;
    class BooleanParser extends ChoiceParser {
      constructor() {
        let resolutions = new Map([
          [constants.Constants.SYS_BOOLEAN_TRUE, true],
          [constants.Constants.SYS_BOOLEAN_FALSE, false],
        ]);
        let config = {
          resolutions: resolutions,
        };
        super(config);
      }
    }
    exports.BooleanParser = BooleanParser;
  });

  unwrapExports(parsers$2);

  var englishChoice = createCommonjsModule(function (module, exports) {
    "use strict";
    // ------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    // ------------------------------------------------------------------------------
    Object.defineProperty(exports, "__esModule", { value: true });
    var EnglishChoice;
    (function (EnglishChoice) {
      EnglishChoice.LangMarker = "Eng";
      EnglishChoice.TokenizerRegex = `[^\\w\\d]`;
      EnglishChoice.TrueRegex = `\\b(true|yes|yep|y|sure|ok|agree)\\b|(\\uD83D\\uDC4D|\\uD83D\\uDC4C)`;
      EnglishChoice.FalseRegex = `\\b(false|nope|nop|no|not\\s+ok|disagree)\\b|(\\uD83D\\uDC4E|\\u270B|\\uD83D\\uDD90)`;
    })((EnglishChoice = exports.EnglishChoice || (exports.EnglishChoice = {})));
  });

  unwrapExports(englishChoice);

  var boolean_1 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class EnglishBooleanExtractorConfiguration {
      constructor(onlyTopMatch = true) {
        this.regexTrue = recognizersText.RegExpUtility.getSafeRegExp(
          englishChoice.EnglishChoice.TrueRegex
        );
        this.regexFalse = recognizersText.RegExpUtility.getSafeRegExp(
          englishChoice.EnglishChoice.FalseRegex
        );
        this.tokenRegex = recognizersText.RegExpUtility.getSafeRegExp(
          englishChoice.EnglishChoice.TokenizerRegex,
          "is"
        );
        this.onlyTopMatch = onlyTopMatch;
      }
    }
    exports.EnglishBooleanExtractorConfiguration =
      EnglishBooleanExtractorConfiguration;
  });

  unwrapExports(boolean_1);

  var frenchChoice = createCommonjsModule(function (module, exports) {
    "use strict";
    // ------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    // ------------------------------------------------------------------------------
    Object.defineProperty(exports, "__esModule", { value: true });
    var FrenchChoice;
    (function (FrenchChoice) {
      FrenchChoice.LangMarker = "Fr";
      FrenchChoice.TokenizerRegex = `[^\\w\\d\\u00E0-\\u00FC]`;
      FrenchChoice.TrueRegex = `\\b(s[uû]r|ouais|oui|yep|y|sure|approuver|accepter|consentir|d'accord|ça march[eé])\\b|(\\uD83D\\uDC4D|\\uD83D\\uDC4C)`;
      FrenchChoice.FalseRegex = `\\b(faux|nan|non|pas\\s+d'accord|pas\\s+concorder|n'est\\s+pas\\s+(correct|ok)|pas)\\b|(\\uD83D\\uDC4E|\\u270B|\\uD83D\\uDD90)`;
    })((FrenchChoice = exports.FrenchChoice || (exports.FrenchChoice = {})));
  });

  unwrapExports(frenchChoice);

  var boolean_1$1 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class FrenchBooleanExtractorConfiguration {
      constructor(onlyTopMatch = true) {
        this.regexTrue = recognizersText.RegExpUtility.getSafeRegExp(
          frenchChoice.FrenchChoice.TrueRegex
        );
        this.regexFalse = recognizersText.RegExpUtility.getSafeRegExp(
          frenchChoice.FrenchChoice.FalseRegex
        );
        this.tokenRegex = recognizersText.RegExpUtility.getSafeRegExp(
          frenchChoice.FrenchChoice.TokenizerRegex,
          "is"
        );
        this.onlyTopMatch = onlyTopMatch;
      }
    }
    exports.FrenchBooleanExtractorConfiguration =
      FrenchBooleanExtractorConfiguration;
  });

  unwrapExports(boolean_1$1);

  var germanChoice = createCommonjsModule(function (module, exports) {
    "use strict";
    // ------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    // ------------------------------------------------------------------------------
    Object.defineProperty(exports, "__esModule", { value: true });
    var GermanChoice;
    (function (GermanChoice) {
      GermanChoice.LangMarker = "Ger";
      GermanChoice.TokenizerRegex = `[^\\w\\d\\u00E0-\\u00FC]`;
      GermanChoice.TrueRegex = `\\b(wahr|ja|jep|j|sicher|ok|einverstanden|mit\\s+Sicherheit|sicherlich|jap|mache ich)\\b|(\\uD83D\\uDC4D|\\uD83D\\uDC4C)`;
      GermanChoice.FalseRegex = `\\b(falsch|nein|ne|nö|nicht\\s+ok|nicht\\s+einverstanden|n)\\b|(\\uD83D\\uDC4E|\\u270B|\\uD83D\\uDD90)`;
    })((GermanChoice = exports.GermanChoice || (exports.GermanChoice = {})));
  });

  unwrapExports(germanChoice);

  var boolean_1$2 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class GermanBooleanExtractorConfiguration {
      constructor(onlyTopMatch = true) {
        this.regexTrue = recognizersText.RegExpUtility.getSafeRegExp(
          germanChoice.GermanChoice.TrueRegex
        );
        this.regexFalse = recognizersText.RegExpUtility.getSafeRegExp(
          germanChoice.GermanChoice.FalseRegex
        );
        this.tokenRegex = recognizersText.RegExpUtility.getSafeRegExp(
          germanChoice.GermanChoice.TokenizerRegex,
          "is"
        );
        this.onlyTopMatch = onlyTopMatch;
      }
    }
    exports.GermanBooleanExtractorConfiguration =
      GermanBooleanExtractorConfiguration;
  });

  unwrapExports(boolean_1$2);

  var japaneseChoice = createCommonjsModule(function (module, exports) {
    "use strict";
    // ------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    // ------------------------------------------------------------------------------
    Object.defineProperty(exports, "__esModule", { value: true });
    var JapaneseChoice;
    (function (JapaneseChoice) {
      JapaneseChoice.LangMarker = "Jpn";
      JapaneseChoice.TokenizerRegex = `[^\\w\\d\\u3040-\\u309f\\u30a0-\\u30ff\\uff00-\\uff9f\\u4e00-\\u9faf\\u3400-\\u4dbf]`;
      JapaneseChoice.TrueRegex = `(はい(！)*|そうです|よい(です)*)|(\\uD83D\\uDC4D|\\uD83D\\uDC4C)`;
      JapaneseChoice.FalseRegex = `(いいえ|ではありません|ではない|じゃない|じゃありません)|(\\uD83D\\uDC4E|\\u270B|\\uD83D\\uDD90)`;
    })(
      (JapaneseChoice = exports.JapaneseChoice || (exports.JapaneseChoice = {}))
    );
  });

  unwrapExports(japaneseChoice);

  var boolean_1$3 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class JapaneseBooleanExtractorConfiguration {
      constructor(onlyTopMatch = true) {
        this.regexTrue = recognizersText.RegExpUtility.getSafeRegExp(
          japaneseChoice.JapaneseChoice.TrueRegex
        );
        this.regexFalse = recognizersText.RegExpUtility.getSafeRegExp(
          japaneseChoice.JapaneseChoice.FalseRegex
        );
        this.tokenRegex = recognizersText.RegExpUtility.getSafeRegExp(
          japaneseChoice.JapaneseChoice.TokenizerRegex,
          "is"
        );
        this.onlyTopMatch = onlyTopMatch;
      }
    }
    exports.JapaneseBooleanExtractorConfiguration =
      JapaneseBooleanExtractorConfiguration;
  });

  unwrapExports(boolean_1$3);

  var portugueseChoice = createCommonjsModule(function (module, exports) {
    "use strict";
    // ------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    // ------------------------------------------------------------------------------
    Object.defineProperty(exports, "__esModule", { value: true });
    var PortugueseChoice;
    (function (PortugueseChoice) {
      PortugueseChoice.LangMarker = "Por";
      PortugueseChoice.TokenizerRegex = `[^\\w\\d\\u00E0-\\u00FC]`;
      PortugueseChoice.TrueRegex = `\\b(verdade|verdadeir[oa]|sim|isso|claro|ok)\\b|(\\uD83D\\uDC4D|\\uD83D\\uDC4C)`;
      PortugueseChoice.FalseRegex = `\\b(falso|n[aã]o|incorreto|nada disso)\\b|(\\uD83D\\uDC4E|\\u270B|\\uD83D\\uDD90)`;
    })(
      (PortugueseChoice =
        exports.PortugueseChoice || (exports.PortugueseChoice = {}))
    );
  });

  unwrapExports(portugueseChoice);

  var boolean_1$4 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class PortugueseBooleanExtractorConfiguration {
      constructor(onlyTopMatch = true) {
        this.regexTrue = recognizersText.RegExpUtility.getSafeRegExp(
          portugueseChoice.PortugueseChoice.TrueRegex
        );
        this.regexFalse = recognizersText.RegExpUtility.getSafeRegExp(
          portugueseChoice.PortugueseChoice.FalseRegex
        );
        this.tokenRegex = recognizersText.RegExpUtility.getSafeRegExp(
          portugueseChoice.PortugueseChoice.TokenizerRegex,
          "is"
        );
        this.onlyTopMatch = onlyTopMatch;
      }
    }
    exports.PortugueseBooleanExtractorConfiguration =
      PortugueseBooleanExtractorConfiguration;
  });

  unwrapExports(boolean_1$4);

  var spanishChoice = createCommonjsModule(function (module, exports) {
    "use strict";
    // ------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    // ------------------------------------------------------------------------------
    Object.defineProperty(exports, "__esModule", { value: true });
    var SpanishChoice;
    (function (SpanishChoice) {
      SpanishChoice.LangMarker = "Spa";
      SpanishChoice.TokenizerRegex = `[^\\w\\d\\u00E0-\\u00FC]`;
      SpanishChoice.TrueRegex = `\\b(verdad|verdadero|sí|sip|s|si|cierto|por supuesto|ok)\\b|(\\uD83D\\uDC4D|\\uD83D\\uDC4C)`;
      SpanishChoice.FalseRegex = `\\b(falso|no|nop|n|no)\\b|(\\uD83D\\uDC4E|\\u270B|\\uD83D\\uDD90)`;
    })((SpanishChoice = exports.SpanishChoice || (exports.SpanishChoice = {})));
  });

  unwrapExports(spanishChoice);

  var boolean_1$5 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class SpanishBooleanExtractorConfiguration {
      constructor(onlyTopMatch = true) {
        this.regexTrue = recognizersText.RegExpUtility.getSafeRegExp(
          spanishChoice.SpanishChoice.TrueRegex
        );
        this.regexFalse = recognizersText.RegExpUtility.getSafeRegExp(
          spanishChoice.SpanishChoice.FalseRegex
        );
        this.tokenRegex = recognizersText.RegExpUtility.getSafeRegExp(
          spanishChoice.SpanishChoice.TokenizerRegex,
          "is"
        );
        this.onlyTopMatch = onlyTopMatch;
      }
    }
    exports.SpanishBooleanExtractorConfiguration =
      SpanishBooleanExtractorConfiguration;
  });

  unwrapExports(boolean_1$5);

  var chineseChoice = createCommonjsModule(function (module, exports) {
    "use strict";
    // ------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    // ------------------------------------------------------------------------------
    Object.defineProperty(exports, "__esModule", { value: true });
    var ChineseChoice;
    (function (ChineseChoice) {
      ChineseChoice.LangMarker = "Chs";
      ChineseChoice.TokenizerRegex = `[^\\u3040-\\u30ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff\\uff66-\\uff9f]`;
      ChineseChoice.TrueRegex = `(好[的啊呀嘞哇]|没问题|可以|中|好|同意|行|是的|是|对)|(\\uD83D\\uDC4D|\\uD83D\\uDC4C)`;
      ChineseChoice.FalseRegex = `(不行|不好|拒绝|否定|不中|不可以|不是的|不是|不对|不)|(\\uD83D\\uDC4E|\\u270B|\\uD83D\\uDD90)`;
    })((ChineseChoice = exports.ChineseChoice || (exports.ChineseChoice = {})));
  });

  unwrapExports(chineseChoice);

  var boolean_1$6 = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    class ChineseBooleanExtractorConfiguration {
      constructor(onlyTopMatch = true) {
        this.regexTrue = recognizersText.RegExpUtility.getSafeRegExp(
          chineseChoice.ChineseChoice.TrueRegex
        );
        this.regexFalse = recognizersText.RegExpUtility.getSafeRegExp(
          chineseChoice.ChineseChoice.FalseRegex
        );
        this.tokenRegex = recognizersText.RegExpUtility.getSafeRegExp(
          chineseChoice.ChineseChoice.TokenizerRegex,
          "is"
        );
        this.onlyTopMatch = onlyTopMatch;
      }
    }
    exports.ChineseBooleanExtractorConfiguration =
      ChineseBooleanExtractorConfiguration;
  });

  unwrapExports(boolean_1$6);

  var choiceRecognizer = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    var ChoiceOptions;
    (function (ChoiceOptions) {
      ChoiceOptions[(ChoiceOptions["None"] = 0)] = "None";
    })((ChoiceOptions = exports.ChoiceOptions || (exports.ChoiceOptions = {})));
    function recognizeBoolean(
      query,
      culture,
      options = ChoiceOptions.None,
      fallbackToDefaultCulture = true
    ) {
      let recognizer = new ChoiceRecognizer(culture, options);
      let model = recognizer.getBooleanModel(culture, fallbackToDefaultCulture);
      return model.parse(query);
    }
    exports.recognizeBoolean = recognizeBoolean;
    class ChoiceRecognizer extends recognizersText.Recognizer {
      constructor(
        culture,
        options = ChoiceOptions.None,
        lazyInitialization = false
      ) {
        super(culture, options, lazyInitialization);
      }
      InitializeConfiguration() {
        //#region English
        this.registerModel(
          "BooleanModel",
          recognizersText.Culture.English,
          (options) =>
            new models$2.BooleanModel(
              new parsers$2.BooleanParser(),
              new extractors$2.BooleanExtractor(
                new boolean_1.EnglishBooleanExtractorConfiguration()
              )
            )
        );
        //#endregion
        //#region Japanese
        this.registerModel(
          "BooleanModel",
          recognizersText.Culture.Japanese,
          (options) =>
            new models$2.BooleanModel(
              new parsers$2.BooleanParser(),
              new extractors$2.BooleanExtractor(
                new boolean_1$3.JapaneseBooleanExtractorConfiguration()
              )
            )
        );
        //#endregion
        //#region Portuguese
        this.registerModel(
          "BooleanModel",
          recognizersText.Culture.Portuguese,
          (options) =>
            new models$2.BooleanModel(
              new parsers$2.BooleanParser(),
              new extractors$2.BooleanExtractor(
                new boolean_1$4.PortugueseBooleanExtractorConfiguration()
              )
            )
        );
        //#endregion
        //#region Spanish
        this.registerModel(
          "BooleanModel",
          recognizersText.Culture.Spanish,
          (options) =>
            new models$2.BooleanModel(
              new parsers$2.BooleanParser(),
              new extractors$2.BooleanExtractor(
                new boolean_1$5.SpanishBooleanExtractorConfiguration()
              )
            )
        );
        //#endregion
        //#region Chinese
        this.registerModel(
          "BooleanModel",
          recognizersText.Culture.Chinese,
          (options) =>
            new models$2.BooleanModel(
              new parsers$2.BooleanParser(),
              new extractors$2.BooleanExtractor(
                new boolean_1$6.ChineseBooleanExtractorConfiguration()
              )
            )
        );
        //#endregion
        //#region French
        this.registerModel(
          "BooleanModel",
          recognizersText.Culture.French,
          (options) =>
            new models$2.BooleanModel(
              new parsers$2.BooleanParser(),
              new extractors$2.BooleanExtractor(
                new boolean_1$1.FrenchBooleanExtractorConfiguration()
              )
            )
        );
        //#endregion
        //#region German
        this.registerModel(
          "BooleanModel",
          recognizersText.Culture.German,
          (options) =>
            new models$2.BooleanModel(
              new parsers$2.BooleanParser(),
              new extractors$2.BooleanExtractor(
                new boolean_1$2.GermanBooleanExtractorConfiguration()
              )
            )
        );
        //#endregion
      }
      IsValidOptions(options) {
        return options >= 0 && options <= ChoiceOptions.None;
      }
      getBooleanModel(culture = null, fallbackToDefaultCulture = true) {
        return this.getModel("BooleanModel", culture, fallbackToDefaultCulture);
      }
    }
    exports.default = ChoiceRecognizer;
  });

  unwrapExports(choiceRecognizer);

  var recognizersTextChoice = createCommonjsModule(function (module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });

    exports.ChoiceRecognizer = choiceRecognizer.default;
    exports.ChoiceOptions = choiceRecognizer.ChoiceOptions;
    exports.recognizeBoolean = choiceRecognizer.recognizeBoolean;

    exports.Culture = recognizersText.Culture;

    exports.Constants = constants.Constants;

    exports.ChoiceModel = models$2.ChoiceModel;
    exports.BooleanModel = models$2.BooleanModel;

    exports.ChoiceExtractor = extractors$2.ChoiceExtractor;
    exports.BooleanExtractor = extractors$2.BooleanExtractor;

    exports.ChoiceParser = parsers$2.ChoiceParser;
    exports.BooleanParser = parsers$2.BooleanParser;

    exports.EnglishBooleanExtractorConfiguration =
      boolean_1.EnglishBooleanExtractorConfiguration;

    exports.FrenchBooleanExtractorConfiguration =
      boolean_1$1.FrenchBooleanExtractorConfiguration;

    exports.GermanBooleanExtractorConfiguration =
      boolean_1$2.GermanBooleanExtractorConfiguration;

    exports.PortugueseBooleanExtractorConfiguration =
      boolean_1$4.PortugueseBooleanExtractorConfiguration;

    exports.JapaneseBooleanExtractorConfiguration =
      boolean_1$3.JapaneseBooleanExtractorConfiguration;

    exports.SpanishBooleanExtractorConfiguration =
      boolean_1$5.SpanishBooleanExtractorConfiguration;

    exports.ChineseBooleanExtractorConfiguration =
      boolean_1$6.ChineseBooleanExtractorConfiguration;

    exports.EnglishChoice = englishChoice.EnglishChoice;

    exports.FrenchChoice = frenchChoice.FrenchChoice;

    exports.GermanChoice = germanChoice.GermanChoice;

    exports.PortugueseChoice = portugueseChoice.PortugueseChoice;

    exports.JapaneseChoice = japaneseChoice.JapaneseChoice;

    exports.SpanishChoice = spanishChoice.SpanishChoice;

    exports.ChineseChoice = chineseChoice.ChineseChoice;
  });

  var recognizersTextChoice$1 = unwrapExports(recognizersTextChoice);
  var recognizersTextChoice_1 = recognizersTextChoice.ChoiceRecognizer;
  var recognizersTextChoice_2 = recognizersTextChoice.ChoiceOptions;
  var recognizersTextChoice_3 = recognizersTextChoice.recognizeBoolean;
  var recognizersTextChoice_4 = recognizersTextChoice.Culture;
  var recognizersTextChoice_5 = recognizersTextChoice.Constants;
  var recognizersTextChoice_6 = recognizersTextChoice.ChoiceModel;
  var recognizersTextChoice_7 = recognizersTextChoice.BooleanModel;
  var recognizersTextChoice_8 = recognizersTextChoice.ChoiceExtractor;
  var recognizersTextChoice_9 = recognizersTextChoice.BooleanExtractor;
  var recognizersTextChoice_10 = recognizersTextChoice.ChoiceParser;
  var recognizersTextChoice_11 = recognizersTextChoice.BooleanParser;
  var recognizersTextChoice_12 =
    recognizersTextChoice.EnglishBooleanExtractorConfiguration;
  var recognizersTextChoice_13 =
    recognizersTextChoice.FrenchBooleanExtractorConfiguration;
  var recognizersTextChoice_14 =
    recognizersTextChoice.GermanBooleanExtractorConfiguration;
  var recognizersTextChoice_15 =
    recognizersTextChoice.PortugueseBooleanExtractorConfiguration;
  var recognizersTextChoice_16 =
    recognizersTextChoice.JapaneseBooleanExtractorConfiguration;
  var recognizersTextChoice_17 =
    recognizersTextChoice.SpanishBooleanExtractorConfiguration;
  var recognizersTextChoice_18 =
    recognizersTextChoice.ChineseBooleanExtractorConfiguration;
  var recognizersTextChoice_19 = recognizersTextChoice.EnglishChoice;
  var recognizersTextChoice_20 = recognizersTextChoice.FrenchChoice;
  var recognizersTextChoice_21 = recognizersTextChoice.GermanChoice;
  var recognizersTextChoice_22 = recognizersTextChoice.PortugueseChoice;
  var recognizersTextChoice_23 = recognizersTextChoice.JapaneseChoice;
  var recognizersTextChoice_24 = recognizersTextChoice.SpanishChoice;
  var recognizersTextChoice_25 = recognizersTextChoice.ChineseChoice;

  exports["default"] = recognizersTextChoice$1;
  exports.ChoiceRecognizer = recognizersTextChoice_1;
  exports.ChoiceOptions = recognizersTextChoice_2;
  exports.recognizeBoolean = recognizersTextChoice_3;
  exports.Culture = recognizersTextChoice_4;
  exports.Constants = recognizersTextChoice_5;
  exports.ChoiceModel = recognizersTextChoice_6;
  exports.BooleanModel = recognizersTextChoice_7;
  exports.ChoiceExtractor = recognizersTextChoice_8;
  exports.BooleanExtractor = recognizersTextChoice_9;
  exports.ChoiceParser = recognizersTextChoice_10;
  exports.BooleanParser = recognizersTextChoice_11;
  exports.EnglishBooleanExtractorConfiguration = recognizersTextChoice_12;
  exports.FrenchBooleanExtractorConfiguration = recognizersTextChoice_13;
  exports.GermanBooleanExtractorConfiguration = recognizersTextChoice_14;
  exports.PortugueseBooleanExtractorConfiguration = recognizersTextChoice_15;
  exports.JapaneseBooleanExtractorConfiguration = recognizersTextChoice_16;
  exports.SpanishBooleanExtractorConfiguration = recognizersTextChoice_17;
  exports.ChineseBooleanExtractorConfiguration = recognizersTextChoice_18;
  exports.EnglishChoice = recognizersTextChoice_19;
  exports.FrenchChoice = recognizersTextChoice_20;
  exports.GermanChoice = recognizersTextChoice_21;
  exports.PortugueseChoice = recognizersTextChoice_22;
  exports.JapaneseChoice = recognizersTextChoice_23;
  exports.SpanishChoice = recognizersTextChoice_24;
  exports.ChineseChoice = recognizersTextChoice_25;

  return exports;
})({});
//# sourceMappingURL=recognizers-text-choice.browser.js.map
