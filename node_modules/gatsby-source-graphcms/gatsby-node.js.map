{"version":3,"sources":["src/gatsby-node.js"],"names":["pluginOptionsSchema","Joi","object","buildMarkdownNodes","boolean","description","default","downloadLocalImages","endpoint","string","required","fragmentsPath","locales","array","items","min","stages","token","typePrefix","concurrency","number","integer","createSourcingConfig","gatsbyApi","execute","operationName","query","variables","reporter","method","body","JSON","stringify","headers","Authorization","then","response","ok","statusText","json","errors","catch","error","schema","nodeInterface","getType","queryFields","getFields","possibleTypes","getPossibleTypes","singularRootFieldName","type","Object","keys","find","fieldName","pluralRootFieldName","String","name","hasLocaleField","locale","gatsbyNodeTypes","map","remoteTypeName","queries","stage","join","nodeQueryVariables","id","where","fragmentsDir","process","cwd","fs","existsSync","mkdirSync","addSystemFieldArguments","field","includes","variation","fragments","defaultArgumentValues","documents","customFragments","gatsbyTypePrefix","gatsbyNodeDefs","sourceNodes","pluginOptions","webhookBody","config","length","operation","data","nodeEvent","__typename","eventName","remoteId","localizations","nodeEvents","onCreateNode","node","actions","createNode","createNodeId","getCache","cache","mimeType","fileNode","url","parentNodeId","fileName","localFile","e","console","PLUGIN_NAME","fields","entries","key","value","filter","forEach","decodedMarkdown","he","decode","markdown","markdownNode","parent","internal","mediaType","content","contentDigest","crypto","createHash","update","digest","createSchemaCustomization","createTypes","generateImageSource","baseURL","width","height","format","fit","quality","src","makeResolveGatsbyImageData","resolveGatsbyImageData","handle","filename","options","imageDataArgs","pluginName","sourceMetadata","split","placeholder","lowResImageURL","imageBase64","placeholderURL","backgroundColor","createResolvers","typeName","gatsbyImageData"],"mappings":"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","sourcesContent":["import crypto from 'crypto'\nimport fs from 'fs'\nimport {\n  wrapQueryExecutorWithQueue,\n  loadSchema,\n  readOrGenerateDefaultFragments,\n  compileNodeQueries,\n  buildNodeDefinitions,\n  createSchemaCustomization as createToolkitSchemaCustomization,\n  sourceAllNodes,\n  sourceNodeChanges,\n} from 'gatsby-graphql-source-toolkit'\nimport {\n  generateImageData,\n  getLowResolutionImageURL,\n} from 'gatsby-plugin-image'\nimport { getGatsbyImageResolver } from 'gatsby-plugin-image/graphql-utils'\nimport { createRemoteFileNode } from 'gatsby-source-filesystem'\nimport he from 'he'\nimport fetch from 'node-fetch'\n\nimport { PLUGIN_NAME } from './util/constants'\nimport { getImageBase64, getBase64DataURI } from './util/getImageBase64'\nimport { getImageDominantColor } from './util/getDominantColor'\nimport { getTracedSVG } from './util/getTracedSVG'\nimport { reportPanic } from './util/reportPanic'\n\nexport function pluginOptionsSchema({ Joi }) {\n  return Joi.object({\n    buildMarkdownNodes: Joi.boolean()\n      .description(\n        `Build markdown nodes for all [RichText](https://graphcms.com/docs/reference/fields/rich-text) fields in your GraphCMS schema`\n      )\n      .default(false),\n    downloadLocalImages: Joi.boolean()\n      .description(\n        `Download and cache GraphCMS image assets in your Gatsby project`\n      )\n      .default(false),\n    endpoint: Joi.string()\n      .description(\n        `The endpoint URL for the GraphCMS project. This can be found in the [project settings UI](https://graphcms.com/docs/guides/concepts/apis#working-with-apis)`\n      )\n      .required(),\n    fragmentsPath: Joi.string()\n      .description(\n        `The local project path where generated query fragments are saved. This is relative to your current working directory. If using multiple instances of the source plugin, you **must** provide a value here to prevent type and/or fragment conflicts.`\n      )\n      .default(`graphcms-fragments`),\n    locales: Joi.array()\n      .description(\n        `An array of locale key strings from your GraphCMS project. You can read more about working with localisation in GraphCMS [here](https://graphcms.com/docs/guides/concepts/i18n).`\n      )\n      .items(Joi.string())\n      .min(1)\n      .default(['en']),\n    stages: Joi.array()\n      .description(\n        `An array of Content Stages from your GraphCMS project. You can read more about using Content Stages [here](https://graphcms.com/guides/working-with-content-stages).`\n      )\n      .items(Joi.string())\n      .min(1)\n      .default(['PUBLISHED']),\n    token: Joi.string().description(\n      `If your GraphCMS project is **not** publicly accessible, you will need to provide a [Permanent Auth Token](https://graphcms.com/docs/reference/authorization) to correctly authorize with the API. You can learn more about creating and managing API tokens [here](https://graphcms.com/docs/guides/concepts/apis#working-with-apis)`\n    ),\n    typePrefix: Joi.string()\n      .description(\n        `The string by which every generated type name is prefixed with. For example, a type of Post in GraphCMS would become GraphCMS_Post by default. If using multiple instances of the source plugin, you **must** provide a value here to prevent type conflicts`\n      )\n      .default(`GraphCMS_`),\n    concurrency: Joi.number()\n      .integer()\n      .min(1)\n      .default(10)\n      .description(`The number of promises to run at one time.`),\n  })\n}\n\nconst createSourcingConfig = async (\n  gatsbyApi,\n  { endpoint, fragmentsPath, locales, stages, token, typePrefix, concurrency }\n) => {\n  const execute = async ({ operationName, query, variables = {} }) => {\n    const { reporter } = gatsbyApi\n\n    return await fetch(endpoint, {\n      method: 'POST',\n      body: JSON.stringify({ query, variables, operationName }),\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && { Authorization: `Bearer ${token}` }),\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          return reportPanic(\n            1,\n            'Problem building GraphCMS nodes',\n            response.statusText,\n            reporter\n          )\n        }\n\n        return response.json()\n      })\n      .then((response) => {\n        if (response.errors) {\n          return reportPanic(\n            2,\n            'Problem building GraphCMS nodes',\n            JSON.stringify(response.errors, null, 2),\n            reporter\n          )\n        }\n\n        return response\n      })\n      .catch((error) => {\n        return reportPanic(\n          3,\n          'Problem building GraphCMS nodes',\n          JSON.stringify(error, null, 2),\n          reporter\n        )\n      })\n  }\n  const schema = await loadSchema(execute)\n\n  const nodeInterface = schema.getType('Node')\n  const query = schema.getType('Query')\n  const queryFields = query.getFields()\n  const possibleTypes = schema.getPossibleTypes(nodeInterface)\n\n  const singularRootFieldName = (type) =>\n    Object.keys(queryFields).find(\n      (fieldName) => queryFields[fieldName].type === type\n    )\n\n  const pluralRootFieldName = (type) =>\n    Object.keys(queryFields).find(\n      (fieldName) => String(queryFields[fieldName].type) === `[${type.name}!]!`\n    )\n\n  const hasLocaleField = (type) => type.getFields().locale\n\n  const gatsbyNodeTypes = possibleTypes.map((type) => ({\n    remoteTypeName: type.name,\n    queries: [\n      ...locales.map((locale) =>\n        stages.map(\n          (stage) => `\n          query LIST_${pluralRootFieldName(\n            type\n          )}_${locale}_${stage} { ${pluralRootFieldName(type)}(first: $limit, ${\n            hasLocaleField(type) ? `locales: [${locale}]` : ''\n          }, skip: $offset, stage: ${stage}) {\n              ..._${type.name}Id_\n            }\n          }`\n        )\n      ),\n      `query NODE_${singularRootFieldName(type)}{ ${singularRootFieldName(\n        type\n      )}(where: $where, ${hasLocaleField(type) ? `locales: $locales` : ''}) {\n        ..._${type.name}Id_\n        }\n      }\n      fragment _${type.name}Id_ on ${type.name} {\n        __typename\n        id\n        ${hasLocaleField(type) ? `locale` : ''}\n        stage\n      }`,\n    ].join('\\n'),\n    nodeQueryVariables: ({ id, locale, stage }) => ({\n      where: { id },\n      locales: [locale],\n      stage,\n    }),\n  }))\n\n  const fragmentsDir = `${process.cwd()}/${fragmentsPath}`\n\n  if (!fs.existsSync(fragmentsDir)) fs.mkdirSync(fragmentsDir)\n\n  const addSystemFieldArguments = (field) => {\n    if (['createdAt', 'publishedAt', 'updatedAt'].includes(field.name))\n      return { variation: `COMBINED` }\n  }\n\n  const fragments = await readOrGenerateDefaultFragments(fragmentsDir, {\n    schema,\n    gatsbyNodeTypes,\n    defaultArgumentValues: [addSystemFieldArguments],\n  })\n\n  const documents = compileNodeQueries({\n    schema,\n    gatsbyNodeTypes,\n    customFragments: fragments,\n  })\n\n  return {\n    gatsbyApi,\n    schema,\n    execute: wrapQueryExecutorWithQueue(execute, { concurrency }),\n    gatsbyTypePrefix: typePrefix,\n    gatsbyNodeDefs: buildNodeDefinitions({ gatsbyNodeTypes, documents }),\n  }\n}\n\nexport async function sourceNodes(gatsbyApi, pluginOptions) {\n  const { webhookBody } = gatsbyApi\n\n  const config = await createSourcingConfig(gatsbyApi, pluginOptions)\n\n  await createToolkitSchemaCustomization(config)\n\n  if (webhookBody && Object.keys(webhookBody).length) {\n    const { operation, data } = webhookBody\n\n    const nodeEvent = (operation, { __typename, locale, id }) => {\n      switch (operation) {\n        case 'delete':\n        case 'unpublish':\n          return {\n            eventName: 'DELETE',\n            remoteTypeName: __typename,\n            remoteId: { __typename, locale, id },\n          }\n        case 'create':\n        case 'publish':\n        case 'update':\n          return {\n            eventName: 'UPDATE',\n            remoteTypeName: __typename,\n            remoteId: { __typename, locale, id },\n          }\n      }\n    }\n\n    const { localizations = [{ locale: 'en' }] } = data\n\n    await sourceNodeChanges(config, {\n      nodeEvents: localizations.map(({ locale }) =>\n        nodeEvent(operation, { locale, ...data })\n      ),\n    })\n  } else {\n    await sourceAllNodes(config)\n  }\n}\n\nexport async function onCreateNode(\n  { node, actions: { createNode }, createNodeId, getCache, cache },\n  {\n    buildMarkdownNodes = false,\n    downloadLocalImages = false,\n    typePrefix = 'GraphCMS_',\n  }\n) {\n  if (\n    downloadLocalImages &&\n    node.remoteTypeName === 'Asset' &&\n    node.mimeType.includes('image/')\n  ) {\n    try {\n      const fileNode = await createRemoteFileNode({\n        url: node.url,\n        parentNodeId: node.id,\n        createNode,\n        createNodeId,\n        cache,\n        getCache,\n        ...(node.fileName && { name: node.fileName }),\n      })\n\n      if (fileNode) node.localFile = fileNode.id\n    } catch (e) {\n      console.error(`[${PLUGIN_NAME}]`, e)\n    }\n  }\n\n  if (buildMarkdownNodes) {\n    const fields = Object.entries(node)\n      .map(([key, value]) => ({ key, value }))\n      .filter(\n        ({ value }) =>\n          value && value.remoteTypeName && value.remoteTypeName === 'RichText'\n      )\n\n    if (fields.length) {\n      fields.forEach((field) => {\n        const decodedMarkdown = he.decode(field.value.markdown)\n\n        const markdownNode = {\n          id: `MarkdownNode:${createNodeId(`${node.id}-${field.key}`)}`,\n          parent: node.id,\n          internal: {\n            type: `${typePrefix}MarkdownNode`,\n            mediaType: 'text/markdown',\n            content: decodedMarkdown,\n            contentDigest: crypto\n              .createHash(`md5`)\n              .update(decodedMarkdown)\n              .digest(`hex`),\n          },\n        }\n\n        createNode(markdownNode)\n\n        field.value.markdownNode = markdownNode.id\n      })\n    }\n  }\n}\n\nexport function createSchemaCustomization(\n  { actions: { createTypes } },\n  {\n    buildMarkdownNodes = false,\n    downloadLocalImages = false,\n    typePrefix = 'GraphCMS_',\n  }\n) {\n  if (downloadLocalImages)\n    createTypes(`\n      type ${typePrefix}Asset {\n        localFile: File @link\n      }\n    `)\n\n  if (buildMarkdownNodes)\n    createTypes(`\n      type ${typePrefix}MarkdownNode implements Node {\n        id: ID!\n      }\n      type ${typePrefix}RichText {\n        markdownNode: ${typePrefix}MarkdownNode @link\n      }\n    `)\n}\n\nconst generateImageSource = (\n  baseURL,\n  width,\n  height,\n  format,\n  fit = 'clip',\n  { quality = 100 }\n) => {\n  const src = `https://media.graphcms.com/resize=width:${width},height:${height},fit:${fit}/output=quality:${quality}/${baseURL}`\n\n  return { src, width, height, format }\n}\n\nfunction makeResolveGatsbyImageData(cache) {\n  return async function resolveGatsbyImageData(\n    { handle: filename, height, mimeType, width, url, internal },\n    options\n  ) {\n    if (\n      !['image/png', 'image/jpg', 'image/jpeg', 'image/tiff'].includes(mimeType)\n    ) {\n      return null\n    }\n\n    const imageDataArgs = {\n      ...options,\n      pluginName: PLUGIN_NAME,\n      sourceMetadata: { format: mimeType.split('/')[1], height, width },\n      filename,\n      generateImageSource,\n      options,\n    }\n\n    if (options?.placeholder === `BLURRED`) {\n      const lowResImageURL = getLowResolutionImageURL(imageDataArgs)\n\n      const imageBase64 = await getImageBase64({\n        url: lowResImageURL,\n        cache,\n      })\n\n      imageDataArgs.placeholderURL = getBase64DataURI({\n        imageBase64,\n      })\n    }\n\n    if (options?.placeholder === `DOMINANT_COLOR`) {\n      const lowResImageURL = getLowResolutionImageURL(imageDataArgs)\n\n      imageDataArgs.backgroundColor = await getImageDominantColor({\n        url: lowResImageURL,\n        cache,\n      })\n    }\n\n    if (options?.placeholder === `TRACED_SVG`) {\n      imageDataArgs.placeholderURL = await getTracedSVG({\n        url,\n        internal,\n        filename,\n        cache,\n      })\n    }\n\n    return generateImageData(imageDataArgs)\n  }\n}\n\nexport function createResolvers(\n  { createResolvers, cache },\n  { typePrefix = 'GraphCMS_' }\n) {\n  const typeName = `${typePrefix}Asset`\n\n  createResolvers({\n    [typeName]: {\n      gatsbyImageData: {\n        ...getGatsbyImageResolver(makeResolveGatsbyImageData(cache), {\n          quality: {\n            type: 'Int',\n            description:\n              'The default image quality generated. This is overridden by any format-specific options.',\n          },\n          placeholder: {\n            type:\n              'enum GraphCMSImagePlaceholder { NONE, BLURRED, DOMINANT_COLOR, TRACED_SVG }',\n            description: `The style of temporary image shown while the full image loads.\nBLURRED: generates a very low-resolution version of the image and displays it as a blurred background (default).\nDOMINANT_COLOR: the dominant color of the image used as a solid background color.\nTRACED_SVG: generates a simplified, flat SVG version of the source image, which it displays as a placeholder.\nNONE: No placeholder. Use the backgroundColor option to set a static background if you wish.\n`,\n          },\n        }),\n        type: 'JSON',\n      },\n    },\n  })\n}\n"],"file":"gatsby-node.js"}