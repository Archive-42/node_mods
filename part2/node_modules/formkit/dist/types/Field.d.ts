import Form from './Form';
import FieldSchema from './interfaces/FieldSchema';
import { FieldEventName } from './FieldStorage';
import FieldStorageEventData from './interfaces/eventData/FieldStorageEventData';
import ChangeEventData from './interfaces/eventData/ChangeEventData';
import FieldState from './interfaces/FieldState';
export default class Field {
    private readonly form;
    private readonly fieldStorage;
    private readonly pathToField;
    private readonly fieldName;
    constructor(pathToField: string, params: FieldSchema, form: Form);
    readonly savedValue: any;
    readonly editedValue: any;
    readonly value: any;
    readonly name: string;
    readonly fullName: string;
    readonly dirty: boolean;
    readonly touched: boolean;
    readonly valid: boolean;
    readonly invalidMsg: string;
    readonly saving: boolean;
    readonly focused: boolean;
    readonly disabled: boolean;
    readonly defaultValue: any;
    setValue(rawValue: any): void;
    setSavedValue(rawValue: any): void;
    setDisabled(disabled: boolean): void;
    handleChange: (rawValue: any) => void;
    handleFocusIn: () => void;
    handleBlur: () => void;
    handleEndEditing: () => void;
    on(eventName: FieldEventName, cb: (data: FieldStorageEventData | ChangeEventData) => void): number;
    off(eventName: FieldEventName, handlerIndex: number): void;
    clear: () => void;
    revert: () => void;
    reset: () => void;
    $clearSilent(): void;
    $revertSilent(): void;
    $resetSilent(): void;
    $destroyHandlers(): void;
    $setEditedValueSilent(newValue: any): void;
    $setSavedValue(newSavedValue: any): void;
    $setStateSilent(newPartlyState: FieldState): void;
    $setValueAfterSave(savedValue: any): void;
    private initState;
    private generateInitialState;
    private riseUserChangeEvent;
    private setState;
    private updateStateAndValidate;
    private updateState;
}
