import { Store } from './Storage';
import { FormEventName, Values } from './FormStorage';
import FieldStorage from './FieldStorage';
import Field from './Field';
import Config from './interfaces/Config';
import FormStorageEventData from './interfaces/eventData/FormStorageEventData';
import FormState from './interfaces/FormState';
import ChangeEventData from './interfaces/eventData/ChangeEventData';
import ActionEventData from './interfaces/eventData/ActionEventData';
import { Handler as ValidateCb } from './ValidateControl';
export interface ErrorMessage {
    field: string;
    message: string;
}
export default class Form {
    readonly fields: {
        [index: string]: Field;
    };
    readonly config: Config;
    readonly fieldStorage: FieldStorage;
    private readonly storage;
    private readonly formStorage;
    private readonly saveControl;
    private readonly submitControl;
    private readonly validateControl;
    constructor(config: Config);
    readonly values: Values;
    readonly savedValues: Values;
    readonly editedValues: Values;
    readonly unsavedValues: Values;
    readonly dirty: boolean;
    readonly touched: boolean;
    readonly saving: boolean;
    readonly submitting: boolean;
    readonly submittable: boolean;
    readonly savable: boolean;
    readonly valid: boolean;
    readonly invalidMessages: Array<ErrorMessage>;
    init(initialFields: Array<string> | {
        [index: string]: object;
    }, validateCb?: ValidateCb): void;
    on(eventName: FormEventName, cb: (data: FormStorageEventData | ChangeEventData | ActionEventData) => void): number;
    removeListener(eventName: FormEventName, handlerIndex: number): void;
    onSubmit(handler: (values: Values, editedValues: Values) => Promise<void> | void): void;
    onSave(handler: (values: Values) => Promise<void> | void): void;
    save(): Promise<void>;
    canSubmit(): string | void;
    canSave(): string | void;
    handleSubmit: () => Promise<void>;
    clear: () => void;
    revert: () => void;
    reset: () => void;
    destroy(): Promise<void>;
    cancelSaving(): void;
    flushSaving(): void;
    setValidateCb(validateCb: ValidateCb): void;
    setValues(newValues: Values): void;
    setSavedValues(newValues: Values): void;
    validate(): string | void;
    $getWholeStorageState(): Store;
    $setStateSilent(partlyState: FormState): void;
    $handleFieldChange(eventData: ChangeEventData): void;
    $emit(eventName: FormEventName, data: FormStorageEventData | ChangeEventData | ActionEventData): void;
    $moveValuesToSaveLayer(values: Values, force?: boolean): void;
    $setState(partlyState: {
        [index: string]: any;
    }): void;
    $riseActionEvent(eventName: FormEventName, error?: Error): void;
    private initField;
    private updateStateAndValidate;
    private updateState;
    private eachRawField;
}
