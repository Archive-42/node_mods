import { Map } from 'immutable';
import FormState from './interfaces/FormState';
import FieldState from './interfaces/FieldState';
import { FormStateName, Values } from './FormStorage';
import { FieldStateName } from './FieldStorage';
import IndexedEventEmitter from './helpers/IndexedEventEmitter';
declare type EventHandler = (data: any) => void;
export interface ImmutableStore {
    formState: Map<string, any>;
    fieldsState: {
        [index: string]: Map<string, any>;
    };
    values: Map<string, any>;
}
export interface Store {
    formState: FormState;
    fieldsState: FieldState;
    values: {
        [index: string]: any;
    };
}
export default class Storage {
    readonly events: IndexedEventEmitter<EventHandler>;
    private store;
    getWholeStorageState(): Store;
    getWholeFormState(): FormState;
    getFormState(stateName: FormStateName): any;
    getCombinedValues(): Values;
    getListeners(name: string): (EventHandler | undefined)[];
    destroy(): void;
    setFormState(partlyState: FormState): void;
    eachField(cb: (field: Map<string, any>, path: string) => void): void;
    getWholeFieldState(pathToField: string): FieldState | undefined;
    getFieldState(pathToField: string, stateName: FieldStateName): any;
    getCombinedValue(pathToField: string): any;
    setFieldState(pathToField: string, partlyState: FieldState): void;
    generateNewFieldState(): FieldState;
    _generateNewFormState(): FormState;
    _updateCombinedValue(pathToField: string, savedValue: any, editedValue: any): void;
}
export {};
