import Field from '../Field';
export declare const FIELD_PATH_SEPARATOR = ".";
export declare function findFieldRecursively(fields: {
    [index: string]: object;
}, cb: (field: Field, path: string) => boolean | Field | void): Field | void;
export declare function eachFieldRecursively(fields: {
    [index: string]: object;
}, cb: (field: Field, path: string) => void): void;
export declare function eachFieldSchemaRecursively(rootObject: {
    [index: string]: any;
}, cb: (item: {
    [index: string]: any;
}, path: string) => any): void;
export declare function isFieldSchema(comingSchema: object): boolean;
export declare function eachRecursively(rootObject: {
    [index: string]: any;
}, cb: (item: any, path: string) => false | void): void;
export declare function calculateDirty(editedValue: any, savedValue: any): boolean;
export declare function getFieldName(pathToField: string): string;
export declare function isPromise(unknown: any): any;
export declare function resolvePromise(value: any): Promise<any>;
export declare function parseValue(rawValue: any): any;
