export default class DebouncedCall {
    private currentProcess;
    private nextCb;
    private onEndCb;
    private mainPromise;
    private mainResolve;
    private delayTime;
    constructor(delayTime: number);
    getPromise(): Promise<void> | null;
    isWaiting(): boolean;
    isPending(): boolean;
    isInProgress(): boolean;
    setDebounceTime(delayTime: number): void;
    cancel(): void;
    flush(): void;
    onEnd(cb: (error: Error | null) => void): void;
    exec(cb: () => Promise<void>, force?: boolean): Promise<void>;
    private clearQueue;
    private stopDelayed;
    private chooseTheWay;
    private runFreshProcess;
    private addToQueue;
    private afterCbFinished;
}
