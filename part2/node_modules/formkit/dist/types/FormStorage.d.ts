import { ErrorMessage } from './Form';
import FormStorageEventData from './interfaces/eventData/FormStorageEventData';
import FormState from './interfaces/FormState';
import Storage from './Storage';
import ChangeEventData from './interfaces/eventData/ChangeEventData';
import ActionEventData from './interfaces/eventData/ActionEventData';
export declare type Values = {
    [index: string]: any;
};
export declare type FormEventName = 'change' | 'storage' | 'saveStart' | 'saveEnd' | 'submitStart' | 'submitEnd';
export declare type FormStateName = 'touched' | 'submitting' | 'saving' | 'valid';
export default class FormStorage {
    private readonly storage;
    constructor(storage: Storage);
    getState(stateName: FormStateName): any;
    getCombinedValues(): Values;
    getEditedValues(): Values;
    getSavedValues(): Values;
    getUnSavedValues(): Values;
    getInvalidMessages(): Array<ErrorMessage>;
    getWholeState(): FormState;
    setStateSilent(partlyState: FormState): void;
    emitStorageEvent(newState: any, prevState: any, force?: boolean): void;
    on(eventName: FormEventName, cb: (data: FormStorageEventData | ChangeEventData | ActionEventData) => void): number;
    emit(eventName: FormEventName, data: FormStorageEventData | ChangeEventData | ActionEventData): void;
    removeListener(eventName: FormEventName, handlerIndex: number): void;
    destroy(): void;
}
