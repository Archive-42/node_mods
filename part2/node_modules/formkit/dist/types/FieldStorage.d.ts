import FieldStorageEventData from './interfaces/eventData/FieldStorageEventData';
import Storage from './Storage';
import FieldState from './interfaces/FieldState';
import FormStorage from './FormStorage';
import ChangeEventData from './interfaces/eventData/ChangeEventData';
export declare type FieldEventName = 'change' | 'storage' | 'saveStart' | 'saveEnd';
export declare type FieldStateName = 'defaultValue' | 'dirty' | 'disabled' | 'editedValue' | 'focused' | 'initial' | 'invalidMsg' | 'touched' | 'savedValue' | 'saving';
export default class FieldStorage {
    private readonly storage;
    private readonly formStorage;
    constructor(storage: Storage, formStorage: FormStorage);
    initState(pathToField: string, initialState: FieldState): void;
    getCombinedValue(pathToField: string): any;
    getState(pathToField: string, stateName: FieldStateName): any;
    getWholeState(pathToField: string): FieldState | undefined;
    setStateSilent(pathToField: string, partlyState: FieldState): void;
    emitStorageEvent(pathToField: string, newState: FieldState, prevState?: FieldState): void;
    on(pathToField: string, eventName: FieldEventName, cb: (data: FieldStorageEventData | ChangeEventData) => void): number;
    emit(pathToField: string, eventName: FieldEventName, data: FieldStorageEventData | ChangeEventData): void;
    removeListener(pathToField: string, eventName: FieldEventName, handlerIndex: number): void;
    isFieldUnsaved(pathToField: string): boolean;
}
